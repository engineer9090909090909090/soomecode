<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Aspose.Pdf.Kit</name>
  </assembly>
  <members>
    <!-- 对于成员“M:Aspose.Pdf.DocElements.PdfReviser.AcroFields.VerifySignature(System.String)”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“M:Aspose.Pdf.DocElements.PdfReviser.PdfStamper.CreateSignature(Aspose.Pdf.DocElements.PdfReviser.PdfReader,System.IO.Stream,System.Char,System.String,System.Boolean)”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“M:Aspose.Pdf.DocElements.PdfReviser.PdfStamper.CreateSignature(Aspose.Pdf.DocElements.PdfReviser.PdfReader,System.IO.Stream,System.Char)”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“M:Aspose.Pdf.DocElements.PdfReviser.PdfStamper.CreateSignature(Aspose.Pdf.DocElements.PdfReviser.PdfReader,System.IO.Stream,System.Char,System.String)”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“M:Aspose.Pdf.DocElements.PdfReviser.ByteBuffer1.SetCacheSize(System.Int32)”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“T:Aspose.Pdf.DocElements.PdfReviser.PdfPKCS7”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“M:Aspose.Pdf.DocElements.PdfReviser.PdfPKCS7.GetAuthenticatedAttributeBytes(System.Byte[],System.DateTime)”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“F:Aspose.Pdf.DocElements.PdfReviser.PdfPKCS7.X509Name.EmailAddress”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“M:Aspose.Pdf.DocElements.PdfReviser.PdfSignatureAppearance.GetLayer(System.Int32)”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“M:Aspose.Pdf.DocElements.PdfReviser.PdfSignatureAppearance.GetTopLayer”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“M:Aspose.Pdf.DocElements.PdfReviser.PdfSignatureAppearance.GetAppearance”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“M:Aspose.Pdf.DocElements.PdfReviser.PdfSignatureAppearance.PreClose”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“M:Aspose.Pdf.DocElements.PdfReviser.PdfSignatureAppearance.PreClose(System.Collections.Hashtable)”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“M:Aspose.Pdf.DocElements.PdfReviser.PdfSignatureAppearance.Close(Aspose.Pdf.DocElements.PdfReviser.PdfDictionary)”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“P:Aspose.Pdf.DocElements.PdfReviser.PdfSignatureAppearance.RangeStream”忽略有格式错误的 XML 注释 -->
    <!-- 对于成员“P:Aspose.Pdf.DocElements.PdfReviser.PdfSignatureAppearance.SigStandard”忽略有格式错误的 XML 注释 -->
    <member name="T:Aspose.Pdf.Kit.AutoFiller">
      <summary>
            Represents a class to receive data from database or other datasource, fills them into the designed fields of the template pdf and at last generates new pdf file or stream.
            It has two template file input modes:input as a stream or a pdf file.
            It has four types of output modes:one merged stream, one merged file, many small streams, many small files.
            It can recieve literal data contained in a System.Data.DataTable.
            </summary>
      <example>
        <code>
            [C#]
            //Note: mail.pdf is a template pdf which has seven text fields. NorthWind.mdb is the microsoft access db.
            ////Common part: Get the data from the database NorthWind.mdb fill it into the DataTable.
            			
            OleDbCommand mQueryCommand;
            OleDbDataAdapter mDbDataAdapter;
            OleDbConnection mDbConnection;
            
            //Construct the data table.
            DataTable mDataTable = new DataTable("MailMerge");
            DataColumnCollection columns = mDataTable.Columns;
            columns.Add("CompanyName",typeof(string));
            columns.Add("ContactName",typeof(string));
            columns.Add("Address",typeof(string));
            columns.Add("PostalCode",typeof(string));
            columns.Add("City",typeof(string));
            columns.Add("Country",typeof(string));
            columns.Add("Heading",typeof(string));
            
            
            //Connect to the database source and query the data.
            mDbConnection = new OleDbConnection();
            mDbConnection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + 
            DbPath + "NorthWind.mdb";
            mQueryCommand = new OleDbCommand();
            mQueryCommand.Connection = mDbConnection;
            mDbConnection.Open();
            
            
            mQueryCommand.CommandText = "select CompanyName, ContactName, Address, PostalCode, City, Country from Customers;";
            mDbDataAdapter = new OleDbDataAdapter(mQueryCommand);
            		
            mDbDataAdapter.Fill(mDataTable);
            
            for (int i = 0; i&lt;mDataTable.Rows.Count;i++)
            {
            	mDataTable.Rows[i][mDataTable.Columns.Count - 1] = "Dear " + mDataTable.Rows[i][0].ToString() + ",";
            	System.Console.WriteLine("postalCode:" + mDataTable.Rows[i][3].ToString());
            	System.Console.WriteLine("Heading:" + mDataTable.Rows[i][mDataTable.Columns.Count - 1].ToString());
            }
            
            mDbDataAdapter.Dispose();
            mDbConnection.Close();
            ////End of Common part.
            
            ////case one:
            ////Input template pdf is a pdf file and output is a big merged stream.		
             
            AutoFiller autoFiller = new AutoFiller();
            		
            autoFiller.InputFileName = "mail.pdf";
            autoFiller.OutputStream = Response.OutputStream;
            
            autoFiller.ImportDataTable(mDataTable);
            autoFiller.Save();
            
            ////case two:
            ////Input template pdf is a pdf file and output is a lot of small files.
            AutoFiller autoFiller = new AutoFiller();
            		
            autoFiller.InputFileName = "mail.pdf";
            autoFiller.GeneratingPath = ".\\";
            autoFiller.BasicFileName = "outputFile";
            
            autoFiller.ImportDataTable(mDataTable);
            autoFiller.Save();
            
            [Visual Basic]
            'Note: mail.pdf is a template pdf which has seven text fields. NorthWind.mdb is the microsoft access db.
            'Common part: Get the data from the database NorthWind.mdb fill it into the DataTable. 
            mQueryCommand As OleDbCommand = Nothing
            mDbDataAdapter As OleDbDataAdapter = Nothing
            mDbConnection As OleDbConnection = Nothing
            
            mDataTable As DataTable = Nothing
            
            mPath As String = Nothing
            mTemplatePdf As String = Nothing
            
            'Construct the data table.
            mDataTable = New DataTable("MailMerge")
            Dim columns As DataColumnCollection = mDataTable.Columns
            'Create columns for the datatable. 
            'Every column's  name should be the same as one field's name of the templatePdf.
            columns.Add("CompanyName", Type.GetType("System.String"))
            
            columns.Add("ContactName", Type.GetType("System.String"))
            columns.Add("Address", Type.GetType("System.String"))
            columns.Add("PostalCode", Type.GetType("System.String"))
            columns.Add("City", Type.GetType("System.String"))
            columns.Add("Country", Type.GetType("System.String"))
            columns.Add("Heading", Type.GetType("System.String"))
            
            
            'Connect to the database source and query the data.
            mDbConnection = New OleDbConnection
            mDbConnection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DbPath + "NorthWind.mdb"
            mQueryCommand = New OleDbCommand
            mQueryCommand.Connection = mDbConnection
            mDbConnection.Open()
            
            'Query the data and insert into the datatable.
            mQueryCommand.CommandText = "select CompanyName, ContactName, Address, PostalCode, City, Country from Customers;"
            mDbDataAdapter = New OleDbDataAdapter(mQueryCommand)
            mDbDataAdapter.Fill(mDataTable)
            
            'Construct the last column  of the Datatable.
            Dim i As Integer
            For i = 0 To mDataTable.Rows.Count - 1 Step i + 1
            	mDataTable.Rows(i)(mDataTable.Columns.Count - 1) = "Dear " + mDataTable.Rows(i)(0).ToString() + ","
            	System.Console.WriteLine("postalCode:" + mDataTable.Rows(i)(3).ToString())
            	System.Console.WriteLine("Heading:" + mDataTable.Rows(i)(mDataTable.Columns.Count - 1).ToString())
            Next
            
            mDbDataAdapter.Dispose()
            mDbConnection.Close()
            'End of Common part.
            
            'case one:
            'Input template pdf is a pdf file and output is a big merged stream.
            Dim autoFiller As AutoFiller = New AutoFiller
            
            autoFiller.InputFileName = "mail.pdf"
            autoFiller..OutputStream = Response.OutputStream
            
            autoFiller.ImportDataTable(mDataTable)
            autoFiller.Save()
            
            'case two:
            'Input template pdf is a pdf file and output is a lot of small files.
            Dim autoFiller As AutoFiller = New AutoFiller
            
            autoFiller.InputFileName = "mail.pdf"
            autoFiller.GeneratingPath = ".\";
            autoFiller.BasicFileName = "outputFile"
            
            autoFiller.ImportDataTable(mDataTable)
            autoFiller.Save()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.AutoFiller.#ctor">
      <summary>
            Constructor of AutoFiller.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.AutoFiller.Save">
      <summary>
            Saves all the pdfs.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.AutoFiller.ImportDataTable(System.Data.DataTable)">
      <summary>
            Imports data of DataTable type. Every column's name of the  dataTable must be the same as
            one field name of the template pdf in case sensitive.
            </summary>
      <param name="dataTable">The dataTable which contains all the data from database or other data source.</param>
    </member>
    <member name="P:Aspose.Pdf.Kit.AutoFiller.UnFlattenFields">
      <summary>
            Sets the fields which will not be flattened.
            If this property is not set, all the fields will be flattened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AutoFiller.OutputStream">
      <summary>
            Gets or sets the OutputStream. One of four output modes. Its classical use case is Response.OutputStream.
            Please refer to the online demo.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AutoFiller.OutputStreams">
      <summary>
            Gets or sets the many Output Streams. One of four output modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AutoFiller.InputStream">
      <summary>
            Gets or sets the input template stream. One of two input modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AutoFiller.InputFileName">
      <summary>
            Gets or sets the input template file. One of two input modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AutoFiller.OutputFileName">
      <summary>
            Gets or sets the one big merged output file. One of the four output modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AutoFiller.GeneratingPath">
      <summary>
            Gets or sets the Generating Path of the small pdf files if many small pdf files to be generated. It works with another property <see cref="P:Aspose.Pdf.Kit.AutoFiller.BasicFileName" />BasicFileName.
            One of the four output modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AutoFiller.BasicFileName">
      <summary>
            Gets or sets the basic file name if many small files will be generated. The generated file will be like "BasicFileName0","BasicFileName1",...
            It works with another property <see cref="P:Aspose.Pdf.Kit.AutoFiller.GeneratingPath" />GeneratingPath.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.DataType">
      <summary>
            Enumerates field Types'definitions.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DataType.FDF">
      <summary>
            FDF stream.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DataType.XML">
      <summary>
            XML stream.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DataType.XFDF">
      <summary>
            XFDF stream.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DataType.PDF">
      <summary>
            PDF stream.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DataType.OLEDB">
      <summary>
            OLEDB database, such as MS Access.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DataType.ODBC">
      <summary>
            ODBC database, such as MS SQL Server.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.FieldFlag">
      <summary>
            Enumerates Field Flags'definitions which define what type of operation can be done on the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FieldFlag.READ_ONLY">
      <summary>
            If set,the user may not change the value of the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FieldFlag.REQUIRED">
      <summary>
            If set,the field must have a value at the time it is exported by a submit-form field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FieldFlag.NO_EXPORT">
      <summary>
            If set, the field must not be exported by a submit-form action.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PropertyFlag">
      <summary>
            Enumerates Field Flags'definitions which define what type of operation can be done on the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PropertyFlag.ReadOnly">
      <summary>
            If set,the user may not change the value of the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PropertyFlag.Required">
      <summary>
            If set,the field must have a value at the time it is exported by a submit-form field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PropertyFlag.NoExport">
      <summary>
            If set, the field must not be exported by a submit-form action.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PropertyFlag.InvalidFlag">
      <summary>
            Invalid flag.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.AppearanceFlag">
      <summary>
            Enumerates Appearance Flag'definitions which define whether the field can be displayed, printed, zoomed, or rotated..
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AppearanceFlag.HIDDEN">
      <summary>
            If set,do not display or print the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AppearanceFlag.PRINT">
      <summary>
            If set,print the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AppearanceFlag.NOZOOM">
      <summary>
            If set,do not scale the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AppearanceFlag.NOROTATE">
      <summary>
            If set,do not rotate the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AppearanceFlag.NOVIEW">
      <summary>
            If set,do not display the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AppearanceFlag.FLAG_HIDDEN_BUT_PRINT">
      <summary>
            If set, do not display the field on screen to interact with the user,
            but it can be printed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AppearanceFlag.FLAG_VISIBLE_BUT_NOT_PRINT">
      <summary>
            If set, the field displays on screen to interact with the user,
             but it can not be printed.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.AnnotationFlag">
      <summary>
            Enumerates Appearance Flag'definitions which define whether the field can be displayed, printed, zoomed, or rotated..
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationFlag.Hidden">
      <summary>
            If set,do not display or print the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationFlag.Print">
      <summary>
            If set,print the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationFlag.NoZoom">
      <summary>
            If set,do not scale the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationFlag.NoRotate">
      <summary>
            If set,do not rotate the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationFlag.NoView">
      <summary>
            If set,do not display the field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationFlag.HiddenButPrint">
      <summary>
            If set, do not display the field on screen to interact with the user,
            but it can be printed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationFlag.VisibleButNotPrint">
      <summary>
            If set, the field displays on screen to interact with the user,
             but it can not be printed.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.SubmitFormFlag">
      <summary>
            Enumerates pushbutton's submit action, defining the type of data to be submitted.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.SubmitFormFlag.Fdf">
      <summary>
            If set,field data will be returned as FDF format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.SubmitFormFlag.Html">
      <summary>
            If set,field data will be returned as HTML format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.SubmitFormFlag.Xfdf">
      <summary>
            If set,field data will be returned as XFDF format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.SubmitFormFlag.FdfWithComments">
      <summary>
            If set,field data as well as comments will be returned as FDF format. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.SubmitFormFlag.XfdfWithComments">
      <summary>
            If set,field data as well as comments will be returned as XFDF format. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.SubmitFormFlag.Pdf">
      <summary>
            If set,the whole pdf document will be submitted.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.FieldType">
      <summary>
            Enumerates field Types'definitions.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FieldType.Text">
      <summary>
            Text type field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FieldType.ComboBox">
      <summary>
            ComboBox type field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FieldType.ListBox">
      <summary>
            ListBox type field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FieldType.Radio">
      <summary>
            Radio type field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FieldType.CheckBox">
      <summary>
            CheckBox type field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FieldType.PushButton">
      <summary>
            PushButton type field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FieldType.MultiLineText">
      <summary>
            Multiple line text type field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FieldType.InvalidNameOrType">
      <summary>
            Invalid field name or type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.Form">
      <summary>
            Represents a class to set the value for the fields of the AcroForms in the pdf document.
            A fully qualified field name should be specified to locate the field in the form.
            </summary>
      <example>
        <code>
            [C#]
            	//First a input pdf file should be assigned
            	Form form = new Form("testForm.pdf", "output.pdf");
            			
            	//We can fill a text field like this:
            	form.FillField("sngText","This is a new line!");
            	//We can choose a item from radio group like this:
            	form.FillField("radioGrp","rdItem2");
            	//We can select a  ckeck box like this:
            	form.FillField("chkBox1","chkItem1");
            	//We can unselect a  ckeck box like this:
            	form.FillField("chkBox2","chkItem2");
            	//We can choose a item from a list like this:
            	form.FillField("listField","list Item3");
            	//We can choose a item from a combo box like this:
            	form.FillField("comboField","combo Item4");
            
            	//Flatten all the fields.
            	//form.FlattenAllFields();
            
            	//Flatten the field "sngText".
            	form.FlattenField("sngText");
            	//Save the changes.
            	form.Save();
            	
            [Visual Basic]
            	'First a input pdf file should be assigned
            	Dim form As Form = new Form("testForm.pdf", "output.pdf")
            			
            	'We can fill a text field like this:
            	form.FillField("sngText","This is a new line!")
            	'We can choose a item from radio group like this:
            	form.FillField("radioGrp","rdItem2")
            	'We can select a  ckeck box like this:
            	form.FillField("chkBox1","chkItem1")
            	'We can unselect a  ckeck box like this:
            	form.FillField("chkBox2","chkItem2")
            	'We can choose a item from a list like this:
            	form.FillField("listField","list Item3")
            	'We can choose a item from a combo box like this:
            	form.FillField("comboField","combo Item4")
            
            	'Flatten all the fields.
            	'form.FlattenAllFields()
            
            	'Flatten the field "sngText".
            	form.FlattenField("sngText")
            	'Save the changes.
            	form.Save()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.#ctor(System.String)">
      <summary>
            Represents a constructor of the Form object with source file. This constructor only can be used to read some information about the fields.
            So if this  constructor is used, Only two read operation can be executed, for example GetField() and FieldsNames.
            </summary>
      <param name="srcFileName">The name of the input pdf file which has some fields.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.#ctor(System.IO.Stream)">
      <summary>
            Represents a constructor of the Form object with source Stream. This constructor only can be used to read some information about the fields.
            So if this  constructor is used, Only two read operation can be executed, for example GetField() and FieldsNames.
            </summary>
      <param name="srcStream">The name of the input pdf Stream which has some fields.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.#ctor(System.String,System.String)">
      <summary>
            Represents a constructor of the Form object with source file and destination file.
            </summary>
      <param name="srcFileName">The name of the input pdf file which has some fields.</param>
      <param name="destFileName">The name of the ouput pdf file whose fields have been set values.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.#ctor(System.String,System.IO.Stream)">
      <summary>
            Represents a constructor of the Form object with source file and destination stream.
            </summary>
      <param name="srcFileName">The name of the input pdf file which has some fields.</param>
      <param name="destStream">The ouput Stream whose fields have been set values.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.#ctor(System.IO.Stream,System.String)">
      <summary>
            Represents a constructor of the Form object with source strem and destination file.
            </summary>
      <param name="srcStream">The source stream with some fields to be filled.</param>
      <param name="destFileName">The name of the ouput pdf file whose fields have been set values.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Represents a constructor of the Form object with source stream and destination stream.
            </summary>
      <param name="srcStream">The source stream with some fields to be filled.</param>
      <param name="destStream">The destination stream to be saved.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.#ctor">
      <summary>
            Represents a constructor of the Form object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.FillField(System.String,System.String)">
      <summary>
            Fills the field with a valid value according to a fully qualified field name.
            Before filling the fields, every field's names and its corresponding valid values must be known.
            Both the fields' name and values are case sensitive.
            </summary>
      <param name="fieldName">The field's name to be filled.</param>
      <param name="fieldValue">The field's value which must be a valid value for some fields.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.FillField(System.String,System.Int32)">
      <summary>
            Fills the radio box field with a valid index value according to a fully qualified field name.
            Before filling the fields, only field's name must be known. While the value can be specified by its index.
            Notice: Only be applied to Radio Box.
            </summary>
      <param name="fieldName">The field's name to be filled.</param>
      <param name="index">The selected box's index in the whole radio box group.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.FillField(System.String,System.Boolean)">
      <summary>
            Fills the check box field with a boolean value.
            Notice: Only be applied to Check Box.
            </summary>
      <param name="fieldName">The field's name to be filled.</param>
      <param name="beChecked">A boolean flag: true means to check the box, while false to uncheck it..</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.GetField(System.String)">
      <summary>
            Gets the field's value according to its field name.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <returns>The field's value.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.GetFullFieldName(System.String)">
      <summary>
            Gets the field's full field name according to its short field name.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <returns>The field's full field name.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.GetFieldLimit(System.String)">
      <summary>
            Get the limitation of text field.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <returns>Return the limitation number of characters a text field can be filled. It not set, return 0.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.Save">
      <summary>
            Saves the value of the filled fields and close the opened Pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.GetFieldType(System.String)">
      <summary>
            Gets the field's type according to its fully qualified field name..
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <returns>The field's type if the fieldName is valid, otherwise the <see cref="F:Aspose.Pdf.Kit.FieldType.InvalidNameOrType" /> error will occur.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.GetFieldFlag(System.String)">
      <summary>
            Gets the field's flag according to its fully qualified field name..
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <returns>The field's flag, defined in <see cref="T:Aspose.Pdf.Kit.PropertyFlag" />.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.FlattenAllFields">
      <summary>
            Flattens all the fields.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.FlattenField(System.String)">
      <summary>
            Flattens a specified field with the fully qualified field name.
            Any other field will remain unchangable. If the fieldName is invalid, 
            all the fields will remain unchangable.
            </summary>
      <param name="fieldName">The name of the field to be flattened.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.FillImageField(System.String,System.String)">
      <summary>
            Pastes an image onto the existing button field as its appearance according to 
            its fully qualified field name.
            </summary>
      <param name="fieldName"> The fully qualified field name of the image button field.</param>
      <param name="imageFileName">The path of the image file, relative and absolute are both ok.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.FillImageField(System.String,System.IO.Stream)">
      <summary>
            Overloads function of <see cref="M:Aspose.Pdf.Kit.Form.FillImageField(System.String,System.String)" />FillImageField.
            The input is a image stream.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="imageStream">The iamge's stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.FillImageField(System.String,System.String,System.IO.Stream,System.Boolean)">
      <summary>
            Pastes an image onto the existing button field as its appearance.
            This is the common function of two types input image for FillImageField().
            It is needed to refactor for the stream input process.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="imageFileName">The name of the image file which will be pasted.</param>
      <param name="imageStream">The name of the image stream which will be pasted.</param>
      <param name="isStream">A flag showing what to be pasted is a stream or not, true for stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.FillBarcodeField(System.String,System.String)">
      <summary>
            Fill a barcode field according to its fully qualified field name.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="data">The new barcode value.</param>
      <returns>If filling succeed, return true; otherwise, false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.ImportFdf(System.IO.Stream)">
      <summary>
            Imports the content of the fields from the fdf file and put them into the new pdf.
            </summary>
      <param name="inputFdfStream">The input fdf stream.</param>
      <example>
        <code>
            	/*Import a fdf's content into a pdf file.*/
            	[C#]	
            	//Assign an input and output pdf file.
            	Form form = new Form("student.pdf", "studentOut.pdf");
            
            	//Open an existed fdf file.
            	System.IO.FileStream fdfInputStream = new FileStream("student.fdf", FileMode.Open);
            
            	//Import the fdf's content into the pdf file.
            	form.ImportFdf(fdfInputStream);
            
            	//Save the output file.
            	form.Save();
            
            	//Close the output fdf stream.
            	fdfInputStream.Close();
            
            	[Visual Basic]	
            	'Assign an input and output pdf file.
            	Form form = new Form("student.pdf", "studentOut.pdf")
            
            	'Open an existed fdf file.
            	System.IO.FileStream fdfInputStream = new FileStream("student.fdf", FileMode.Open)
            
            	'Import the fdf's content into the pdf file.
            	form.ImportFdf(fdfInputStream)
            
            	'Save the output file.
            	form.Save()
            
            	'Close the output fdf stream.
            	fdfInputStream.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.ExportFdf(System.IO.Stream)">
      <summary>
            Exports the content of the fields of the pdf into the fdf stream.
            </summary>
      <param name="outputFdfStream">The output fdf stream.</param>
      <example>
        <code>
            	/* Export the pdf fields' value into a fdf file.*/
            	[C#]	
            	//Assign an input pdf file.
            	Form form = new Form("student.pdf");
            
            	//Create a new fdf file to contain the content of the pdf.
            	System.IO.FileStream fdfOutputStream = new FileStream("student.fdf", FileMode.Create);
            
            	//Export all the pdf fields' value into the fdf file.
            	form.ExportFdf(fdfOutputStream);
            
            	//Close the output fdf stream.
            	fdfOutputStream.Close();
            
            	[Visual Basic]	
            
            	'Assign an input pdf file.
            	Form form = new Form("student.pdf")
            
            	'Create a new fdf file to contain the content of the pdf.
            	System.IO.FileStream fdfOutputStream = new FileStream("student.fdf", FileMode.Create)
            
            	'Export all the pdf fields' value into the fdf file.
            	form.ExportFdf(fdfOutputStream)
            
            	'Close the output fdf stream.
            	fdfOutputStream.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.ImportXml(System.IO.Stream)">
      <summary>
            Imports the content of the fields from the xml file and put them into the new pdf.
            </summary>
      <param name="inputXmlStream">The input xml stream.</param>
      <example>
        <code>
            	/*Import a xml's content into a pdf file.*/
            	[C#]	
            	//Assign an input and output pdf file.
            	Form form = new Form("student.pdf", "studentOut.pdf");
            
            	//Open an existed xml file.
            	System.IO.FileStream xmlInputStream = new FileStream("student.xml", FileMode.Open);
            
            	//Import the xml's content into the pdf file.
            	form.ImportXml(xmlOutputStream);
            
            	//Save the output file.
            	form.Save();
            
            	//Close the output Xml stream.
            	XmlInputStream.Close();
            
            	[Visual Basic]	
            	'Assign an input and output pdf file.
            	Form form = new Form("student.pdf", "studentOut.pdf")
            
            	'Open an existed Xml file.
            	System.IO.FileStream xmlInputStream = new FileStream("student.Xml", FileMode.Open)
            
            	'Import the Xml's content into the pdf file.
            	form.ImportXml(XmlOutputStream)
            
            	'Save the output file.
            	form.Save()
            
            	'Close the output xml stream.
            	xmlInputStream.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.ExportXml(System.IO.Stream)">
      <summary>
            Exports the content of the fields of the pdf into the xml stream.
            The button field's value will not be exported.
            </summary>
      <param name="outputXmlStream">The output xml stream.</param>
      <example>
        <code>
            	/* Export the pdf fields' value into a xml file.*/
            	[C#]	
            	//Assign an input pdf file.
            	Form form = new Form("student.pdf");
            
            	//Create a new xml file to contain the content of the pdf.
            	System.IO.FileStream xmlOutputStream = new FileStream("student.xml", FileMode.Create);
            
            	//Export all the pdf fields' value into the xml file.
            	form.ExportXml(xmlOutputStream);
            
            	//Close the output xml stream.
            	xmlOutputStream.Close();
            
            	[Visual Basic]	
            
            	'Assign an input pdf file.
            	Form form = new Form("student.pdf")
            
            	'Create a new xml file to contain the content of the pdf.
            	System.IO.FileStream xmlOutputStream = new FileStream("student.xml", FileMode.Create)
            
            	'Export all the pdf fields' value into the xml file.
            	form.ExportXml(xmlOutputStream)
            
            	'Close the output xml stream.
            	xmlOutputStream.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.ImportXfdf(System.IO.Stream)">
      <summary>
            Imports the content of the fields from the xfdf(xml) file and put them into the new pdf.
            </summary>
      <param name="inputXfdfStream">The input xfdf(xml) stream.</param>
      <example>
        <code>
            	/*Import a xfdf's content into a pdf file.*/
            	[C#]	
            	//Assign an input and output pdf file.
            	Form form = new Form("student-xfdf.pdf", "student-xfdfOut.pdf");
            			
            	//Open an existed xml file.
            	System.IO.FileStream xmlInputStream = new FileStream("student-xfdf.xml", FileMode.Open);
            			
            	//Import the xml's content into the pdf file.
            	form.ImportXfdf(xmlInputStream);
            			
            	//Save the output file.
            	form.Save();
            			
            	//Close the output Xml stream.
            	xmlInputStream.Close();
            
            	[Visual Basic]	
            	'Assign an input and output pdf file.
            	Form form = new Form("student-xfdf.pdf", "student-xfdfOut.pdf")
            
            	'Open an existed Xml file.
            	System.IO.FileStream xmlInputStream = new FileStream("student-xfdf.Xml", FileMode.Open)
            
            	'Import the Xml's content into the pdf file.
            	form.ImportXfdf(xmlInputStream)
            
            	'Save the output file.
            	form.Save()
            
            	'Close the output xml stream.
            	xmlInputStream.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.ExportXfdf(System.IO.Stream)">
      <summary>
            Exports the content of the fields of the pdf into the xml stream.
            The button field's value will not be exported.
            </summary>
      <param name="outputXfdfStream">The output xml stream.</param>
      <example>
        <code>
            	/* Export the pdf fields' value into a xml(xfdf) file.*/
            	[C#]	
            	//Assign an input pdf file.
            	Form form = new Form("student-xfdf.pdf");
            			
            	//Create a new xml file to contain the content of the pdf.
            	System.IO.FileStream xmlOutputStream = new FileStream("student-xfdf.xml", FileMode.Create);
            			
            	//Export all the pdf fields' value into the xml file.
            	form.ExportXfdf(xmlOutputStream);
            			
            	//Close the output xml stream.
            	xmlOutputStream.Close();
            
            	[Visual Basic]	
            
            	'Assign an input pdf file.
            	Form form = new Form("student-xfdf.pdf")
            			
            	'Create a new xml file to contain the content of the pdf.
            	System.IO.FileStream xmlOutputStream = new FileStream("student-xfdf.xml", FileMode.Create)
            			
            	'Export all the pdf fields' value into the xml file.
            	form.ExportXfdf(xmlOutputStream)
            			
            	'Close the output xml stream.
            	xmlOutputStream.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.SetFieldAttribute(System.String,Aspose.Pdf.Kit.FieldFlag)">
      <summary>
            Set the field's attributes, which include READ_ONLY,REQUIRED,NO_EXPORT.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="flag">One field attrbibute.</param>
      <returns>If success, return true;else false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.SetFieldAppearance(System.String,Aspose.Pdf.Kit.AppearanceFlag)">
      <summary>
            Set the field's appearance flags which include view, print and so on.
            Detailed flag definition is in <see cref="T:Aspose.Pdf.Kit.AppearanceFlag" />.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="flag">One field appearance flag.</param>
      <returns>If success, return true;else false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.SetSubmitUrl(System.String,System.String)">
      <summary>
            Set the submit button's new url.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="url">The new url.</param>
      <returns>If success, return true;else false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.MoveField(System.String,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Move a field to a new position.
            If the length or width is not the same as the old, it means zoom the field.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="llx">The abscissa of the field's low left vertex.</param>
      <param name="lly">The ordinate of the field's low left vertex.</param>
      <param name="urx">The abscissa of the field's up right vertex</param>
      <param name="ury">The ordinate of the field's up right vertex</param>
      <returns>If success, return true;else false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.SetLicenseCOM(System.String)">
      <summary>
            Obsolete. Licenses this component to use in a COM application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.Kit.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
      </remarks>
      <example>
        <code>
            [Visual Basic]
            
            Dim RS
            Set RS = CreateObject("ADODB.Recordset")
            RS.Open _
            	"SELECT TOP 50 * FROM Customers ORDER BY Country, CompanyName", _
            	"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=Northwind.mdb"
            
            Dim Pdf.Form 
            Set Pdf.Form = CreateObject("Aspose.Pdf.Kit.Form")
            
            Pdf.Form.SetLicenseCOM "C:\MyPath\MyLicense.lic"
            
            ...
            </code>
      </example>
      <param name="licenseFile">The license filename with its path.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.SetLicense(System.String)">
      <summary>
            Obsolete. Licenses this component to use in a Windows application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.Kit.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            string currentDir = System.IO.Directory.GetCurrentDirectory(); 
            string licenseFile = currentDir + " \\Aspose.Pdf.Kit.lic";
            Pdf.Form.SetLicense(licenseFile); 
            
            [Visual Basic]
            
            Dim currentDir As String = System.IO.Directory.GetCurrentDirectory() 
            Dim licenseFile As String = currentDir + "\Aspose.Pdf.Kit.lic"
            Pdf.Form.SetLicense(licenseFile)
            </code>
      </example>
      <param name="licenseFile">The license filename with its path.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.SetLicense(System.IO.TextReader)">
      <summary>
            Obsolete. Licenses this component to use in a Windows application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.Kit.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
        <p>Use this method when you use <a href="ms-help://MS.VSCC/MS.MSDNVS/cptools/html/cpgrfassemblygenerationutilityalexe.htm">Al.exe</a> to assemble the license file into your assembly.</p>
      </remarks>
      <example>
            Please make sure to create licenseReader using UnicodeEncoding.UTF7:
            <code>
            
            [C#]
            
            StreamReader licenseReader = new StreamReader(licenseFile, UnicodeEncoding.UTF7);
            Pdf.Form.SetLicense(licenseReader); 
            
            [Visual Basic]
            
            Dim licenseReader As StreamReader =  New StreamReader(licenseFile,UnicodeEncoding.UTF7)		
            Pdf.Form.SetLicense(licenseReader)
            </code></example>
      <param name="licenseReader">Where to read the license from.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.SetLicense(System.String,System.Web.UI.Page)">
      <summary>
            Obsolete. Licenses this component to use in a Web application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.Kit.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            string licenseFile = MapPath("License") + "\\Aspose.Pdf.Kit.lic"; 
            Pdf.Form.SetLicense(licenseFile, this); 
            
            [Visual Basic]
            
            Dim licenseFile As String = MapPath("License") + "\Aspose.Pdf.Kit.lic"
            Pdf.Form.SetLicense(licenseFile, Me)
            </code>
      </example>
      <param name="licenseFile">The license filename with its path.</param>
      <param name="page">The page that requests this object.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.SetLicense(System.IO.TextReader,System.Web.UI.Page)">
      <summary>
            Obsolete. Licenses this component to use in a Web application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.Kit.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
        <p>Use this method when you use <a href="ms-help://MS.VSCC/MS.MSDNVS/cptools/html/cpgrfassemblygenerationutilityalexe.htm">Al.exe</a> to assemble the license file into your assembly.</p>
      </remarks>
      <example>
            Please make sure to create licenseReader using UnicodeEncoding.UTF7:
            <code>
            
            [C#]
            
            StreamReader licenseReader = new StreamReader(licenseFile, UnicodeEncoding.UTF7);
            Pdf.Form.SetLicense(licenseReader, this); 
            
            [Visual Basic]
            
            Dim licenseReader As StreamReader =  New StreamReader(licenseFile, UnicodeEncoding.UTF7)		
            Pdf.Form.SetLicense(licenseReader, Me)
            </code></example>
      <param name="licenseReader">Where to read the license from.</param>
      <param name="page">The page that requests this object.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.FillField(System.String,System.String[])">
      <summary>
            Fill a field with multiple selections.Note: only for AcroForm List Box Field.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="fieldValues">A string array which contains several items to be selected.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.RenameField(System.String,System.String)">
      <summary> Renames a field. Either AcroForm field or XFA field is OK.
            </summary>
      <param name="oldName">the old field name
            </param>
      <param name="newName">the new field name
            </param>
      <returns>
        <CODE>true</CODE> if the renaming was successful, <CODE>false</CODE>
            otherwise
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.Form.GetFieldFacade(System.String)">
            add by lukeyoyo, 2008-08-28, version 3.2.0
             <summary>
             Get field's appearance attributes, including location, color, border style, font, list item and so on.
             </summary><param name="fieldName">The fully qualified field name.</param><returns>Return a FormFieldFacade object containing all appearance attributes.</returns></member>
    <member name="M:Aspose.Pdf.Kit.Form.GetRichText(System.String)">
      <summary>
            Get a Rich Text field's value, including the formattinf information of every character.
            </summary>
      <param name="fieldName">The fully qualified field name of the Rich Text field.</param>
      <returns>Return a string containing formatting information of the Rich Text field.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.Form.SrcFileName">
      <summary>
            Gets or sets the name of the input pdf file which has some fields.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Form.DestFileName">
      <summary>
            Gets or sets the destination file name whose fields have been set values.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Form.SrcStream">
      <summary>
            Gets or sets the input pdf stream which has some fields.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Form.DestStream">
      <summary>
            Gets or sets the destination stream whose fields have been set values.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Form.FieldsNames">
      <summary>
            Gets all the fields' names. If the pdf has none field, it returns null.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.FormDataConverter">
      <summary>
            Represents a class to convert data from one format to another format.
            It can convert the data in fdf/xml/pdf/xfdf to the OLEDB/OdbcDB.
            It also can convert the data in the OLEDB/OdbcDB to the data in fdf/xml/xfdf.
            It can convert the fdf to the xml with "hard-named" tag.
            In evaluation version, only 3 rows data will be imported or exported.
            </summary>
      <example>
        <code>
            [C#]
            //Import data into the database
            FormDataConverter converter = new FormDataConverter();
            
            //Define the DataTable.
            DataTable mDataTable = new DataTable();
            mDataTable.TableName = "TestConvertor";
            
            DataColumnCollection columns = mDataTable.Columns;
            columns.Add("Company",typeof(string));
            columns.Add("Address.1",typeof(string));
            columns["Address.1"].Caption = "Address1";
            columns.Add("Address.2",typeof(string));
            columns["Address.2"].Caption = "Address2";
            
            
            converter.Table = mDataTable;
            DataType sourceType = DataType.XML;
            		
            FileStream[] sourceStreams = new FileStream[2];
            
            sourceStreams[0] = new FileStream("Convertor.xml", FileMode.Open);
            sourceStreams[1] = new FileStream("Convertor2.xml", FileMode.Open);
            
            
            converter.ConvertToDataTable(sourceStreams, sourceType);
            
            string TestPath = @".\UnitTest\form\FormFiller\";
            string connectString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + 
            TestPath + "test.mdb";
            
            DataType dbType = DataType.OLEDB;
            converter.ImportIntoDataBase(connectString, dbType);
            
            
            //Export data from the database
            converter = new FormDataConverter();
            converter.Table = mDataTable;
            		
            
            DataType destType = DataType.XML;
            dbType = DataType.OLEDB;
            TestPath = @".\UnitTest\form\FormFiller\";
            connectString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + 
            TestPath + "test.mdb";
            //Export data from the databse into the FormDataConverter.Table
            converter.ExportFromDataBase(connectString, dbType);
            
            FileStream[] destStreams = new FileStream[converter.Table.Rows.Count];
            destStreams[0] = new FileStream("ConvertorNew.xml", FileMode.Create);
            destStreams[1] = new FileStream("ConvertorNew2.xml", FileMode.Create);
            
            converter.ConverToStreams(destStreams, destType);
            
            [Visual Basic]
            'Import data into the database
            Dim converter As FormDataConverter =  New FormDataConverter() 
            
            'Define the DataTable.
            Dim mDataTable As DataTable =  New DataTable() 
            mDataTable.TableName = "TestConvertor"
            
            Dim columns As DataColumnCollection =  mDataTable.Columns 
            columns.Add("Company",Type.GetType(String))
            columns.Add("Address.1",Type.GetType(String))
            columns("Address.1").Caption = "Address1"
            columns.Add("Address.2",Type.GetType(String))
            columns("Address.2").Caption = "Address2"
            
            
            converter.Table = mDataTable
            Dim sourceType As DataType =  DataType.XML 
            
            Dim sourceStreams() As FileStream =  New FileStream(2) {} 
            
            sourceStreams(0) = New FileStream("Convertor.xml", FileMode.Open)
            sourceStreams(1) = New FileStream("Convertor2.xml", FileMode.Open)
            
            
            converter.ConvertToDataTable(sourceStreams, sourceType)
            
            Dim TestPath As String =  ".\UnitTest\form\FormFiller\" 
            String connectString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + 
            TestPath + "test.mdb"
            
            Dim dbType As DataType =  DataType.OLEDB 
            converter.ImportIntoDataBase(connectString, dbType)
            
            
            'Export data from the database
            converter = New FormDataConverter()
            converter.Table = mDataTable
            
            
            Dim destType As DataType =  DataType.XML 
            dbType = DataType.OLEDB
            TestPath = ".\UnitTest\form\FormFiller\"
            connectString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + 
            TestPath + "test.mdb"
            'Export data from the databse into the FormDataConverter.Table
            converter.ExportFromDataBase(connectString, dbType)
            
            Dim destStreams() As FileStream =  New FileStream(converter.Table.Rows.Count) {} 
            destStreams(0) = New FileStream("ConvertorNew.xml", FileMode.Create)
            destStreams(1) = New FileStream("ConvertorNew2.xml", FileMode.Create)
            
            converter.ConverToStreams(destStreams, destType)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormDataConverter.ConvertFdfToXml(System.IO.Stream,System.IO.Stream)">
      <summary>
            Convert a fdf file into xml file with with "hard-named" tag.
            Only five fields can be converted in the evaluation version.
            </summary>
      <param name="sourceFdf">The source Fdf file stream.</param>
      <param name="destXml">The destination Xml file stream.</param>
      <example>
        <code>
            [C#]
            System.IO.FileStream fdfInputStream = new FileStream(TestPath + "student.fdf", FileMode.Open);
            System.IO.FileStream xmlOutputStream = new FileStream(TestPath + "stuXml.xml", FileMode.Create);
            FormDataConverter.ConvertFdfToXml(fdfInputStream, xmlOutputStream);
            
            [Visual Basic]
            Dim fdfInputStream As System.IO.FileStream = new FileStream(TestPath + "student.fdf", FileMode.Open)
            Dim xmlOutputStream  As System.IO.FileStream = new FileStream(TestPath + "stuXml.xml", FileMode.Create)
            FormDataConverter.ConvertFdfToXml(fdfInputStream, xmlOutputStream)
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormDataConverter.#ctor">
      <summary>
            Constructor of the FormDataConverter class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormDataConverter.ConvertToDataTable(System.IO.Stream[],Aspose.Pdf.Kit.DataType)">
      <summary>
            Convert data of some type in the streams into the <see cref="P:Aspose.Pdf.Kit.FormDataConverter.Table" />.
            </summary>
      <param name="sourceStreams">The source streams of some <see cref="T:Aspose.Pdf.Kit.DataType" />.</param>
      <param name="sourceType">The source streams' datatype. 
            The valid value is <see cref="F:Aspose.Pdf.Kit.DataType.PDF" />,<see cref="F:Aspose.Pdf.Kit.DataType.FDF" />,<see cref="F:Aspose.Pdf.Kit.DataType.XML" />,<see cref="F:Aspose.Pdf.Kit.DataType.XFDF" />.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormDataConverter.ImportIntoDataBase(System.String,Aspose.Pdf.Kit.DataType)">
      <summary>
            Import the data from the <see cref="P:Aspose.Pdf.Kit.FormDataConverter.Table" /> into the database.
            </summary>
      <param name="connectString">The connect string to the database.</param>
      <param name="dbType">The database's type. The valid value is <see cref="F:Aspose.Pdf.Kit.DataType.ODBC" />
            and <see cref="F:Aspose.Pdf.Kit.DataType.OLEDB" />.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormDataConverter.ExportFromDataBase(System.String,Aspose.Pdf.Kit.DataType)">
      <summary>
            Export data from the database into the <see cref="P:Aspose.Pdf.Kit.FormDataConverter.Table" />.
            </summary>
      <param name="connectString">The connect string to the database.</param>
      <param name="dbType">The database's type. The valid value is <see cref="F:Aspose.Pdf.Kit.DataType.ODBC" />
            and <see cref="F:Aspose.Pdf.Kit.DataType.OLEDB" />.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormDataConverter.ConverToStreams(System.IO.Stream[],Aspose.Pdf.Kit.DataType)">
      <summary>
            Convert the data in the <see cref="P:Aspose.Pdf.Kit.FormDataConverter.Table" /> into the streams of some type.
            </summary>
      <param name="destStreams">The destination streams to be generated.</param>
      <param name="destType">The destination streams' type. The valid value is <see cref="F:Aspose.Pdf.Kit.DataType.PDF" />,<see cref="F:Aspose.Pdf.Kit.DataType.FDF" />,<see cref="F:Aspose.Pdf.Kit.DataType.XML" />,<see cref="F:Aspose.Pdf.Kit.DataType.XFDF" />.</param>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormDataConverter.Table">
      <summary>
            Gets or sets the middle data container, one DataTable.
            It must be defined before converting data from one format to another format.
            The Columns and TableName of the DataTable should be defined.
            The TableName is the name of the Table in the database.
            Every column's ColumnName is the qualified field name of the pdf. Every column's Caption
            is the column name of table in the database. If the field name is the same as the table column
            name, the Caption need not specified.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.FormEditor">
      <summary>
            Represents a class to edit fields, such as create fields, remove fields, move fields, change fields' attributes.
            Filling data into fields is implemented by another class <see cref="T:Aspose.Pdf.Kit.Form" />.
            </summary>
      <example>
        <code>
            [C#]
            //Open the document and create a Form object
            FormEditor formEditor = new FormEditor(@".\UnitTest\form\student.pdf", @".\UnitTest\form\added.pdf");
            //add a button field
            formEditor.AddField(FieldType.PushButton, "button1", 1, 50, 550, 150, 650);
            //add a text field
            formEditor.AddField(FieldType.Text, "text1", 1, 200, 550, 300, 575);
            //set items for a ComboBox
            formEditor.Items = new System.String[]{"item0", "item1", "item2", "item3"};
            //add a combo box field
            formEditor.AddField(FieldType.ComboBox, "combobox1", 1, 350, 650, 450, 675);
            //add a check box field
            formEditor.AddField(FieldType.CheckBox, "checkbox1", 1, 200, 650, 225, 675);
            //set items for a list box
            formEditor.Items = new System.String[]{"item0", "item1", "item2"};
            //add a list field
            formEditor.AddField(FieldType.ListBox, "list1", 1, 50, 710, 150, 725);
            //set items for a radio group
            formEditor.Items = new System.String[]{"item0", "item1", "item2"};
            //add a radio button field
            formEditor.AddField(FieldType.Radio, "radio1", 1, 200, 710, 225, 735);
            
            //Close the document
            formEditor.Save();
            
            
            [Visual Basic]
            'Open the document and create a Form object
            Dim formEditor As FormEditor =  New FormEditor(".\UnitTest\form\student.pdf",".\UnitTest\form\added.pdf") 
            'add a button field
            formEditor.AddField(FieldType.PushButton, "button1", 1, 50, 550, 150, 650)
            'add a text field
            formEditor.AddField(FieldType.Text, "text1", 1, 200, 550, 300, 575)
            'set items for a ComboBox
            formEditor.Items = New System.String()
            {
            	"item0", "item1", "item2", "item3"
            }
            
            'add a combo box field
            formEditor.AddField(FieldType.ComboBox, "combobox1", 1, 350, 650, 450, 675)
            'add a check box field
            formEditor.AddField(FieldType.CheckBox, "checkbox1", 1, 200, 650, 225, 675)
            'set items for a list box
            formEditor.Items = New System.String()
            {
            	"item0", "item1", "item2"
            }
            
            'add a list field
            formEditor.AddField(FieldType.ListBox, "list1", 1, 50, 710, 150, 725)
            'set items for a radio group
            	formEditor.Items = New System.String()
            {
            	"item0", "item1", "item2"
            }
            
            'add a radio button field
            formEditor.AddField(FieldType.Radio, "radio1", 1, 200, 710, 225, 735)
            
            formEditor.RemoveField("watermark0")
            'Close the document
            formEditor.Save()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Represents a constructor of the FormEditor object with source stream and destination stream.
            </summary>
      <param name="srcStream">The source stream with some fields to be created ,revised or deleted.</param>
      <param name="destStream">The destination stream to be saved.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.#ctor(System.String,System.String)">
      <summary>
            Represents a constructor of the Form object with source file and destination file.
            </summary>
      <param name="srcFileName">The name of the input pdf file which has some fields.</param>
      <param name="destFileName">The name of the ouput pdf file whose fields have been set values.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.#ctor">
      <summary>
            Represents a constructor of the FormEditor object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.Save">
      <summary>
            Saves the modifications of the fields in the destination Pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.SetFieldAttribute(System.String,Aspose.Pdf.Kit.PropertyFlag)">
      <summary>
            Set the field's attributes, including ReadOnly, Required and NoExport.
            Detailed flag definition is in <see cref="T:Aspose.Pdf.Kit.PropertyFlag" />..
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="flag">One field attrbibute.</param>
      <returns>If success, return true;else false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.SetFieldAppearance(System.String,Aspose.Pdf.Kit.AnnotationFlag)">
      <summary>
            Set the field's appearance flags which include view, print and so on.
            Detailed flag definition is in <see cref="T:Aspose.Pdf.Kit.AnnotationFlag" />.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="flag">One field appearance flag.</param>
      <returns>If success, return true;else false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.SetSubmitUrl(System.String,System.String)">
      <summary>
            Set the submit button's new url.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="url">The new url.</param>
      <returns>If success, return true;else false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.SetFieldLimit(System.String,System.Int32)">
      <summary>
            Set the limitation of text field.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="limit">The maximum number of characters a text field can be filled.</param>
      <returns>If success, return true;else false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.MoveField(System.String,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Move a field to a new position.
            If the length or width is not the same as the old, it means zoom the field.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="llx">The abscissa of the field's low left vertex.</param>
      <param name="lly">The ordinate of the field's low left vertex.</param>
      <param name="urx">The abscissa of the field's up right vertex</param>
      <param name="ury">The ordinate of the field's up right vertex</param>
      <returns>If success, return true;else false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.AddField(Aspose.Pdf.Kit.FieldType,System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary> Inserts a new field into some page of an existing PDF document at the specified position.</summary>
      <param name="fieldType">The type of field adding, must be FormEditor.FLDTYP_*.
            </param>
      <param name="fieldName">The fully qualified field name.
            </param>
      <param name="pageNum">The page number that field will be inserted into.
            </param>
      <param name="llx">The abscissa of the field's low left vertex.
            </param>
      <param name="lly">The ordinate of the field's low left vertex.
            </param>
      <param name="urx">The abscissa of the field's up right vertex.
            </param>
      <param name="ury">The ordinate of the field's up right vertex.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.AddField(Aspose.Pdf.Kit.FieldType,System.String,System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary> Inserts a new field into some page of an existing PDF document at the specified position with an initial value.</summary>
      <param name="fieldType">The type of field adding, must be FormEditor.FLDTYP_*.
            </param>
      <param name="fieldName">The fully qualified field name.
            </param>
      <param name="iniValue">The initial value of the new field.
            </param>
      <param name="pageNum">The page number that field will be inserted into. 
            </param>
      <param name="llx">The abscissa of the field's low left vertex.
            </param>
      <param name="lly">The ordinate of the field's low left vertex.
            </param>
      <param name="urx">The abscissa of the field's up right vertex.
            </param>
      <param name="ury">The ordinate of the field's up right vertex.
            </param>
      <example>
        <code>
            [C#]
            	//open the document and create a FormEditor object
            	FormEditor formEditor = new FormEditor("fieldAdd.pdf", "added.pdf");
            	//create a FormFieldFacade to specify visual attributes
            	FormFieldFacade facade = new FormFieldFacade();
            	formEditor.Facade = facade;
            	
            	//add a button field with grey background and beveled border
            	facade.BackgroudColor = System.Drawing.Color.FromArgb(0xCC, 0xCC, 0xCC);
            	facade.BorderStyle = FormFieldFacade.BDSTYLE_BEVELED;
            	formEditor.AddField(FieldType.PushButton, "button1", "OK", 1, 265, 695, 365, 720);
            	//clear the settings
            	formEditor.ResetFacade();
            	
            	//close and save the output document
            	formEditor.Save();
            	
            [VB.NET]
            	'open the document and create a FormEditor object
            	Dim formEditor As FormEditor =  New FormEditor("CopyColorFields.pdf","colorCopied.pdf") 
            	'create a FormFieldFacade to specify visual attributes
            	Dim facade As FormFieldFacade =  New FormFieldFacade()
            	formEditor.Facade = facade
            	
            	'add a button field with grey background and beveled border
            	facade.BackgroudColor = System.Drawing.Color.FromArgb(0xCC, 0xCC, 0xCC)
            	facade.BorderStyle = FormFieldFacade.BDSTYLE_BEVELED
            	formEditor.AddField(FieldType.PushButton, "button1", "OK", 1, 265, 695, 365, 720)
            	'clear the settings
            	formEditor.ResetFacade()
            
            	'close and save the output document
            	formEditor.Save()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.RemoveField(System.String)">
      <summary> Removes a field specified by fieldName.</summary>
      <param name="fieldName">The fully qualified field name.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.ResetFacade">
      <summary>
            Reset all visual attribtues to empty value.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.ResetInnerFacade">
      <summary>
            Reset all visual attribtues of inner facade to empty value.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.LocalCopyField(System.String,System.String,System.Int32,System.Single,System.Single)">
      <summary>
            Copies an existing field to a new position pecified by page number and ordinates.
            A new document will be produced, which contains everything the source document has except for the newly copied field.
            This method has been obsoleted, please use FormEditor.CopyInnerField instead.
            </summary>
      <param name="fieldName">
      </param> The old fully qualified field name.
            <param name="newFieldName"></param> The new fully qualified field name.If null, it will be set as fieldName + "~".
            <param name="pageNum"></param> The number of page to hold the new field.If zero, new field will be copid to the same page as old one hosted.
            <param name="abscissa"></param> The abscissa of the new field. 
            <param name="ordinate"></param> The ordinate of the new field. 
            <example><code>
            [C#]
            	//open the document and create a FormEditor object
            	FormEditor formEditor = new FormEditor("CopyColorFields.pdf", "colorCopied.pdf");	
            	//copy a text field to another position
            	formEditor.LocalCopyField("Text","Text 1",1,150,600);
            	//close and save the output document
            	formEditor.Save();
            	
            [VB.NET]
            	'open the document and create a FormEditor object
            	Dim formEditor As FormEditor =  New FormEditor("CopyColorFields.pdf","colorCopied.pdf") 
            	'copy a text field fodselsnummer
            	formEditor.LocalCopyField("Text","Text 1",1,150,600)
            	'close and save the output document
            	formEditor.Save()
            </code></example></member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.CopyInnerField(System.String,System.String,System.Int32)">
      <summary>
            Copies an existing field to the same position in specified page number.
            A new document will be produced, which contains everything the source document has except for the newly copied field.
            </summary>
      <param name="fieldName">
      </param> The old fully qualified field name.
            <param name="newFieldName"></param> The new fully qualified field name. If null, it will be set as fieldName + "~".
            <param name="pageNum"></param> The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.
            <example><code>
            [C#]
            	//open the document and create a FormEditor object
            	FormEditor formEditor = new FormEditor("CopyColorFields.pdf", "colorCopied.pdf");	
            	//copy a text field to another position
            	formEditor.CopyInnerField("Text","Text 1",2);
            	//close and save the output document
            	formEditor.Save();
            	
            [VB.NET]
            	'open the document and create a FormEditor object
            	Dim formEditor As FormEditor =  New FormEditor("CopyColorFields.pdf","colorCopied.pdf") 
            	'copy a text field fodselsnummer
            	formEditor.CopyInnerField("Text","Text 1",2)
            	'close and save the output document
            	formEditor.Save()
            </code></example></member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.CopyInnerField(System.String,System.String,System.Int32,System.Single,System.Single)">
      <summary>
            Copies an existing field to a new position specified by both page number and ordinates.
            A new document will be produced, which contains everything the source document has except for the newly copied field.
            </summary>
      <param name="fieldName">
      </param> The old fully qualified field name.
            <param name="newFieldName"></param> The new fully qualified field name. If null, it will be set as fieldName + "~".
            <param name="pageNum"></param> The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.
            <param name="abscissa"></param> The abscissa of the new field. If -1, the abscissa will be equaled to the original one.
            <param name="ordinate"></param> The ordinate of the new field. If -1, the ordinate will be equaled to the original one.
            <example><code>
            [C#]
            	//open the document and create a FormEditor object
            	FormEditor formEditor = new FormEditor("CopyColorFields.pdf", "colorCopied.pdf");	
            	//copy a text field to another position
            	formEditor.CopyInnerField("Text","Text 1",1,150,600);
            	//close and save the output document
            	formEditor.Save();
            	
            [VB.NET]
            	'open the document and create a FormEditor object
            	Dim formEditor As FormEditor =  New FormEditor("CopyColorFields.pdf","colorCopied.pdf") 
            	'copy a text field fodselsnummer
            	formEditor.CopyInnerField("Text","Text 1",1,150,600)
            	'close and save the output document
            	formEditor.Save()
            </code></example></member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.CopyOuterField(System.String,System.String)">
      <summary>
            Copies an existing field from one PDF document to another document with original page number and ordinates.
            Notice: Only for AcroForm fields (excluding radio box).
            </summary>
      <param name="srcFileName">
      </param> The name of PDF document which containes the field to be copied.
            <param name="fieldName"></param> The original fully qualified field name.
            <example><code>
            [C#]
            	//open the document and create a FormEditor object
            	FormEditor formEditor = new FormEditor("input.pdf", "output.pdf");	
            	//copy a text field from one document to another one
            	formEditor.CopyOuterField(path + "source.pdf","TextField1");
            	//close and save the output document
            	formEditor.Save();
            	
            [VB.NET]
            	'open the document and create a FormEditor object
            	Dim formEditor As FormEditor =  new FormEditor("input.pdf", "output.pdf");	
            	'copy a text field from one document to another one
            	formEditor.CopyOuterField(path + "source.pdf","TextField1");
            	'close and save the output document
            	formEditor.Save()
            </code></example></member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.CopyOuterField(System.String,System.String,System.Int32)">
      <summary>
            Copies an existing field from one PDF document to another document with specified page number and original ordinates.
            Notice: Only for AcroForm fields (excluding radio box).
            </summary>
      <param name="srcFileName">
      </param> The name of PDF document which containes the field to be copied.
            <param name="fieldName"></param> The original fully qualified field name.
            <param name="pageNum"></param> The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.
            <example><code>
            [C#]
            	//open the document and create a FormEditor object
            	FormEditor formEditor = new FormEditor("input.pdf", "output.pdf");	
            	//copy a text field from one document to another one
            	formEditor.CopyOuterField(path + "source.pdf","TextField1",2);
            	//close and save the output document
            	formEditor.Save();
            	
            [VB.NET]
            	'open the document and create a FormEditor object
            	Dim formEditor As FormEditor =  new FormEditor("input.pdf", "output.pdf");	
            	'copy a text field from one document to another one
            	formEditor.CopyOuterField(path + "source.pdf","TextField1",2);
            	'close and save the output document
            	formEditor.Save()
            </code></example></member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.CopyOuterField(System.String,System.String,System.Int32,System.Single,System.Single)">
      <summary>
            Copies an existing field from one PDF document to another document with specified page number and ordinates.
            Notice: Only for AcroForm fields (excluding radio box).
            </summary>
      <param name="srcFileName">
      </param> The name of PDF document which containes the field to be copied.
            <param name="fieldName"></param> The original fully qualified field name.
            <param name="pageNum"></param> The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.
            <param name="abscissa"></param> The abscissa of the new field. If -1, the abscissa will be equaled to the original one.
            <param name="ordinate"></param> The ordinate of the new field. If -1, the ordinate will be equaled to the original one.
            <example><code>
            [C#]
            	//open the document and create a FormEditor object
            	FormEditor formEditor = new FormEditor("input.pdf", "output.pdf");	
            	//copy a text field from one document to another one
            	formEditor.CopyOuterField(path + "source.pdf","TextField1",1,150,600);
            	//close and save the output document
            	formEditor.Save();
            	
            [VB.NET]
            	'open the document and create a FormEditor object
            	Dim formEditor As FormEditor =  new FormEditor("input.pdf", "output.pdf");	
            	'copy a text field from one document to another one
            	formEditor.CopyOuterField(path + "source.pdf","TextField1",1,150,600);
            	'close and save the output document
            	formEditor.Save()
            </code></example></member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.DecorateField(System.String)">
      <summary>
            Changes visual attributes of the specified field.
            </summary>
      <param name="fieldName"> The fully qualified field name.</param>
      <example>
        <code>
            [C#]
            //new a form editor
            FormEditor form = new FormEditor("OnlineFilled.pdf","form\filled.pdf");
            //new a facade object
            FormFieldFacade facade = new FormFieldFacade();
            //assign the facade to form editor
            form.Facade = facade;
            //set the backgroud color as Black like this:
            facade.BackgroudColor=System.Drawing.Color.FromArgb(0, 0, 0);
            //set the alignment as center like this:
            facade.Alignment = FormFieldFacade.ALIGN_CENTER;
            //only one field will be modified
            form.DecorateField("fullName");
            //clear the visual properties of facade like this:
            form.ResetFacade();
            //set the backgroud color as grey like this:
            facade.BackgroudColor=System.Drawing.Color.FromArgb(0xcc, 0xcc, 0xcc);
            //set the alignment as left like this:
            facade.Alignment = FormFieldFacade.ALIGN_LEFT;
            //modify another field visual attributes like this:
            form.DecorateField("fullName"); 
            //clear the visual properties of facade like this:
            form.ResetFacade();
            //close the document to validate the modification
            form.Save(); 
            	
            
            [Visual Basic]
            'new a form editor
            Dim form As FormEditor =  New FormEditor("OnlineFilled.pdf","form\filled.pdf") 
            'new a facade object
            Dim facade As FormFieldFacade =  New FormFieldFacade() 
            'assign the facade to form editor
            form.Facade = facade
            'set the backgroud color as Black like this:
            facade.BackgroudColor=System.Drawing.Color.FromArgb(0, 0, 0)
            'set the alignment as center like this:
            facade.Alignment = FormFieldFacade.ALIGN_CENTER
            'only one field will be modified
            form.DecorateField("fullName")
            'clear the visual properties of facade like this:
            form.ResetFacade()
            'set the backgroud color as grey like this:
            facade.BackgroudColor=System.Drawing.Color.FromArgb(0xcc, 0xcc, 0xcc)
            'set the alignment as left like this:
            facade.Alignment = FormFieldFacade.ALIGN_LEFT
            'modify another field visual attributes like this:
            form.DecorateField("fullName") 
            'clear the visual properties of facade like this:
            form.ResetFacade()
            'close the document to validate the modification
            form.Save()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.DecorateField(Aspose.Pdf.Kit.FieldType)">
      <summary>
            Changes visual attributes of all fields with the specified field type.
            </summary>
      <param name="fieldType"> The field type to be decorated, defined in FieldType.cs.</param>
      <example>
        <code>
            [C#]
            
            //new a form editor
            FormEditor form = new FormEditor("OnlineFilled.pdf","form\filled.pdf");
            //new a facade object
            FormFieldFacade facade = new FormFieldFacade();
            //assign the facade to form editor
            form.Facade = facade;
            //set the backgroud color as red like this:
            facade.BackgroudColor=System.Drawing.Color.FromArgb(0xff, 0, 0);
            //set the alignment as center like this:
            facade.Alignment = FormFieldFacade.ALIGN_CENTER;
            //all text fields will be modified:
            form.DecorateField(FieldType.Text);
            //clear the above settings like this:
            form.ResetFacade();
            //close and validate the modification like this:
            form.Save();
            
            
            [Visual Basic]
            
            'new a form editor
            Dim form As FormEditor =  New FormEditor("OnlineFilled.pdf","form\filled.pdf") 
            'new a facade object
            Dim facade As FormFieldFacade =  New FormFieldFacade() 
            'assign the facade to form editor
            form.Facade = facade
            'set the backgroud color as red like this:
            facade.BackgroudColor=System.Drawing.Color.FromArgb(0xff, 0, 0)
            'set the alignment as center like this:
            facade.Alignment = FormFieldFacade.ALIGN_CENTER
            'all text fields will be modified:
            form.DecorateField(FieldType.Text)
            'clear the above settings like this:
            form.ResetFacade()
            'close and validate the modification like this:
            form.Save()
            	
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.DecorateField">
      <summary>
            Changes visual attributes of all fields in the PDF document.
            </summary>
      <example>
        <code>
            [C#]
            
            //new a form editor
            FormEditor form = new FormEditor("OnlineFilled.pdf","form\filled.pdf");
            //new a facade object
            FormFieldFacade facade = new FormFieldFacade();
            //assign the facade to form editor
            form.Facade = facade;
            //set the backgroud color as red like this:
            facade.BackgroudColor=System.Drawing.Color.FromArgb(0xff, 0, 0);
            //set the alignment as center like this:
            facade.Alignment = FormFieldFacade.ALIGN_CENTER;
            //all the fields will be modified:
            form.DecorateField();
            //clear the above setting like this:
            form.ResetFacade();
            //close and validate the modification like this:
            form.Save();
            
            
            [Visual Basic]
            
            'new a form editor
            Dim form As FormEditor =  New FormEditor("OnlineFilled.pdf","form\filled.pdf") 
            'new a facade object
            Dim facade As FormFieldFacade =  New FormFieldFacade() 
            'assign the facade to form editor
            form.Facade = facade
            'set the backgroud color as red like this:
            facade.BackgroudColor=System.Drawing.Color.FromArgb(0xff, 0, 0)
            'set the alignment as center like this:
            facade.Alignment = FormFieldFacade.ALIGN_CENTER
            'all the fields will be modified:
            form.DecorateField(
            'clear the above setting like this:
            form.ResetFacade()
            'close and validate the modification like this:
            form.Save()
            	
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.RenameField(System.String,System.String)">
      <summary> Renames a field. Either AcroForm field or XFA field is OK.
            </summary>
      <param name="oldName">the old field name
            </param>
      <param name="newName">the new field name
            </param>
      <returns>
        <CODE>true</CODE> if the renaming was successful, <CODE>false</CODE>
            otherwise
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.RemoveFieldAction(System.String)">
      <summary> Removing form action as well as javascripts from form fields.
            </summary>
      <param name="fieldName">The fully qualified field name.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.AddSubmitBtn(System.String,System.Int32,System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
      <summary> Add a submit button, user can specific a HTTP url or MAIL address to it.
            </summary>
      <param name="fieldName">The fully qualified field name to be added.
            </param>
      <param name="pageNum">The page number that field will be inserted into.
            </param>
      <param name="label">The label to be displayed on the submit button.
            </param>
      <param name="url">The url address to submit the information when submit action is invoked.
            </param>
      <param name="llx">The abscissa of the field's low left vertex.
            </param>
      <param name="lly">The ordinate of the field's low left vertex.
            </param>
      <param name="urx">The abscissa of the field's up right vertex.
            </param>
      <param name="ury">The ordinate of the field's up right vertex.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.AddListItem(System.String,System.String)">
      <summary>
            Add a new item to the existing list box field.
            </summary>
      <param name="fieldName">The field's name to be filled.</param>
      <param name="itemName">The new item name to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.AddListItem(System.String,System.String[])">
      <summary>
            Add a new item with Export value to the existing list box field, only for AcroForm combo box field.
            </summary>
      <param name="fieldName">The field's name to be added.</param>
      <param name="exportName">A string array denoting a new list item with Export Value, i.e. (Item Label, Export Value).</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.DelListItem(System.String,System.String)">
            Del a item from the existing list box field.
            @param itemName The item name to be deleted.
            <summary>
            Delete a item from the existing list box field.
            </summary><param name="fieldName">The list box field's name</param><param name="itemName">The item to be removed from the list box field.</param></member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.SetFieldScript(System.String,System.String)">
            add by lukeyoyo, 2008-06-20, version 2.1.0
             <summary>
             Set JavaScript for a PushButton field. If old JavaScript existed, it will be replaced by the new one.
             </summary><param name="fieldName">The fully qualified field name.</param><param name="script">The Java script to be added/placed into a push button field.</param><returns>Return true when setting script succeeds, otherwise return false.</returns></member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.Single2Multiple(System.String)">
      <summary>
            Change a single-lined text field to a multiple-lined one.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <returns>If success, return true;else false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.SetFieldAlignment(System.String,System.Int32)">
      <summary>
            Set the alignment style of a text field.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="alignment">The alignment style definition, including FormFieldFacade.ALIGN_LEFT,
            FormFieldFacade.ALIGN_CENTER and FormFieldFacade.ALIGN_RIGHT.</param>
      <returns>If success, return true;else false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormEditor.SetFieldAlignmentV(System.String,System.Int32)">
      <summary>
            Set the vertical alignment style of a text field.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="alignment">The alignment style definition, including FormFieldFacade.ALIGN_LEFT,
            FormFieldFacade.ALIGN_CENTER and FormFieldFacade.ALIGN_RIGHT.</param>
      <returns>If success, return true;else false.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormEditor.SrcFileName">
      <summary>
            Gets or sets the name of the input pdf file which has some fields.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormEditor.DestFileName">
      <summary>
            Gets or sets the destination file name whose fields have been set values.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormEditor.SrcStream">
      <summary>
            Gets or sets the input pdf stream which has some fields.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormEditor.DestStream">
      <summary>
            Gets or sets the destination stream whose fields have been set values.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormEditor.Items">
      <summary> Set options for combo box/list/radio box fields creation.</summary>
      <param name="options">An array of string, each representing an
            option of a combo box/list/radio box field.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormEditor.ExportItems">
      <summary> Set options for combo box with export values.</summary>
      <param name="options">An array of string array, each representing an
            pair of display value and export value.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormEditor.Facade">
      <summary>
            Record field visual attributes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormEditor.RadioGap">
      <summary>
            The member to record the gap between two neighboring radio buttons in pixels,default is 50.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormEditor.RadioHoriz">
      <summary>
            The flag to indicate whether the radios are arranged horizontally or vertically, default value is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormEditor.SubmitFlag">
      <summary>
            The member to record the type of data to be submitted by a Submit Button field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.FormFieldFacade">
      <summary>
            Represents a class to record visual attributes of a field.
            Including the following information:
            - border style, width
            - border color, background color
            - font, font size
            - caption, text color
            - text alignment, text rotation 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BDWIDTH_THIN">
            /// <summary>
            Defines a thin border width, which is also the default value.
            </summary></member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BDWIDTH_MEDIUM">
      <summary>
            Defines a medium border width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BDWIDTH_THICK">
      <summary>
            Defines a thick border width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BDWIDTH_UNDIFINED">
      <summary>
            Undefined border width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BDSTYLE_SOLID">
      <summary>
            Defines a solid border style, which is also the default.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BDSTYLE_DASHED">
      <summary>
            Defines a dashed border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BDSTYLE_BEVELED">
      <summary>
            Defines a beveled border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BDSTYLE_INSET">
      <summary>
            Defines an inserted border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BDSTYLE_UNDERLINE">
      <summary>
            Defines an underlined border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BDSTYLE_UNDIFINED">
      <summary>
            Undefined border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.ALIGN_LEFT">
      <summary>
            Defines aglignment as left style, which is also the default.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.ALIGN_CENTER">
      <summary>
            Defines aglignment as center style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.ALIGN_RIGHT">
      <summary>
            Defines aglignment as right style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.ALIGN_UNDIFINED">
      <summary>
            Undefined aglignment style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.AlignTop">
      <summary>
            Defines vertical aglignment as top style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.AlignMiddle">
      <summary>
            Defines vertical aglignment as middle style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.AlignBottom">
      <summary>
            Defines vertical aglignment as bottom style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BTNSTYLE_CHECK">
      <summary>
            Defines the shape of a check box field when it checked.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BTNSTYLE_CIRCLE">
      <summary>
            Defines a circle check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BTNSTYLE_CROSS">
      <summary>
            Defines a cross check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BTNSTYLE_DIAMOND">
      <summary>
            Defines a diamond check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BTNSTYLE_STAR">
      <summary>
            Defines a star check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BTNSTYLE_SQUARE">
      <summary>
            Defines a square check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FormFieldFacade.BTNSTYLE_UNDEFINED">
      <summary>
            Defines an undefined check box style.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormFieldFacade.#ctor">
      <summary>
            Represents a constructor of the FormFieldFacade object. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormFieldFacade.Reset">
      <summary>
            Reset all visual attribtues to empty value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.BorderColor">
      <summary>
            The color of a field border. Default is black.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.BorderStyle">
      <summary>
            The style of a field border, default is solid.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.BorderWidth">
      <summary>
            The width of a field border, default is thin.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.BackgroudColor">
      <summary>
            The color of a field background, default is white.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.Font">
      <summary>
            The font type of a field text, default is Helvetica.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.FontSize">
      <summary>
            The size of a field text, default is zero.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.TextColor">
      <summary>
            The color of the field text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.TextEncoding">
      <summary>
            The text encoding type of the field text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.Alignment">
      <summary>
            The alignment of a field text, default is left style.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.Rotation">
      <summary>
            The rotation of a field text, default is -1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.Caption">
      <summary>
            The normal caption of form field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.ButtonStyle">
      <summary>
            The style of check box or radio box field, defined by FormFieldFacade.CheckBoxStyle*.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.Items">
      <summary> Set options for combo box/list/radio box fields creation.</summary>
      <param name="options">An array of string, each representing an
            option of a combo box/list/radio box field.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.ExportItems">
      <summary> Set options for combo box/list/radio box fields creation.</summary>
      <param name="options">An array of string, each representing an
            option of a combo box/list/radio box field.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.Box">
      <summary>
            A rectangle object holding field's location.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.Position">
      <summary>
            A rectangle object holding field's location.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormFieldFacade.PageNumber">
      <summary>
            An integer value holding the number of page on which field locates.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.MenuActionName">
      <summary>
            Enums the actions corresponding to a menu item in a general viewer like Adobe Reader.Refer to <see cref="M:Aspose.Pdf.Kit.PdfContentEditor.CreateApplicationLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color,System.Enum[])" />.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.AlignmentType">
      <summary>
            Represents the alignment types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AlignmentType.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AlignmentType.Left">
      <summary>
            Left alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AlignmentType.Right">
      <summary>
            Right alignment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.Annotation">
      <summary>
            Represents the annotation class. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.Annotation.#ctor(System.Collections.Hashtable)">
      <summary>
            Constructs a annotation class.
            </summary>
      <param name="annotation">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Annotation.#ctor">
      <summary>
            Constructs a annotation class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.Annotation.ConvertColorToString(System.Int32,System.Int32,System.Int32)">
      <summary>
            Converts the color value between 0 and 255  to hexadecimal string.
            </summary>
      <param name="red">The int value between 0 and 255.</param>
      <param name="green">The int value between 0 and 255.</param>
      <param name="blue">The int value between 0 and 255.</param>
      <returns>Returns a hexadecimal string.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.AnnotationType">
      <summary>
            Gets or sets the annotation type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.AnnotationColor">
      <summary>
            The color attribute of annoatations,each color is mapped to a value between 0 and 255 then converted to hexadecimal (00 to FF).
            The three hexadecimal values are concatenated and prefixed with a hash sign.Example:color="#FFFF00".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Rectangle">
      <summary>
            The annotation rectangle, defining the location of the annotation on the page in default user space units.
            The value is four comma separated real numbers which may be positive or negative.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Flags">
      <summary>
            A set of flags specifying various characteristics of the annotation.Value is a comma separated list containing the values:
            invisible,hidden,print,nozoom,norotate,noview, readonly,locked,togglenoview
            Example:flags="print,locked".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.CreatetionDate">
      <summary>
            The date and time when the annotation was created.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.ModifiedDate">
      <summary>
            The date and time when the annotation was most recently modified.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Subject">
      <summary>
             The text representing a short description of the subject being addressed by the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Coordinates">
      <summary>
            Value is one or more groups of 8 comma separated real numbers. Groups are separated by commas.
            An array of 8 x n numbers specifying the coordinates of n quadrilaterals in default user space.
            Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation. 
            The coordinates for each quadrilateral are given in the order:x1,y1,x2,y2,x3,y3,x4,y4
            specifying the quadrilateral's four vertices in counterclockwise order. 
            The text is oriented with respect to the edge connecting points (x1, y1) and (x2, y2). 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Justification">
      <summary>
            A code specifying the form of quadding (justification) to be used in displaying the annotation's text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.BorderWidth">
      <summary>
            The border width in points. If this value is 0, no border is drawn.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.BorderStyle">
      <summary>
            Gets or sets  the border style.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.BorderDashes">
      <summary>
            A comma separated list of numbers defining a pattern of dashes and gaps to be used in drawing a dashed border. 
            The dash phase is not specified and is assumed to be 0. 
            For example, a dashes attribute with value "3,2" specifies a border drawn with 3-point dashes alternating with 2-point gaps.
            Values are: 1 or more numbers separated by a comma. For example:3;3,5;4,3,2,3.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.LineStart">
      <summary>
            Two comma separated real numbers specify the starting coordinates in the  annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.LineEnd">
      <summary>
            Two comma separated real numbers specify the ending coordinates in the  annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.LineHeadShape">
      <summary>
            The line end for the head,the name specifying the line ending styles to be used in drawing the line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.LineTailShape">
      <summary>
            The line end for the tail,the name specifying the line ending styles to be used in drawing the line,
            Values for head and tail are:None (Default), Square,Circle,Diamond,OpenArrow,ClosedArrow,Butt,ROpenArrow,RClosedArrow. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.InteriorColor">
      <summary>
            The interior color with which to fill the annotation's line endings,rectangle,ellipse,polygon,polyline etc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Fringe">
      <summary>
            The firnge attribute is a set of four values describing the numerical differences between two rectangles:
            the Rect entry of the annotation and the actual boundaries of the underlying object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Page">
      <summary>
            Gets or sets the page number which represents the ordinal page number on which this annotation should appear.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Subtype">
      <summary>
            Gets or set the subtype of a annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Icon">
      <summary>
            Gets or sets the name of the icon to be used in displaying the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Contents">
      <summary>
            Gets or sets the text to be displayed for the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.ContentsRichtext">
      <summary>
            A indirect reference including rich text string to be displayed in the pop-up window when the annotation is opened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Opacity">
      <summary>
            The constant opacity value to be used in painting the annotation. 
            This value applies to all visible elements of the annotation in its closed state (including its background and border),
            but not to the popup window that appears when the annotation is opened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Open">
      <summary>
            A flag specifying whether the annotation should initially be displayed open.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Annotation.Author">
      <summary>
            Gets or sets the user who added the annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.AnnotationType">
      <summary>
            Enumerates the annotation types'definitions.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Text">
      <summary>
            The text annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Circle">
      <summary>
            The circle annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Polygon">
      <summary>
            The polygon annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.PolyLine">
      <summary>
            The polyline annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Line">
      <summary>
            The line annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Square">
      <summary>
            The square annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.FreeText">
      <summary>
            The freetext annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.HightLight">
      <summary>
            The hightlight annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.UnderLine">
      <summary>
            The underline annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Squiggly">
      <summary>
            The squiggly annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.StrikeOut">
      <summary>
            The strikeout annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Caret">
      <summary>
            The caret annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Ink">
      <summary>
            The ink annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Link">
      <summary>
            The link annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Popup">
      <summary>
            The popup annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.FileAttachment">
      <summary>
            The file attachment annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Sound">
      <summary>
            The sound annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Movie">
      <summary>
            The movie annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Screen">
      <summary>
            The screen annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Widget">
      <summary>
            The widget annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Watermark">
      <summary>
            The watermark annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.TrapNet">
      <summary>
            The trap network annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.PrinterMark">
      <summary>
            The printer's mark annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.AnnotationType.Stamp">
      <summary>
            The rubber stamp annotation type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.AttachmentInfo">
      <summary>
            Represents the attachment information.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AttachmentInfo.CreateDate">
      <summary>
            Gets or sets the date and time when the embedded file was created.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AttachmentInfo.ModifyDate">
      <summary>
            Gets or sets the date and time when the embedded file was last modified.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AttachmentInfo.MIMEType">
      <summary>
            Gets or sets the MIME media type names.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AttachmentInfo.FileName">
      <summary>
            Gets or sets the name of file attachments.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AttachmentInfo.FileSize">
      <summary>
            Gets or sets the size of the embedded file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AttachmentInfo.AttachmentStream">
      <summary>
            Gets or sets the file attachment stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.AttachmentInfo.DescriptionInfo">
      <summary>
            Gets or sets the description information.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.BookMark">
      <summary>
            Represents a BookMark class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.BookMark.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Kit.BookMark" /> class.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.BookMark.FitAll">
      <summary>
            Displayes the page  with its contents magnified just enough
            to fit the entire page within the window both horizontally and vertically.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.BookMark.FitRectangle">
      <summary>
            Display the page with its contents magnified just enough
            to fit the rectangle specified by the coordinates left, bottom, right, and top
            entirely within the window both horizontally and vertically.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.BookMark.FitHorizontal">
      <summary>
            Displayes the page with the vertical coordinate top positioned
            at the top edge of the window and the contents of the page magnified
            just enough to fit the entire width of the page within the window.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.BookMark.FitBoxHorizontal">
      <summary>
            Displayes the page with the vertical coordinate
            top positioned at the top edge of the window and the contents of the page
            magnified just enough to fit the entire width of its bounding box within the window.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.BookMark.FitBoxVertical">
      <summary>
            Display the page with the horizontal coordinate
            left positioned at the left edge of the window and the contents of the page
            magnified just enough to fit the entire height of its bounding box within the window.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.BookMark.FitBox">
      <summary>
            Displayes the page designated by page, with its contents magnified
            just enough to fit its bounding box entirely within the window both horizontally and vertically.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.BookMark.FitXYZ">
      <summary>
            Display the page with the coordinates (left, top) positioned
            at the upper-left corner of the window and the contents of the page magnified by the factor zoom.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.BookMark.FitVertical">
      <summary>
            Display the page with the horizontal coordinate left positioned
            at the left edge of the window and the contents of the page magnified
            just enough to fit the entire height of the page within the window.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.Title">
      <summary>
            Gets or sets BookMark title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.Level">
      <summary>
            Gets or sets BookMark Level.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.Destination">
      <summary>
            Gets or sets BookMark Destination page, required if action is set as "".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.Action">
      <summary>
            Gets or sets the action type of BookMark,if PageNumber is presented, the action can not be specified,
            the action type includes:"GoTo","GoToR","Launch","Named".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.ChildItem">
      <summary>
            Gets or sets bookmak's children.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.PageNumber">
      <summary>
            Gets or sets the number of boomark's destination page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.BoldFlag">
      <summary>
            Gets or sets the bold flag of bookmark's title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.ItalicFlag">
      <summary>
            Gets or sets the Italic flag of bookmark's title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.TitleColor">
      <summary>
            Gets or sets the color of bookmark's title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.RemoteFile">
      <summary>
            Gets or sets the file which is required for "RemoteGoTo" action of bookmark.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.PageDisplay">
      <summary>
            Gets or sets the display type of bookmark's destination page, its value include "FIT","FIT_RECTANGLE",
            "FIT_BOUNDINGBOX_HORIZONTAL","FIT_HORIZONTAL",""FIT_VERTICAL","FIT_BOUNDINGBOX_VERTICAL","FIT_BOUNDINGBOX","FIT_XYZ",
            the default value is FIT_HORIZONTAL.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.PageDisplay_Left">
      <summary>
            Displayes the page with left coordinate positioned at the left edge of the window.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.PageDisplay_Top">
      <summary>
            Displayes the page with top coordinate positioned at the top edge of the window.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.PageDisplay_Right">
      <summary>
            The right coordinate is required if PageDisplay is set as "FIT_RECTANGLE".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.PageDisplay_Bottom">
      <summary>
            The bottom coordinate is required if PageDisplay is set as "FIT_RECTANGLE".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.PageDisplay_Zoom">
      <summary>
            Displayes the contents of the page  magnified by the factor zoom.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMark.CustomAcorbatViewerMenuActionName">
      <summary>
            The action name corresponding to execute a menu item in Acrobat viewer, the value can be found in AdobeMenuActionName class.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.BookMarks">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.Kit.BookMark" /> objects.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.BookMarks.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Kit.BookMarks" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.BookMarks.Add(Aspose.Pdf.Kit.BookMark)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Kit.BookMark" /> object into the collection.
            </summary>
      <param name="bookMark">The <see cref="T:Aspose.Pdf.Kit.BookMark" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.BookMarks.Remove(Aspose.Pdf.Kit.BookMark)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Kit.BookMark" /> object from the collection.
            </summary>
      <param name="bookMark">The <see cref="T:Aspose.Pdf.Kit.BookMark" /> object to be removed.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.BookMarks.CopyTo(Aspose.Pdf.Kit.BookMark[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Kit.BookMark" /> object array, starting at a specified array index.
            </summary>
      <param name="bookMarkArray">The BookMarks array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="P:Aspose.Pdf.Kit.BookMarks.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Kit.BookMark" /> object from the collection according to BookMark index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.Certificate">
      <summary>
            Represents a certificate class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.Certificate.#ctor">
      <summary>
            Constructs the certificate class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.Certificate.#ctor(System.String)">
      <summary>
            Constructs the certificate class.
            </summary>
      <param name="cpath">The path of the certificate.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Certificate.#ctor(System.String,System.String)">
      <summary>
            Constructs the certificate class.
            </summary>
      <param name="cpath">The path of the certificate.</param>
      <param name="cpassword">The password of the certificate.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Certificate.#ctor(System.IO.Stream)">
      <summary>
            Constructs the certificate class.
            </summary>
      <param name="fileStream">The file stream of certicate.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Certificate.#ctor(System.IO.FileStream,System.String)">
      <summary>
            Constructs the certificate class.
            </summary>
      <param name="fileStream">The file stream of certicate.</param>
      <param name="cpassword">The private password of the certificate.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Certificate.#ctor(System.Byte[],System.String)">
      <summary>
            Constructs the certificate class.
            </summary>
      <param name="cert">The byte array of certificate.</param>
      <param name="cpassword">The private password of the certificate.</param>
    </member>
    <member name="P:Aspose.Pdf.Kit.Certificate.Path">
      <summary>
            The pathe of the certificate, the certificate file must be .pfx file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Certificate.Password">
      <summary>
            The private password of the certificate.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.DocumentPrivilege">
      <summary>
            Represents the privileges for accessing Pdf file. Refer to<see cref="T:Aspose.Pdf.Kit.PdfFileSecurity" />.
            There are 4 ways using this class:
            1.Using predefined privilege directly.
            2.Based on a predefined privilege and change some specifical permissions.
            3.Based on a predefined privilege and change some specifical Adobe Professional permissions combination.
            4.Mixes the way2 and way3.
            </summary>
      <example>
        <code>
            [C#]	
            //Way1: Using predefined privilege directly.
            DocumentPrivilege privilege = DocumentPrivilege.Print;
            
            //Way2: Based on a predefined privilege and change some specifical permissions.
            DocumentPrivilege privilege = DocumentPrivilege.AllowAll;
            privilege.AllowPrint = false;
            privilege.AllowModifyContents = false;
            
            //Way3: Based on a predefined privilege and change some specifical Adobe Professional permissions combination.
            DocumentPrivilege privilege = DocumentPrivilege.ForbidAll;
            privilege.ChangeAllowLevel = 1;
            privilege.PrintAllowLevel = 2;
            
            //Way4: Mixes the way2 and way3
            DocumentPrivilege privilege = DocumentPrivilege.ForbidAll;
            privilege.ChangeAllowLevel = 1;
            privilege.AllowPrint = true;
            
            [Visual Basic]
            'Way1: Using predefined privilege directly.
            Dim privilege As DocumentPrivilege =  DocumentPrivilege.Print 
            
            'Way2: Based on a predefined privilege and change some specifical permissions.
            Dim privilege As DocumentPrivilege =  DocumentPrivilege.AllowAll 
            privilege.AllowPrint = False
            privilege.AllowModifyContents = False
            
            'Way3: Based on a predefined privilege and change some specifical Adobe Professional permissions combination.
            Dim privilege As DocumentPrivilege =  DocumentPrivilege.ForbidAll 
            privilege.ChangeAllowLevel = 1
            privilege.PrintAllowLevel = 2
            
            'Way4: Mixes the way2 and way3
            Dim privilege As DocumentPrivilege =  DocumentPrivilege.ForbidAll 
            privilege.ChangeAllowLevel = 1
            privilege.AllowPrint = True
            </code>
      </example>
    </member>
    <member name="F:Aspose.Pdf.Kit.DocumentPrivilege.DegradedPrinting">
      <summary>
            Allows degraded printing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DocumentPrivilege.Print">
      <summary>
            Allows printing file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DocumentPrivilege.ModifyContents">
      <summary>
            Allows modifying file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DocumentPrivilege.Copy">
      <summary>
            Allows copying file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DocumentPrivilege.ModifyAnnotations">
      <summary>
            Allows modifying annotations of file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DocumentPrivilege.FillIn">
      <summary>
            Allows filling forms in file. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DocumentPrivilege.ScreenReaders">
      <summary>
            Allows to reader on screen only.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DocumentPrivilege.Assembly">
      <summary>
            Allows assemblying file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DocumentPrivilege.AllowAll">
      <summary>
            All allowed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.DocumentPrivilege.ForbidAll">
      <summary>
            All Forbidded.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.DocumentPrivilege.AllowPrint">
      <summary>
            Sets the permission which allow print or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.DocumentPrivilege.AllowDegradedPrinting">
      <summary>
            Sets the permission which allow degraded printing or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.DocumentPrivilege.AllowModifyContents">
      <summary>
            Sets the permission which allow modify contents or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.DocumentPrivilege.AllowCopy">
      <summary>
            Sets the permission which allow copy or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.DocumentPrivilege.AllowModifyAnnotations">
      <summary>
            Sets the permission which allow modify annotations or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.DocumentPrivilege.AllowFillIn">
      <summary>
            Sets the permission which allow fill in forms or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.DocumentPrivilege.AllowScreenReaders">
      <summary>
            Sets the permission which allow screen readers or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.DocumentPrivilege.AllowAssembly">
      <summary>
            Sets the permission which allow assembly or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.DocumentPrivilege.PrintAllowLevel">
      <summary>
            Sets the print level of  document's privilege. Just as the Adobe Professional's Printing Allowed settings.
            0: None.
            1: Low Resolution (150 dpi).
            2: High Resolution.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.DocumentPrivilege.ChangeAllowLevel">
      <summary>
            Sets the change level of  document's privilege. Just as the Adobe Professional's Changes Allowed settings.
            0: None.
            1: Inserting, Deleting and Rotating pages.
            2: Filling in form fields and signing existing signature fields.
            3: Commenting, filling in form fields, and signing existing signature fields.
            4: Any except extracting pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.DocumentPrivilege.CopyAllowLevel">
      <summary>
            Sets the copy level of  document's privilege. Just as the Adobe Professional's permission settings.
            0: None.
            1: Enable text access for screen reader devices for the visually impaired.
            2: Enable copying of text, images and other content.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.EncodingType">
      <summary>
            Enumerates encoding types of the text using. Refer to<see cref="T:Aspose.Pdf.Kit.PdfFileStamp" />.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.EncodingType.Identity_h">
      <summary>
            The Unicode encoding with horizontal writing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.EncodingType.Identity_v">
      <summary>
            The Unicode encoding with vertical writing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.EncodingType.Cp1250">
      <summary>
            A windows text encoding name.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.EncodingType.Cp1252">
      <summary>
            A windows text encoding name.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.EncodingType.Cp1257">
      <summary>
            A windows text encoding name.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.EncodingType.Winansi">
      <summary>
            Windows ansi encoding.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.EncodingType.Macroman">
      <summary>
            Mac os standard encoding for Latin text.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.EnumDescription">
      <summary>
            Represents a class to get the description of a enum type.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.EnumDescription.GetEnumDescription(System.Enum)">
      <summary>
            Gets the description of a enum type.
            </summary>
      <param name="enumSubitem">The subitem of enum parameter.</param>
      <returns>Returns a sting value.</returns>
    </member>
    <member name="T:Aspose.Pdf.Kit.FontColor">
      <summary>
            Represents a structure of FontColor. Refer to<see cref="T:Aspose.Pdf.Kit.PdfFileStamp" />.
            Use this class before 2007/02/25. Aspose has replaced it to System.Drawing.Color, 
            Please use new class after that date.   
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.FontColor.#ctor(System.Byte,System.Byte,System.Byte)">
      <summary>
            Creates a FontColor object.
            </summary>
      <param name="r">Red component value.</param>
      <param name="g">Green component value.</param>
      <param name="b">Blue component value.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.FontColor.#ctor">
      <summary>
            The constructor of FontColor object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FontColor.Green">
      <summary>
            Gets of sets the green component value for the new FontColor object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FontColor.Red">
      <summary>
            Gets of sets the red component value for the new FontColor object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.FontColor.Blue">
      <summary>
            Gets of sets the blue component value for the new FontColor object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.FontStyle">
      <summary>
            Enumerates 14 types of font. Refer to<see cref="T:Aspose.Pdf.Kit.PdfFileStamp" />.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.Courier">
      <summary>
            Courier font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.CourierBold">
      <summary>
            Bold Courier font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.CourierOblique">
      <summary>
            Oblique Curier font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.CourierBoldOblique">
      <summary>
            Bold oblique Courier font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.Helvetica">
      <summary>
            Helvetica font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.HelveticaBold">
      <summary>
            Bold Helvetica font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.HelveticaOblique">
      <summary>
            Oblique Helvetica font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.HelveticaBoldOblique">
      <summary>
            Bold oblique Helvetica font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.Symbol">
      <summary>
            Symbol font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.TimesRoman">
      <summary>
            Times-Roman font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.TimesBold">
      <summary>
            Bold Times font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.TimesItalic">
      <summary>
            Italic Times font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.TimesBoldItalic">
      <summary>
            Bold italic Times font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.ZapfDingbats">
      <summary>
            ZapfDingbats font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.FontStyle.CjkFont">
      <summary>
            True Type Font for CJK supporting ,default is MS PGothic font.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.FormattedText">
      <summary>
            Represents a class to format text including color, size, font.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormattedText.#ctor">
      <summary>
            Initializes the Formattedtext with default setting (FontColor = System.Drawing.Color.FromArgb(0,0,0), FontStyle.TimesRoman，EncodingType.WINANSI,texSize = 12).Refer to <see cref="T:Aspose.Pdf.Kit.PdfFileMend" /></summary>
      <example>
        <code>
            [C#]
            FormattedText fTxt = new FormattedText();
            fTxt.AddNewLineText("FormattedText");
            
            [Viusal Basic]
            Dim fTxt As FormattedText =  New FormattedText()
            fTxt.AddNewLineText("FormattedText")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormattedText.#ctor(System.String)">
      <summary>
            Initializes the Formattedtext with default setting (FontColor = System.Drawing.Color.FromArgb(0,0,0), FontStyle.TimesRoman，EncodingType.WINANSI,texSize = 12).Refer to <see cref="T:Aspose.Pdf.Kit.PdfFileMend" /></summary>
      <param name="text">The content in string.</param>
      <example>
        <code>
            [C#]
            FormattedText fTxt = new FormattedText("FormattedText");
            
            [Viusal Basic]
            Dim fTxt As FormattedText =  New FormattedText("FormattedText")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormattedText.#ctor(System.String,Aspose.Pdf.Kit.FontColor,Aspose.Pdf.Kit.FontStyle,Aspose.Pdf.Kit.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes the text with formats. 
            Use this method before 2007/02/25. Aspose has upgraded to a new 
            method FormattedText(string, System.Drawing.Color, FontStyle, EncodingType, bool, float).
            Please use new method after that date.
            </summary>
      <param name="text">The content in string.</param>
      <param name="textColor">The color of the text showed.</param>
      <param name="textFont">The font of the text showed.</param>
      <param name="textEncoding">The enconding of text.</param>
      <param name="embedded">If the font has to be embedded.</param>
      <param name="textSize">The size of the text.</param>
      <example>
        <code>
            [C#]
            FormattedText fTxt = new FormattedText("FormattedText",new FontColor(0,200,0),FontStyle.TimesRoman,EncodingType.Winansi,false,12);
            
            [Visual Basic]
            Dim fTxt As FormattedText =  New FormattedText("FormattedText",New FontColor(0,200,0),FontStyle.TimesRoman,EncodingType.Winansi,False,12)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormattedText.#ctor(System.String,System.Drawing.Color,Aspose.Pdf.Kit.FontStyle,Aspose.Pdf.Kit.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes the text with formats for 14 built-in font,or for True Type Font. 
            </summary>
      <param name="text">The content in string.</param>
      <param name="textColor">The color of the text showed.</param>
      <param name="textFont">The built-in font type of <see cref="T:Aspose.Pdf.Kit.FontStyle" />,or the full path of True Type Font .</param>
      <param name="textEncoding">The enconding of text. Should be EncodingType.Winansi, if the True Type Font(.ttf) is used </param>
      <param name="embedded">If the font has to be embedded.</param>
      <param name="textSize">The size of the text.</param>
      <example>
        <code>
            [C#]
            FormattedText fTxt = new FormattedText("FormattedText",System.Drawing.Color.FromArgb((0,200,0),FontStyle.TimesRoman,EncodingType.Winansi,false,12);
            
            [Visual Basic]
            Dim fTxt As FormattedText =  New FormattedText("FormattedText",System.Drawing.Color.FromArgb((0,200,0),FontStyle.TimesRoman,EncodingType.Winansi,False,12)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormattedText.#ctor(System.String,System.Drawing.Color,System.String,Aspose.Pdf.Kit.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes the text with formats for True Type Font. CJK is not supported. And the EncodingType only supports EncodingType.Winansi.
            </summary>
      <param name="text">The content in the text.</param>
      <param name="fontColor">The font color.</param>
      <param name="fontName">The font name or the full ttf file name with the absolute path.</param>
      <param name="textEncoding">The enconding of text.</param>
      <param name="embedded">If the font has to be embedded.</param>
      <param name="fontSize">The font size.</param>
      <example>
        <code>
            [C#]
            FormattedText fTxt = new FormattedText("Page #",System.Drawing.Color.FromArgb(0,200,0),"STZhongsong",EncodingType.Winansi,false,25);
            
            [Visual Basic]
            Dim fTxt As FormattedText =  New FormattedText("Page #",System.Drawing.Color.FromArgb(0,200,0),"STZhongsong",EncodingType.Winansi,false,25);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.FormattedText.AddNewLineText(System.String)">
      <summary>
            Adds a new line to the FormattedText object and sets the newLineText to the next line's text.
            </summary>
      <param name="newLineText">The new line's text</param>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormattedText.TextHeight">
      <summary>
            Gets the height of the string which the FormattedText object contains. 
            </summary>
      <returns>Height of the string.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.FormattedText.TextWidth">
      <summary>
            Gets the width of the string which the FormattedText object contains. 
            </summary>
      <returns>Width of the string.</returns>
    </member>
    <member name="T:Aspose.Pdf.Kit.LineInfo">
      <summary>
            Represents the information of line.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.LineInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Kit.LineInfo" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LineInfo.VerticeCoordinate">
      <summary>
            Gets or sets an array of numbers representing the alternating horizontal and vertical,coordinates, respectively, of each vertex.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LineInfo.LineColor">
      <summary>
            Gets or sets the color of a line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LineInfo.LineWidth">
      <summary>
            Gets or sets the width of a line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LineInfo.Visibility">
      <summary>
            Gets or sets the visibility of a line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LineInfo.LineDashPattern">
      <summary>
            Gets or sets the dash pattern of a line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LineInfo.BorderStyle">
      <summary>
            Gets or sets the border style of a line,0 represents solid, 1 represents dashed, 2 represents beleved,3 represents insert, 4 represents underline.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.LinkInfo">
      <summary>
            Represents the information of links in the pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.LinkInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Kit.LinkInfo" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LinkInfo.SourcePageNum">
      <summary>
            Gets or sets the link source page number.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LinkInfo.ActionType">
      <summary>
            Gets or sets  the action type of link.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LinkInfo.DesFileName">
      <summary>
            Gets or sets the name of destination file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LinkInfo.DesPageNum">
      <summary>
            Gets or sets the destination page number of link.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LinkInfo.DestinationViewType">
      <summary>
            Gets or sets the destination view type of Link.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LinkInfo.LinkColor">
      <summary>
            Gets or sets the color of link.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LinkInfo.HighlightingMode">
      <summary>
            Gets or sets the highlighting mode of link.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LinkInfo.LinkRect">
      <summary>
            Gets or sets the rectangle of link.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LinkInfo.LinkURI">
      <summary>
            Gets or sets the URI of link.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LinkInfo.Visibility">
      <summary>
            Gets or sets the visibility of link.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LinkInfo.Destination">
      <summary>
            Gets or sets the destinaton name of link.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.LogoStyle">
      <summary>
            Represents pattern of the text using. Refer to<see cref="T:Aspose.Pdf.Kit.PdfFileStamp" />.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.LogoStyle.#ctor(Aspose.Pdf.Kit.FontStyle,Aspose.Pdf.Kit.EncodingType,System.Boolean)">
      <summary>
            Initializes the structure of LogoStyle.
            </summary>
      <param name="font">The font of text.</param>
      <param name="encoding">The encoding of text.</param>
      <param name="embedded">If the font has to be embedded.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.LogoStyle.#ctor">
      <summary>
            Initializes the class of LogoStyle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LogoStyle.Font">
      <summary>
            Get and Sets LogoStyle's font property.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LogoStyle.Encoding">
      <summary>
            Get and Sets LogoStyle's encoding property.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.LogoStyle.Embedded">
      <summary>
            Get and Sets LogoStyle's embedded property.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.MarkupType">
      <summary>
            Enumerates 4 types of Markup Annotation. Refer to<see cref="T:Aspose.Pdf.Kit.PdfAnnotationEditor" />.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.MarkupType.Highlight">
      <summary>
            Highlight Markup.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.MarkupType.Underline">
      <summary>
            Underline Markup.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.MarkupType.Squiggly">
      <summary>
            Squiggly Markup.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.MarkupType.StrikeOut">
      <summary>
            StrikeOut Markup.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PageSize">
      <summary> Encapsulates predefined page sizes, including A0, A1, A2, A3, A4, A5, A6, B5, Letter, Legal, Ledger and P11x17.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PageSize.#ctor(System.Single,System.Single)">
      <summary> 
            Initializes a new instance of the PageSize class.
            </summary>
      <param name="x">The width of the page 
            </param>
      <param name="y">The height of the page
            
            </param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PageSize.#ctor">
      <summary> 
            Initializes a new instance of the PageSize class.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageSize.A0">
      <summary> predefined page size - A0 .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageSize.A1">
      <summary> predefined page size - A1 .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageSize.A2">
      <summary> predefined page size - A2 .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageSize.A3">
      <summary> predefined page size - A3 .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageSize.A4">
      <summary> predefined page size - A4 .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageSize.A5">
      <summary> predefined page size - A5 .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageSize.A6">
      <summary> predefined page size - A6 .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageSize.B5">
      <summary> predefined page size - B5 .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageSize.PageLetter">
      <summary> predefined page size - LETTER .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageSize.PageLegal">
      <summary> predefined page size - LEGAL .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageSize.PageLedger">
      <summary> predefined page size - LEDGER .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageSize.P11x17">
      <summary> predefined page size - P11x17 .
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PageSize.IsLandscape">
      <summary> The getter of the isLandscape member. 
            </summary>
      <returns> The bool value that indicates the page is landscape or portrait.
            
            </returns>
      <summary> The setter of the isLandscape member. 
            </summary>
      <param name="isLandscape">The bool value that indicates the page is landscape or portrait.
            
            </param>
    </member>
    <member name="P:Aspose.Pdf.Kit.PageSize.Width">
      <summary>
            Get and Sets PageSize's width. The unit is point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PageSize.Height">
      <summary>
            Get and Sets PageSize's height. The unit is point.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PageTransitionType">
      <summary>
            Enums the transition type of pages. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.SplitVerticalOut">
      <summary>
            Two lines sweep across the screen, revealing the new page. 
            The lines are vertical and move outward from the center.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.SplitHorizonOut">
      <summary>
            Two lines sweep across the screen, revealing the new page. 
            The lines are horizontal and move outward from the center.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.SplitVerticalIn">
      <summary>
            Two lines sweep across the screen, revealing the new page. 
            The lines are  vertical and   move inward from the edges of the page. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.SplitHorizonIn">
      <summary>
            Two lines sweep across the screen, revealing the new page. 
            The lines are horizontal and  move inward from the edges of the page. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.MultiLineVertical">
      <summary>
            Multiple lines, evenly spaced across the screen, synchronously sweep in the same direction to reveal the new page. 
            The lines are vertical.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.MultiLineHorizon">
      <summary>
            Multiple lines, evenly spaced across the screen, synchronously sweep in the same direction to reveal the new page. 
            The lines are horizontal.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.InwardBox">
      <summary>
            A rectangular box sweeps inward from the edges of the page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.OutwardBox">
      <summary>
            A rectangular box sweeps  outward from the center.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.left2RightWipe">
      <summary>
            A single line sweeps across the screen from left to right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.Right2LeftWipe">
      <summary>
            A single line sweeps across the screen from right to left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.Bottom2TopWipe">
      <summary>
            A single line sweeps across the screen from bottom to top.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.Top2BottomWipe">
      <summary>
            A single line sweeps across the screen from top to bottom.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.Dissolves">
      <summary>
            The old page dissolves gradually to reveal the new one.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.Left2RightGlitter">
      <summary>
            Similar to Dissolve, 
            except that the effect sweeps across the page in a wide band moving from the left side of the screen to the right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.Top2BottomGlitter">
      <summary>
            Top-Bottom Glitter.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PageTransitionType.DiagonalGlitter">
      <summary>
            Diagonal Glitter.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfAnnotationEditor">
      <summary>
        <BLOCKQUOTE class="dtBlock">
          <Font color="red">NOTE: This is Beta version of PdfAnnotationEditor. Some methods in this class are still in  
            developing and may not be mature enough.</Font>
        </BLOCKQUOTE> 
            Represents a class to edit the pdf file's annotations(comments).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.#ctor">
      <summary> 
            The constructor of the PdfAnnotationEditor object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.BindPdf(System.String)">
      <summary> 
            Binds a Pdf file for editing.
            </summary>
      <param name="inputFile">The pdf file to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.BindPdf(System.IO.Stream)">
      <summary> 
            Binds a Pdf stream for editing.
            </summary>
      <param name="inputFile">The pdf stream to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.Save(System.String)">
      <summary>
            Saves the result PDF to file.
            </summary>
      <param name="outputFile">output pdf file</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.Save(System.IO.Stream)">
      <summary>
            Saves the result PDF to stream.
            </summary>
      <param name="outputStream">output pdf stream</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.ImportAnnotationFromXfdf(System.String)">
      <summary>
            Imports annotations from xfdf data file,the supported annotation types include 
            "Text","Highlight", "Squiggly", "StrikeOut", "Underline","FreeText","Line","Square","Circle","Polygon", "PolyLine",
            "Caret","Stamp","Ink","FileAttachment","Stamp".
            The evalution version can import five annotations at most.
            </summary>
      <param name="xfdfFile">The input xfdf file,the data file must be xml file.</param>
      <example>
        <code>
            [C#]
             String inputXfdfFile = TestPath + "test.xfdf";
             String inputPdfFile = TestPath + "test.pdf";
             String outputPdfFile = TestPath + "test_out.pdf";
             PdfAnnotationEditor pAnnEditor = new PdfAnnotationEditor();
             pAnnEditor.BindPdf(inputPdfFile);
             pAnnEditor.ImportAnnotationFromXfdf(inputXfdfFile);
             pAnnEditor.Save(outputPdfFile);
            [Visual Basic]
             Dim inputXfdfFile as String = TestPath + "test.xfdf"
             Dim inputPdfFile as String = TestPath + "test.pdf"
             Dim outputPdfFile as String= TestPath + "test_out.pdf"
             Dim PdfAnnotationEditor as pAnnEditor = new PdfAnnotationEditor()
             pAnnEditor.BindPdf(inputPdfFile)
             pAnnEditor.ImportAnnotationFromXfdf(inputXfdfFile)
             pAnnEditor.Save(outputPdfFile)
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.ImportAnnotationFromXfdf(System.String,System.Enum[])">
      <summary>
            Imports the specified annotations from xfdf data file,the supported annotation types include 
            "Text","Highlight", "Squiggly", "StrikeOut", "Underline","FreeText","Line","Square","Circle","Polygon", "PolyLine",
            "Caret","Stamp","Ink","FileAttachment","Stamp".
            The evalution version can import five annotations at most.
            </summary>
      <param name="xfdfFile">The input xfdf file,the data file must be xml file.</param>
      <param name="annotType">The annotations array to be imported.</param>
      <example>
        <code>
            [C#]
             String inputXfdfFile = TestPath + "test.xfdf";
             String inputPdfFile = TestPath + "test.pdf";
             String outputPdfFile = TestPath + "test_out.pdf";
             PdfAnnotationEditor pAnnEditor = new PdfAnnotationEditor();
             pAnnEditor.BindPdf(inputPdfFile);
             Enum[] annotType ={ AnnotationType.HightLight, AnnotationType.Line};
             pAnnEditor.ImportAnnotationFromXfdf(inputXfdfFile,annotType);
             pAnnEditor.Save(outputPdfFile);
            [Visual Basic]
             Dim inputXfdfFile as String = TestPath + "test.xfdf"
             Dim inputPdfFile as String = TestPath + "test.pdf"
             Dim outputPdfFile as String= TestPath + "test_out.pdf"
             Dim PdfAnnotationEditor as pAnnEditor = new PdfAnnotationEditor()
             pAnnEditor.BindPdf(inputPdfFile)
             Dim annotType as Enum
             annotType =Array(AnnotationType.HightLight, AnnotationType.Line)
             pAnnEditor.ImportAnnotationFromXfdf(inputXfdfFile,annotType)
             pAnnEditor.Save(outputPdfFile)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.ImportAnnotationFromXfdf(System.IO.Stream,System.Enum[])">
      <summary>
            Imports the specified annotations from xfdf data stream,the supported annotation types include 
            "Text","Highlight", "Squiggly", "StrikeOut", "Underline","FreeText","Line","Square","Circle","Polygon", "PolyLine",
            "Caret","Stamp","Ink","FileAttachment","Stamp".
            The evalution version can import five annotations at most.
            </summary>
      <param name="xfdfSteam">The input xfdf data stream,the data stream must be xml stream.</param>
      <param name="annotType">The annotations array to be imported.</param>
      <example>
        <code>
            [C#]
             String inputXfdfFile = TestPath + "test.xfdf";
             String inputPdfFile = TestPath + "test.pdf";
             String outputPdfFile = TestPath + "test_out.pdf";
             PdfAnnotationEditor pAnnEditor = new PdfAnnotationEditor();
             pAnnEditor.BindPdf(inputPdfFile);
             FileStream fileStream = new System.IO.FileStream(inputXfdfFile, System.IO.FileMode.Open, System.IO.FileAccess.Read);
             Enum[] annotType ={ AnnotationType.HightLight, AnnotationType.Line};
             pAnnEditor.ImportAnnotationFromXfdf(fileStream,annotType);
             pAnnEditor.Save(outputPdfFile);
            [Visual Basic]
            Dim inputXfdfFile as String = TestPath + "test.xfdf"
            Dim inputPdfFile as String = TestPath + "test.pdf"
            Dim outputPdfFile as String= TestPath + "test_out.pdf"
            Dim PdfAnnotationEditor as pAnnEditor = new PdfAnnotationEditor()
            pAnnEditor.BindPdf(inputPdfFile)
            Dim fileStream as FileStream =new System.IO.FileStream(inputXfdfFile, System.IO.FileMode.Open, System.IO.FileAccess.Read)
            Dim annotType as Enum
             annotType =Array(AnnotationType.HightLight, AnnotationType.Line)
             pAnnEditor.ImportAnnotationFromXfdf(inputXfdfFile,annotType)
             pAnnEditor.Save(outputPdfFile)
            </code>
      </example>
    </member>
    <!-- 对于成员“M:Aspose.Pdf.Kit.PdfAnnotationEditor.ImportAnnotationFromXfdf(System.IO.Stream)”忽略有格式错误的 XML 注释 -->
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.ImportAnnotations(System.String[],System.Enum[])">
      <summary>
            Import the specified type's annotations from some pdf documents into a pdf document.
            the supported annotation types include 
            "Text","Highlight", "Squiggly", "StrikeOut", "Underline","FreeText","Line","Square","Circle","Polygon", "PolyLine",
            "Caret","Stamp","Ink","FileAttachment","Stamp".
            </summary>
      <param name="annotFile">The pdf documents that contain source annotations.</param>
      <param name="annotType">The annotation types to be imported.</param>
      <example>
        <code>
            [C#]
                string[] annotFile = new string[2];
                annotFile[0] = TestPath + @"\sample\copy1.pdf";
                annotFile[1] = TestPath + @"\sample\copy2.pdf";
                string inputPdfFile = TestPath + @"\sample\mergedcopy1.pdf";
                string outputPdfFile = TestPath + @"\sample\example1_out.pdf";
                PdfAnnotationEditor pAnnEditor = new PdfAnnotationEditor();
                pAnnEditor.BindPdf(inputPdfFile);
                Enum[] annotType ={ AnnotationType.HightLight, AnnotationType.Stamp };
               pAnnEditor.ImportAnnotations(annotFile, annotType);
               pAnnEditor.Save(outputPdfFile);
            [Visual Basic]
            Dim annotFile as String
            annotFile=Array(TestPath + "copy1.pdf",TestPath + "copy1.pdf")
            Dim inputPdfFile As String= TestPath + @"\sample\mergedcopy1.pdf"
            Dim outputPdfFile as String= TestPath + "test_out.pdf"
            Dim PdfAnnotationEditor as pAnnEditor = new PdfAnnotationEditor()
             pAnnEditor.BindPdf(inputPdfFile)
            Dim annotType As Enum
            annotType=Array(AnnotationType.HightLight, AnnotationType.Stamp)
             pAnnEditor.ImportAnnotationFromXfdf(annotFile,annotType)
             pAnnEditor.Save(outputPdfFile)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.ImportAnnotations(System.String[])">
      <summary>
            Import the specified type's annotations from some pdf documents into a pdf document.
            the supported annotation types include 
            "Text","Highlight", "Squiggly", "StrikeOut", "Underline","FreeText","Line","Square","Circle","Polygon", "PolyLine",
            "Caret","Stamp","Ink","FileAttachment","Stamp".
            </summary>
      <param name="annotFile">The pdf documents that contain source annotations.</param>
      <example>
        <code>
            [C#]
                string[] annotFile = new string[2];
                annotFile[0] = TestPath + @"\sample\copy1.pdf";
                annotFile[1] = TestPath + @"\sample\copy2.pdf";
                string inputPdfFile = TestPath + @"\sample\mergedcopy1.pdf";
                string outputPdfFile = TestPath + @"\sample\example1_out.pdf";
                PdfAnnotationEditor pAnnEditor = new PdfAnnotationEditor();
                pAnnEditor.BindPdf(inputPdfFile);
               pAnnEditor.ImportAnnotations(annotFile);
               pAnnEditor.Save(outputPdfFile);
            [Visual Basic]
             Dim annotFile as String
             annotFile=Array(TestPath + "copy1.pdf",TestPath + "copy1.pdf")
             Dim inputPdfFile As String= TestPath + @"\sample\mergedcopy1.pdf"
             Dim outputPdfFile as String= TestPath + "test_out.pdf"
             Dim PdfAnnotationEditor as pAnnEditor = new PdfAnnotationEditor()
             pAnnEditor.BindPdf(inputPdfFile)
             Dim annotType As Enum
             pAnnEditor.ImportAnnotationFromXfdf(annotFile)
             pAnnEditor.Save(outputPdfFile)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.ImportAnnotations(System.IO.Stream[],System.Enum[])">
      <summary>
            Import annotations from some pdf document streams into a pdf document.
            the supported annotation types include 
            "Text","Highlight", "Squiggly", "StrikeOut", "Underline","FreeText","Line","Square","Circle","Polygon", "PolyLine",
            "Caret","Stamp","Ink","FileAttachment","Stamp".
            </summary>
      <param name="annotFileStream">The pdf documents stream that contain source annotations.</param>
      <param name="annotType">The annotation types to be imported.</param>
      <example>
        <code>
            [C#]
               string[] annotFile = new string[2];
               annotFile[0] = TestPath + @"\sample\copy1.pdf";
               annotFile[1] = TestPath + @"\sample\copy2.pdf";
               string inputPdfFile = TestPath + @"\sample\mergedcopy1.pdf";
               string outputPdfFile = TestPath + @"\sample\example1_out.pdf";
               PdfAnnotationEditor pAnnEditor = new PdfAnnotationEditor();
               pAnnEditor.BindPdf(inputPdfFile);
               FileStream [] fStream = new FileStream[2];
               fStream[0]=new FileStream(annotFile[0], FileMode.Open); 
               fStream[1]=new FileStream(annotFile[1], FileMode.Open); 
               Enum[] annotType ={ AnnotationType.HightLight, AnnotationType.Stamp };
               pAnnEditor.ImportAnnotations(fStream,annotType);
               pAnnEditor.Save(outputPdfFile);
               fStream[0].Close();
               fStream[1].Close();
            [Visual Basic]
             Dim annotFile as String
             annotFile=Array(TestPath + "copy1.pdf",TestPath + "copy1.pdf")
             Dim fileStream(1) as FileStream
             fileStream(0)=new FileStream(annotFile[0], FileMode.Open);
             fileStream(1)=new FileStream(annotFile[1], FileMode.Open);
             Dim inputPdfFile As String= TestPath + @"\sample\mergedcopy1.pdf"
             Dim outputPdfFile as String= TestPath + "test_out.pdf"
             Dim PdfAnnotationEditor as pAnnEditor = new PdfAnnotationEditor()
             pAnnEditor.BindPdf(inputPdfFile)
             annotType=Array(AnnotationType.HightLight, AnnotationType.Stamp)
             pAnnEditor.ImportAnnotationFromXfdf(fileStream,annotType)
             pAnnEditor.Save(outputPdfFile)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.ImportAnnotations(System.IO.Stream[])">
      <summary>
            Import annotations from some pdf document streams into a pdf document.
            the supported annotation types include 
            "Text","Highlight", "Squiggly", "StrikeOut", "Underline","FreeText","Line","Square","Circle","Polygon", "PolyLine",
            "Caret","Stamp","Ink","FileAttachment","Stamp".
            </summary>
      <param name="annotFileStream">The pdf documents that contain source annotations.</param>
      <example>
        <code>
               string[] annotFile = new string[2];
               annotFile[0] = TestPath + @"\sample\copy1.pdf";
               annotFile[1] = TestPath + @"\sample\copy2.pdf";
               string inputPdfFile = TestPath + @"\sample\mergedcopy1.pdf";
               string outputPdfFile = TestPath + @"\sample\example1_out.pdf";
               PdfAnnotationEditor pAnnEditor = new PdfAnnotationEditor();
               pAnnEditor.BindPdf(inputPdfFile);
               FileStream [] fStream = new FileStream[2];
               fStream[0]=new FileStream(annotFile[0], FileMode.Open); 
               fStream[1]=new FileStream(annotFile[1], FileMode.Open); 
               pAnnEditor.ImportAnnotations(fStream);
               pAnnEditor.Save(outputPdfFile);
               fStream[0].Close();
               fStream[1].Close();
            [Visual Basic]
             Dim annotFile as String
             annotFile=Array(TestPath + "copy1.pdf",TestPath + "copy1.pdf")
             Dim fileStream(1) as FileStream
             fileStream(0)=new FileStream(annotFile[0], FileMode.Open);
             fileStream(1)=new FileStream(annotFile[1], FileMode.Open);
             Dim inputPdfFile As String= TestPath + @"\sample\mergedcopy1.pdf"
             Dim outputPdfFile as String= TestPath + "test_out.pdf"
             Dim PdfAnnotationEditor as pAnnEditor = new PdfAnnotationEditor()
             pAnnEditor.BindPdf(inputPdfFile)
             pAnnEditor.ImportAnnotationFromXfdf(fileStream)
             pAnnEditor.Save(outputPdfFile)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.ModifyAnnotations(System.Int32,System.Int32,System.Enum,Aspose.Pdf.Kit.Annotation)">
      <summary>
            Modifies the annotations of the specifed type, it support to modify the date,the author,the subject,the color and the open flag.
            </summary>
      <param name="start">The start page number.</param>
      <param name="end">The end page number.</param>
      <param name="annotType">The annotation type according to which to modify annotations.</param>
      <param name="annotation">The Annoation object contains the content to be modified.</param>
      <example>
        <code>
             [C#] 
                string inFile = TestPath + @"annotation\Annot-test.pdf";
                PdfAnnotationEditor pCE = new PdfAnnotationEditor();
                pCE.BindPdf(inFile);
                Aspose.Pdf.Kit.Annotation annot = new Aspose.Pdf.Kit.Annotation();
                annot.Subject = "Audit";
                annot.ModifiedDate = "20081026";
                annot.Author = "Allen";
                annot.AnnotationColor = Aspose.Pdf.Kit.Annotation.ConverrColorToString(255, 0, 255);
                annot.Open = true;
                pCE.ModifyAnnotations(1, 1, AnnotationType.Text,annot);
                pCE.Save(TestPath + @"annotation\Annot-test_modified.pdf");
            [Visual Basic]
                Dim inFile As String = TestPath + @"annotation\Annot-test.pdf"
                Dim pCE As PdfAnnotationEditor=new PdfAnnotationEditor()
                pCE.BindPdf(inFile)
                Dim annot As Aspose.Pdf.Kit.Annotation  = new Aspose.Pdf.Kit.Annotation()
                annot.Subject = "Audit"
                annot.ModifiedDate = "20081026"
                annot.Author = "Allen";
                annot.AnnotationColor = Aspose.Pdf.Kit.Annotation.ConverrColorToString(255, 0, 255);
                annot.Open = true     
                pCE.ModifyAnnotations(1, 1, AnnotationType.Text,annot)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.ModifyAnnotationsAuthor(System.Int32,System.Int32,System.String,System.String)">
      <summary>
            Modifies the author of annotations according to the specified author.
            </summary>
      <param name="start">The start page number.</param>
      <param name="end">The end page number.</param>
      <param name="srcAuthor">The source author.</param>
      <param name="desAuthor">The new author.</param>
      <example>
        <code>
             [C#] 
                string inFile = TestPath + @"annotation\Annot-test.pdf";
                PdfAnnotationEditor pCE = new PdfAnnotationEditor();
                pCE.BindPdf(inFile);
                pCE.ModifyAnnotationsAuthor(1, 2,"Felix","Allen");
                pCE.Save(TestPath + @"annotation\Annot-test_modified.pdf");
            [Visual Basic]
                Dim inFile As String = TestPath + @"annotation\Annot-test.pdf"
                Dim pCE As PdfAnnotationEditor=new PdfAnnotationEditor()
                pCE.BindPdf(inFile)  
                pCE.ModifyAnnotationsAuthor(1, 2,"Felix","Allen")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.FlatteningAnnotations">
      <summary>
            Flattening all the annotations in the pdf document.
            </summary>
      <example>
        <code>
             [C#] 
                string inFile = TestPath + @"annotation\Annot-test.pdf";
                PdfAnnotationEditor pCE = new PdfAnnotationEditor();
                pCE.BindPdf(inFile);
                pCE.FlatteningAnnotations();
                pCE.Save(TestPath + @"annotation\Annot-test_flattened.pdf");
            [Visual Basic]
                Dim inFile As String = TestPath + @"annotation\Annot-test.pdf"
                Dim pCE As PdfAnnotationEditor=new PdfAnnotationEditor()
                pCE.BindPdf(inFile)  
                pCE.FlatteningAnnotations()
                pCE.Save(TestPath + @"annotation\Annot-test_flattened.pdf")
            </code>
      </example>
    </member>
    <!-- 对于成员“M:Aspose.Pdf.Kit.PdfAnnotationEditor.FlatteningAnnotations(System.Int32,System.Int32,System.Enum[])”忽略有格式错误的 XML 注释 -->
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.DeleteAnnotations">
      <summary>
            Delete all annotations in the pdf document.
            </summary>
      <example>
        <code>
            [C#]
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfAnnotationEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotations();
            editor.Save(TestPath +  "delete_Annotations.pdf");
            [Visual Basic]
            Dim editor As PdfAnnotationEditor =  New PdfAnnotationEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfAnnotationEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotations();
            editor.Save(TestPath +  "delete_Annotations.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.DeleteAnnotations(System.String)">
      <summary>
            Delete the  annotations of  the specified type.
            </summary>
      <param name="annotType">The type of annotations to be deleted.</param>
      <example>
        <code>
            [C#]
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfAnnotationEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotations("Text");
            editor.Save(TestPath +  "delete_Annotations.pdf");
            [Visual Basic]
            Dim editor As PdfAnnotationEditor =  New PdfAnnotationEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfAnnotationEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotations("Text");
            editor.Save(TestPath +  "delete_Annotations.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.DeleteAnnotation(System.String)">
      <summary>
            Delete the  annotation according to The annotation name, a text string uniquely identifying it
            among all the annotations on its page.
            </summary>
      <param name="annotName">The annotation name</param>
      <example>
        <code>
            [C#]
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfAnnotationEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotation("4cfa69cd-9bff-49e0-9005-e22a77cebf38");
            editor.Save(TestPath +  "delete_Annotations.pdf");
            [Visual Basic]
            Dim editor As PdfAnnotationEditor =  New PdfAnnotationEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfAnnotationEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotation("4cfa69cd-9bff-49e0-9005-e22a77cebf38");
            editor.Save(TestPath +  "delete_Annotations.pdf");
            </code>
      </example>
    </member>
    <!-- 对于成员“M:Aspose.Pdf.Kit.PdfAnnotationEditor.ExportAnnotationsXfdf(System.IO.Stream,System.Int32,System.Int32,System.String[])”忽略有格式错误的 XML 注释 -->
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.ExtractAnnotations(System.Int32,System.Int32,System.String[])">
      <summary>
             Extracts the content of the  annotations specified type from the pdf,
             it will return at most 5 annotations when using evaluating version.
             </summary>
      <param name="start">The start page from which annotations of a pdf document is exported.</param>
      <param name="end">The end page that annotations of a pdf document is exported.</param>
      <param name="annotType">The array of annotation types need be exported, 
             such as "Text","Highlight", "Squiggly", "StrikeOut", "Underline","FreeText","Line","Square","Circle","Polygon",
             "PolyLine","Caret","Stamp","Ink".</param>
      <returns>Annotations arrayList.</returns>
      <example>
        <code>
             [C#]
             PdfAnnotationEditor editor = new PdfAnnotationEditor();
             string TestPath = @"E:\pdfkit\";
             editor.BindPdf(TestPath + "PdfAnnotationEditor.ExtractAnnotations.in.pdf");
             string [] annotType={"Text","Highlight", "Squiggly"};
             ArrayList annotList=editor.ExtractAnnotations(1,2,annotType);
            	for(int i=0;i&lt;annotList.Count;i++)
            	{
                       Hashtable currentNode = (Hashtable)annotList[i];
                       Aspose.Pdf.Kit.Annotation annot = new Annotation(currentNode);
                       Console.WriteLine(annot.AnnotationColor);
                       Console.WriteLine(annot.AnnotationType);
                       Console.WriteLine(annot.Contents);
                       Console.WriteLine( annot.ContentsRichtext);
                       Console.WriteLine( annot.Coordinates);
                       Console.WriteLine(annot.CreatetionDate);
                       Console.WriteLine( annot.BorderDashes);
                       Console.WriteLine( annot.Date);
                       Console.WriteLine(annot.Line_End);
                       Console.WriteLine(annot.Flags);
                       Console.WriteLine(annot.Line_Head_Shape);
                       Console.WriteLine( annot.Icon);
                       Console.WriteLine(annot.InteriorColor);
                       Console.WriteLine(annot.Justification);
                       Console.WriteLine( annot.Opacity);
                       Console.WriteLine(annot.Open);
                       Console.WriteLine(annot.Page);
                       Console.WriteLine(annot.Rectangle);
                       Console.WriteLine(annot.Line_Start);
                       Console.WriteLine(annot.BorderStyle);
                       Console.WriteLine(annot.Subject);
                       Console.WriteLine(annot.Subtype);
                       Console.WriteLine(annot.Line_Tail_Shape);
                       Console.WriteLine( annot.BorderWidth);
            }
             [Visual Basic]
             Dim editor As PdfAnnotationEditor =  New PdfAnnotationEditor()
             Dim TestPath As String = @"E:\pdfkit\"
             editor.BindPdf(TestPath + "PdfAnnotationEditor.ExtractAnnotations.in.pdf")
             Dim annotType as String
             annoType=Array("Text","Highlight", "Squiggly")
             Dim annotList As ArrayList =editor.ExtractAnnotations(1,2,annotType)
            	for(int i=0;i&lt;annotList.Count;i++)
            	{
            		 Dim currentNode As Hashtable=(Hashtable)annotList[i]
                       Aspose.Pdf.Kit.Annotation annot = new Annotation(currentNode);
                       Console.WriteLine(annot.AnnotationColor);
                       Console.WriteLine(annot.AnnotationType);
                       Console.WriteLine(annot.Contents);
                       Console.WriteLine( annot.ContentsRichtext);
                       Console.WriteLine( annot.Coordinates);
                       Console.WriteLine(annot.CreatetionDate);
                       Console.WriteLine( annot.BorderDashes);
                       Console.WriteLine( annot.Date);
                       Console.WriteLine(annot.Line_End);
                       Console.WriteLine(annot.Flags);
                       Console.WriteLine(annot.Line_Head_Shape);
                       Console.WriteLine( annot.Icon);
                       Console.WriteLine(annot.InteriorColor);
                       Console.WriteLine(annot.Justification);
                       Console.WriteLine( annot.Opacity);
                       Console.WriteLine(annot.Open);
                       Console.WriteLine(annot.Page);
                       Console.WriteLine(annot.Rectangle);
                       Console.WriteLine(annot.Line_Start);
                       Console.WriteLine(annot.BorderStyle);
                       Console.WriteLine(annot.Subject);
                       Console.WriteLine(annot.Subtype);
                       Console.WriteLine(annot.Line_Tail_Shape);
                       Console.WriteLine( annot.BorderWidth);
            }
             </code>
      </example>
    </member>
    <!-- 对于成员“M:Aspose.Pdf.Kit.PdfAnnotationEditor.ExportAnnotationsXfdf(System.IO.Stream,System.Int32,System.Int32,System.Enum[])”忽略有格式错误的 XML 注释 -->
    <member name="M:Aspose.Pdf.Kit.PdfAnnotationEditor.ExtractAnnotations(System.Int32,System.Int32,System.Enum[])">
      <summary>
             Extracts the content of the  annotations specified type from the pdf,
             it will return at most 5 annotations when using evaluating version.
             </summary>
      <param name="start">The start page from which annotations of a pdf document is exported.</param>
      <param name="end">The end page that annotations of a pdf document is exported.</param>
      <param name="annotType">The array of annotation types need be exported, 
             such as "Text","Highlight", "Squiggly", "StrikeOut", "Underline","FreeText","Line","Square","Circle","Polygon",
             "PolyLine","Caret","Stamp","Ink",these values can be getted for AnnotationType class.</param>
      <returns>Annotations arrayList.</returns>
      <example>
        <code>
             [C#]
             PdfAnnotationEditor editor = new PdfAnnotationEditor();
             string TestPath = @"E:\pdfkit\";
             editor.BindPdf(TestPath + "PdfAnnotationEditor.ExtractAnnotations.in.pdf");
             Enum [] annotType={AnnotationType.HightLight,AnnotationType.Stamp};
             ArrayList annotList=editor.ExtractAnnotations(1,2,annotType);
            	for(int i=0;i&lt;annotList.Count;i++)
            	{
                       Hashtable currentNode = (Hashtable)annotList[i];
                       Aspose.Pdf.Kit.Annotation annot = new Annotation(currentNode);
                       Console.WriteLine(annot.AnnotationColor);
                       Console.WriteLine(annot.AnnotationType);
                       Console.WriteLine(annot.Contents);
                       Console.WriteLine( annot.ContentsRichtext);
                       Console.WriteLine( annot.Coordinates);
                       Console.WriteLine(annot.CreatetionDate);
                       Console.WriteLine( annot.BorderDashes);
                       Console.WriteLine( annot.Date);
                       Console.WriteLine(annot.Line_End);
                       Console.WriteLine(annot.Flags);
                       Console.WriteLine(annot.Line_Head_Shape);
                       Console.WriteLine( annot.Icon);
                       Console.WriteLine(annot.InteriorColor);
                       Console.WriteLine(annot.Justification);
                       Console.WriteLine( annot.Opacity);
                       Console.WriteLine(annot.Open);
                       Console.WriteLine(annot.Page);
                       Console.WriteLine(annot.Rectangle);
                       Console.WriteLine(annot.Line_Start);
                       Console.WriteLine(annot.BorderStyle);
                       Console.WriteLine(annot.Subject);
                       Console.WriteLine(annot.Subtype);
                       Console.WriteLine(annot.Line_Tail_Shape);
                       Console.WriteLine( annot.BorderWidth);
            }
             [Visual Basic]
             Dim editor As PdfAnnotationEditor =  New PdfAnnotationEditor()
             Dim TestPath As String = @"E:\pdfkit\"
             editor.BindPdf(TestPath + "PdfAnnotationEditor.ExtractAnnotations.in.pdf")
             Dim annotType as Enum
             annoType=Array(AnnotationType.HightLight,AnnotationType.Stamp)
             Dim annotList As ArrayList =editor.ExtractAnnotations(1,2,annotType)
            	for(int i=0;i&lt;annotList.Count;i++)
            	{
            		 Dim currentNode As Hashtable=(Hashtable)annotList[i]
                       Aspose.Pdf.Kit.Annotation annot = new Annotation(currentNode);
                       Console.WriteLine(annot.AnnotationColor);
                       Console.WriteLine(annot.AnnotationType);
                       Console.WriteLine(annot.Contents);
                       Console.WriteLine( annot.ContentsRichtext);
                       Console.WriteLine( annot.Coordinates);
                       Console.WriteLine(annot.CreatetionDate);
                       Console.WriteLine( annot.BorderDashes);
                       Console.WriteLine( annot.Date);
                       Console.WriteLine(annot.Line_End);
                       Console.WriteLine(annot.Flags);
                       Console.WriteLine(annot.Line_Head_Shape);
                       Console.WriteLine( annot.Icon);
                       Console.WriteLine(annot.InteriorColor);
                       Console.WriteLine(annot.Justification);
                       Console.WriteLine( annot.Opacity);
                       Console.WriteLine(annot.Open);
                       Console.WriteLine(annot.Page);
                       Console.WriteLine(annot.Rectangle);
                       Console.WriteLine(annot.Line_Start);
                       Console.WriteLine(annot.BorderStyle);
                       Console.WriteLine(annot.Subject);
                       Console.WriteLine(annot.Subtype);
                       Console.WriteLine(annot.Line_Tail_Shape);
                       Console.WriteLine( annot.BorderWidth);
            }
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.#ctor">
      <summary> 
            The constructor of the PdfBookMarkEditor object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.BindPdf(System.String)">
      <summary> 
            Binds a Pdf file for editing.
            </summary>
      <param name="inputFile">The pdf file to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.BindPdf(System.IO.Stream)">
      <summary> 
            Binds a Pdf stream for editing.
            </summary>
      <param name="inputFile">The pdf stream to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.Save(System.String)">
      <summary>
            Saves the result PDF to file.
            </summary>
      <param name="outputFile">output pdf file</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.Save(System.IO.Stream)">
      <summary>
            Saves the result PDF to stream.
            </summary>
      <param name="outputStream">output pdf stream</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.CreateBookmarks">
      <summary>
            Creates bookmark for all of pages.
            </summary>
      <example>
        <code>
            [C#] 
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            editor.BindPdf(inputPath + "example1.pdf");
            editor.CreateBookmarks();
            editor.Save(ouputPath+"example1_1.pdf");
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor()
            editor.BindPdf(inputPath + "example1.pdf")
            editor.CreateBookmarks()
            editor.Save(ouputPath+"example1_1.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.CreateBookmarkOfPage(System.String,System.Int32)">
      <summary>
             Creates bookmark for the specified page.
             </summary>
      <param name="bookmarkName">The specified bookmark  name.</param>
      <param name="pageNumber">The specified desination page.</param>
      <example>
        <code>
             [C#] 
             PdfBookMarkEditor editor = new PdfBookMarkEditor();
             editor.BindPdf(inputPath + "example1.pdf");
             editor.CreateBookmarkOfPage("wenjian",4);
             editor.Save(ouputPath+"example1_1.pdf");
            [Visual Basic]
             Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor() 
             editor.BindPdf(inputPath + "example1.pdf")
             editor.CreateBookmarkOfPage("wenjian",4)
             editor.Save(ouputPath+"example1_1.pdf")	
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.CreateBookmarkOfPage(System.String[],System.Int32[])">
      <summary>
            Creates bookmark for  multipages with using the corresponding bookmarks name.
            </summary>
      <param name="bookmarkName">The specified bookmark  name array.</param>
      <param name="pageNumber">The specified desination page array.</param>
      <example>
        <code>
            [C#] 
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            String [] bookmarkName={"aspose","kit","pdf"};
            int [] pageNumber={3,2,1};
            editor.BindPdf(inputPath + "example1.pdf");
            editor.CreateBookmarkOfPage(bookmarkName,pageNumber);
            editor.Save(ouputPath+"example1_1.pdf");
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor() 
            editor.BindPdf(inputPath + "example1.pdf")
            Dim bookmarkName(2) As String
            bookmarkName=Array("aspose","kit","pdf")
            Dim pageNumber(3) As Integer
            pageNumber=Array(3,2,1)
            editor.CreateBookmarkOfPage(bookmarkName,pageNumber)
            editor.Save(ouputPath+"example1_1.pdf")	
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.ExtractBookMarks">
      <summary>
            Extracts all items of bookmark.
            if your License is the Evaluation version,at most 5 items is return.
            </summary>
      <example>
        <code>
            [C#]      
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            editor.BindPdf(KitTestPath + "example1.pdf");
            BookMarks bookMarks=new BookMarks();
            bookMarks=editor.ExtractBookMarks();
            for(int i=0;i&lt;bookMarks.Count;i++)
            {
            				
            	Console.Write(bookMarks[i].Title+" "+bookMarks[i].Level+" "+bookMarks[i].Action+" "+bookMarks[i].Destination);
            	Console.Write("\n");
            				
            }		
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor()
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            bookMarks=editor.ExtractBookMarks();
            for(int i=0;i&lt;bookMarks.Count;i++)
            {
            				
            	Console.Write(bookMarks[i].Title+" "+bookMarks[i].Level+" "+bookMarks[i].Action+" "+bookMarks[i].Destination);
            	Console.Write("\n");
            				
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.ModifyBookMarks(System.String,System.String)">
      <summary>
            Modifys bookmark title according to the specified bookmark title .
            </summary>
      <param name="sTitle">Source bookmark title.</param>
      <param name="dTitle">Modified bookmark title.</param>
      <example>
        <code>
            [C#]
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            editor.BindPdf(KitTestPath + "example1.pdf");
            editor.ModifyBookMarks(sTitle,dTitle);
            editor.Save(KitTestOut+"example1_Bookmarks.pdf");
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor()
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            editor.ModifyBookMarks(sTitle,dTitle); 
            editor.Save(KitTestOut+"example1_Bookmarks.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.ExtractBookMarks(System.String)">
      <summary>
            Extracts the specified bookmark information . 
            if your License is the Evaluation version,at most 5 items is return.
            </summary>
      <param name="title">Extracted item title.</param>
      <example>
        <code>
            [C#]
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            editor.BindPdf(KitTestPath + "example1.pdf");
            BookMarks bookMarks=new BookMarks();
            bookMarks=editor.ExtractBookMarks("111");
            for(int i=0;i&lt;bookMarks.Count;i++)
            {
            				
             Console.Write(bookMarks[i].Title+" "+bookMarks[i].Level+" "+bookMarks[i].Action+" "+bookMarks[i].Destination);
             Console.Write("\n");
            }				
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            BookMarks bookMarks=new BookMarks();
            bookMarks=editor.ExtractBookMarks("111");
            for(int i=0;i&lt;bookMarks.Count;i++)
            {
            				
             Console.Write(bookMarks[i].Title+" "+bookMarks[i].Level+" "+bookMarks[i].Action+" "+bookMarks[i].Destination);
             Console.Write("\n");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.ExtractBookMarks(Aspose.Pdf.Kit.BookMark)">
      <summary>
            Extracts the children of the specified bookmark.
            </summary>
      <param name="bookMark">The specified bookamrk.</param>
      <returns>BookMark.</returns>
      <example>
        <code>
            [C#]
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            editor.BindPdf(KitTestPath + "example1.pdf");
            BookMark bookMark=new BookMark();
            bookMark.Title="test1";
            BookMarks bookMarks = new BookMarks();
            bookMarks = editor.ExtractBookMarks(bookMark);
            for(int i=0;i&lt;bookMarks.Count;i++)
            {
            				
             Console.Write(bookMarks[i].Title+" "+bookMarks[i].Level+" "+bookMarks[i].Action+" "+bookMarks[i].Destination);
             Console.Write("\n");
            }				
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            BookMark bookMark=new BookMark();
            bookMark.Title="test1";
            BookMarks bookMarks = new BookMarks();
            bookMarks = editor.ExtractBookMarks(bookMark);
            for(int i=0;i&lt;bookMarks.Count;i++)
            {
            				
             Console.Write(bookMarks[i].Title+" "+bookMarks[i].Level+" "+bookMarks[i].Action+" "+bookMarks[i].Destination);
             Console.Write("\n");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.DeleteBookMarks">
      <summary>
            Delete the bookmark of the pdf document.
            </summary>
      <example>
        <code>
            [C#]
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfBookMarkEditor.DeleteBookMarks.in.pdf");
            editor.DeleteBookMarks();
            editor.Save(TestPath +  "delete_Bookmarks.pdf");
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfBookMarkEditor.DeleteBookMarks.in.pdf")
            editor.DeleteBookMarks();
            editor.Save(TestPath +  "delete_Bookmarks.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.DeleteBookMarks(System.String)">
      <summary>
            Delete the bookmark of the specifiec title
            </summary>
      <param name="title">The title of bookmark deleted.</param>
      <example>
        <code>
            [C#]
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfBookMarkEditor.DeleteBookMarks.in.pdf");
            editor.DeleteBookMarks("test2");
            editor.Save(TestPath +  "delete_Bookmarks.pdf");
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfBookMarkEditor.DeleteBookMarks.in.pdf")
            editor.DeleteBookMarks("test2");
            editor.Save(TestPath +  "delete_Bookmarks.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.CreateBookmarks(System.Drawing.Color,System.Boolean,System.Boolean)">
      <summary>
            Create bookmarks of all pages with specified color,bold,italic.
            </summary>
      <param name="color">The color of title.</param>
      <param name="boldFlag">The flag of bold attribution.</param>
      <param name="italicFlag">The flag of italic attribution.</param>
      <example>
        <code>
            [C#]
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfBookMarkEditor.CreateBookmarks.in.pdf");
            System.Drawing.Color c=System.Drawing.Color.FromArgb(255,0,255);
            editor.CreateBookmarks(c,true,true);
            editor.Save(TestPath +"example1_bookmarks.pdf");
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfBookMarkEditor.CreateBookmarks.in.pdf")
            System.Drawing.Color c=System.Drawing.Color.FromArgb(255,0,255)
            editor.CreateBookmarks(c,true,true)
            editor.Save(TestPath +"example1_bookmarks.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.ExportBookmarksToXML(System.String)">
      <summary>
            Extracts the bookmarks of an existing PDF document in the form of an XML file.
            </summary>
      <param name="outXMLFile">The output XML file.</param>
      <example>
        <code>
            [C#]
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "test.pdf");
            editor.ExportBookmarksToXML(TestPath +"bookmarks.xml");
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "test.pdf");
            editor.ExportBookmarksToXML(TestPath +"bookmarks.xml")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.ImportBookmarksWithXML(System.String)">
      <summary>
            Adds the bookmarks listed in an XML file to an existing PDF document.
            </summary>
      <param name="XMLFile">The xml file containing bookmarks list.</param>
      <example>
        <code>
            [C#]
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "test.pdf");
            editor.AddBookmarksToXML(TestPath +"bookmarks.xml");
            editor.Save(TestPath + "testSetBookmarks_out.pdf");
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "test.pdf");
            editor.AddBookmarksToXML(TestPath +"bookmarks.xml")
            editor.Save(TestPath + "testSetBookmarks_out.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.ExtractBookmarksToHTML(System.String,System.String)">
      <summary>
            Extracts the bookmarks and save them in the form of an HTML file, In a web application, users can browse through the HTML files
            first and click a link to go to a specific page within a PDF file.
            </summary>
      <param name="pdfFile">The pdf file to be extracted bookmarks.</param>
      <param name="cssFile">The ccs file to display a HTML file, it can be null.</param>
      <example>
        <code>
            [C#]
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            string TestPath = @"E:\pdfkit\";
            editor.ExtractBookmarksToHTML(TestPath +"bookmarks.xml");
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.ExtractBookmarksToHTML(TestPath +"bookmarks.xml")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfBookMarkEditor.CreateBookmarks(Aspose.Pdf.Kit.BookMark)">
      <summary>
            Creates the bookmarks with the specified bookmark,it can add a nested bookmars if the bookmark include a nested bookmark. 
            </summary>
      <param name="bookmark">The bookmark to be added in a pdf document.</param>
      <example>
        <code>
            [C#]
            PdfBookMarkEditor editor = new PdfBookMarkEditor();
            editor.BindPdf(TestPath + "test.pdf");
            BookMark bm1=new BookMark();
            bm1.PageNumber=1;
            bm1.Title="firstchild";
            BookMark bm2=new BookMark();
            bm2.PageNumber=2;
            bm2.Title="secondchild";
            BookMark bm=new BookMark();
            bm.Action="GoTo";
            bm.PageNumber=1;
            bm.Title="parent";
            BookMarks bms=new BookMarks();
            bms.Add(bm1);
            bms.Add(bm2);
            bm.ChildItem=bms;
            editor.CreateBookmarks(bm);
            editor.Save(TestPath + "testCreateBookmarksOut.pdf");
            [Visual Basic]
            Dim editor As PdfBookMarkEditor =  New PdfBookMarkEditor()
            editor.BindPdf(TestPath + "test.pdf");
            Dim bm1 As new BookMark()
            Dim bm2 As new BookMark()
            Dim bm As new BookMark()
            Dim bms As new BookMarks()
            bm1.PageNumber=1
            bm1.Title="firstchild"
            bm2.PageNumber=2;
            bm2.Title="secondchild" 
            bms.Add(bm1)
            bms.Add(bm2)
            editor.CreateBookmarks(bm)
            editor.Save(TestPath + "testCreateBookmarksOut.pdf")
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfContentEditor">
      <summary> 
            Represents a class to edit the pdf file's content.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.Annotation_Invisible">
      <summary>
            Does not display the annotation if it does not belong to one of the standard annotation types
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.Annotation_Hidden">
      <summary>
            Does not display or print the annotation or allow it to interact with the user, regardless of its annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.Annotation_Print">
      <summary>
            If set, print the annotation when the page is printed. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.Annotation_NoZoom">
      <summary>
            Does not scale the annotation’s appearance to match the magnification of the page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.Annotation_NoRotate">
      <summary>
            Does not rotate the annotation’s appearance to match the rotation of the page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.Annotation_NoView">
      <summary>
            Does not display the annotation on the screen or allow it to interact with the user.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.Annotation_Readonly">
      <summary>
            Does not allow the annotation to interact with the user.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.Annotation_Locked">
      <summary>
            Does not allow the annotation to be deleted or its properties to be modified by the user.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.Annotation_ToggleNoView">
      <summary>
            Inverts the interpretation of the NoView flag for certain events.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.#ctor">
      <summary> 
            The constructor of the PdfContentEditor object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.BindPdf(System.String)">
      <summary> 
            Binds a Pdf file for editing.
            </summary>
      <param name="inputFile">The pdf file to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.BindPdf(System.IO.Stream)">
      <summary> 
            Binds a Pdf stream for editing.
            </summary>
      <param name="inputFile">The pdf stream to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.Save(System.String)">
      <summary>
            Saves the result PDF to file.
            </summary>
      <param name="outputFile">output pdf file</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.Save(System.IO.Stream)">
      <summary>
            Saves the result PDF to stream.
            </summary>
      <param name="outputStream">output pdf stream</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ReplaceText(System.String,System.String)">
      <summary>
        <BLOCKQUOTE class="dtBlock">
          <Font color="red">NOTE: This is Beta version of ReplaceText. The feature may not be supported well
            for some PDF files and we may be not able to fix it in short time.</Font>
        </BLOCKQUOTE> 
            Replaces srcString in the PDF file with descString.
            </summary>
      <param name="srcString">The string to be replaced.</param>
      <param name="descString">The replaced string.</param>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(inputPath + "text.pdf");
            editor.ReplaceText("Pdf", "WordPpt");
            editor.Save(outputPath + "replace.pdf");
            
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            editor.BindPdf(inputPath + "text.pdf")
            editor.ReplaceText("Pdf", "WordPpt")
            editor.Save(outputPath + "replace.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateBookmarks">
      <summary>
            Creates bookmark for all of pages.
            </summary>
      <example>
        <code>
            [C#] 
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(inputPath + "example1.pdf");
            editor.CreateBookmarks();
            editor.Save(ouputPath+"example1_1.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            editor.BindPdf(inputPath + "example1.pdf")
            editor.CreateBookmarks()
            editor.Save(ouputPath+"example1_1.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateBookmarkOfPage(System.String,System.Int32)">
      <summary>
             Creates bookmark for the specified page.
             </summary>
      <param name="bookmarkName">The specified bookmark  name.</param>
      <param name="pageNumber">The specified desination page.</param>
      <example>
        <code>
             [C#] 
             PdfContentEditor editor = new PdfContentEditor();
             editor.BindPdf(inputPath + "example1.pdf");
             editor.CreateBookmarkOfPage("wenjian",4);
             editor.Save(ouputPath+"example1_1.pdf");
            [Visual Basic]
             Dim editor As PdfContentEditor =  New PdfContentEditor() 
             editor.BindPdf(inputPath + "example1.pdf")
             editor.CreateBookmarkOfPage("wenjian",4)
             editor.Save(ouputPath+"example1_1.pdf")	
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateBookmarkOfPage(System.String[],System.Int32[])">
      <summary>
            Creates bookmark for  multipages with using the corresponding bookmarks name.
            </summary>
      <param name="bookmarkName">The specified bookmark  name array.</param>
      <param name="pageNumber">The specified desination page array.</param>
      <example>
        <code>
            [C#] 
            PdfContentEditor editor = new PdfContentEditor();
            String [] bookmarkName={"aspose","kit","pdf"};
            int [] pageNumber={3,2,1};
            editor.BindPdf(inputPath + "example1.pdf");
            editor.CreateBookmarkOfPage(bookmarkName,pageNumber);
            editor.Save(ouputPath+"example1_1.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor() 
            editor.BindPdf(inputPath + "example1.pdf")
            Dim bookmarkName(2) As String
            bookmarkName=Array("aspose","kit","pdf")
            Dim pageNumber(3) As Integer
            pageNumber=Array(3,2,1)
            editor.CreateBookmarkOfPage(bookmarkName,pageNumber)
            editor.Save(ouputPath+"example1_1.pdf")	
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateWebLink(System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Creates a web link in the specified Rectangle of the specified page in the pdf.
            </summary>
      <param name="rect">The specified Rectangle for active click.</param>
      <param name="url">The specified web destination.</param>
      <param name="originalPage">The original page for creating rectangle.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            System.Drawing.Rectangle rect=New System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(inputPath + "example1.pdf");
            editor.CreateWebLink(rect, "http://www.aspose.com", 2);
            editor.Save(outputPath+ "example1_WLink.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            editor.BindPdf(inputPath + "example1.pdf")
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            editor.CreateWebLink(rect, "http://www.aspose.com", 2)
            editor.Save(outputPath+ "example1_WLink.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateLocalLink(System.String,System.Drawing.Rectangle,System.Int32,System.Int32)">
      <summary>
            Creates a local link in the same pdf.
            </summary>
      <param name="outputFile">The output file.</param>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="desPage">The specified local destination page.</param>
      <param name="originalPage">The original page in which the url link is created.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(inputPath + "example1.pdf");
            editor.CreateLocalLink(KitTestOut+ "example1_LLink.pdf",rect, 1, 2);
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            editor.BindPdf(inputPath + "example1.pdf")
            editor.CreateLocalLink(KitTestOut+ "example1_LLink.pdf",rect, 1, 2)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateLocalLink(System.Drawing.Rectangle,System.Int32,System.Int32)">
      <summary>
            Creates a local link in the same pdf.
            </summary>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="desPage">The specified local destination page.</param>
      <param name="originalPage">The original page in which the url link is created.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(inputPath + "example1.pdf");
            editor.CreateLocalLink(rect, 1, 2);
            editor.Save(outputPath+"out.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            editor.BindPdf(inputPath + "example1.pdf")
            editor.CreateLocalLink(rect, 1, 2)
            editor.Save(outputPath+"out.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreatePdfDocumentLink(System.Drawing.Rectangle,System.String,System.Int32,System.Int32)">
      <summary>
            Creates a Link to open a page of another pdf document.
            </summary>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="document">The specified pdf document to be opened.</param>
      <param name="originalPage">The original page in which the  link is created.</param>
      <param name="destinationPage">The destination page of document to be opened .</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(KitTestPath + "example1.pdf");
            editor.CreatePdfDocumentLink(rect,KitTestPath +"example1_document.pdf",2,3);
            editor.Save(KitTestOut+"example1_pageofdocument.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            editor.CreatePdfDocumentLink(rect,KitTestPath +"example1_document.pdf",2,3)
            editor.Save(KitTestOut+"example1_pageofdocument.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateApplicationLink(System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Creates a Link to Launch a Application.
            </summary>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="application">The specified application to be launched.</param>
      <param name="page">The original page in which the  link is created.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(KitTestPath + "example1.pdf");
            editor.CreateApplicationLink(rect,KitTestPath +"example1.txt",2);
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            editor.CreateApplicationLink(rect,KitTestPath +"example1.txt",2)
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateWebLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a web link in the specified Rectangle of the specified page in the pdf.
            </summary>
      <param name="rect">The specified Rectangle for active click.</param>
      <param name="url">The specified web destination.</param>
      <param name="originalPage">The original page for creating rectangle.</param>
      <param name="clr">The color of Rectangle.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            System.Drawing.Rectangle rect=New System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(inputPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            editor.CreateWebLink(rect, "http://www.aspose.com", 2,c);
            editor.Save(outputPath+ "example1_WLink.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            editor.BindPdf(inputPath + "example1.pdf")
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            editor.CreateWebLink(rect, "http://www.aspose.com", 2,c)
            editor.Save(outputPath+ "example1_WLink.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateWebLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a web link in the pdf document with a serial actions corresponding to execute a menu item in Acrobat viewer..
            </summary>
      <param name="rect">The specified Rectangle for active click.</param>
      <param name="url">The specified web destination.</param>
      <param name="originalPage">The original page for creating rectangle.</param>
      <param name="clr">The color of Rectangle.</param>
      <param name="actionName">The action name with a serial actions corresponding to execute a menu item in Acrobat viewer,
            the value can be found in AdobeMenuActionName class.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            System.Drawing.Rectangle rect=New System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(inputPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            Enum []actionName=new Enum[2]{AdobeMenuActionName.Document_AttachFile,AdobeMenuActionName.Document_ExtractPages};
            editor.CreateWebLink(rect, "http://www.aspose.com", 2,c,actionName);
            editor.Save(outputPath+ "example1_WLink.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            editor.BindPdf(inputPath + "example1.pdf")
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim actionName(1) As Enum
            actionName[0]=AdobeMenuActionName.Document_AttachFile
            actionName[1]=AdobeMenuActionName.Document_ExtractPages
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            editor.CreateWebLink(rect, "http://www.aspose.com", 2,c,actionName)
            editor.Save(outputPath+ "example1_WLink.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateLocalLink(System.String,System.Drawing.Rectangle,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a local link in the same pdf.
            </summary>
      <param name="outputFile">The output file.</param>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="desPage">The specified local destination page.</param>
      <param name="originalPage">The original page in which the url link is created.</param>
      <param name="clr">The color of Rectangle.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(inputPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            editor.createLocalLink(KitTestOut+ "example1_LLink.pdf",rect, 1, 2,c);
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            editor.BindPdf(inputPath + "example1.pdf")
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            editor.createLocalLink(KitTestOut+ "example1_LLink.pdf",rect, 1, 2,c)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateLocalLink(System.Drawing.Rectangle,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a local link in the same pdf.
            </summary>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="desPage">The specified local destination page.</param>
      <param name="originalPage">The original page in which the url link is created.</param>
      <param name="clr">The color of Rectangle.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(inputPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            editor.createLocalLink(rect, 1, 2,c);
            editor.Save(outputPath+"out.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            editor.BindPdf(inputPath + "example1.pdf")
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            editor.createLocalLink(rect, 1, 2,c)
            editor.Save(outputPath+"out.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateLocalLink(System.Drawing.Rectangle,System.Int32,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a local link in the same pdf with a serial actions corresponding to execute a menu item in Acrobat viewer..
            </summary>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="desPage">The specified local destination page.</param>
      <param name="originalPage">The original page in which the url link is created.</param>
      <param name="clr">The color of Rectangle.</param>
      <param name="actionName">The action name with a serial actions corresponding to execute a menu item in Acrobat viewer,
            the value can be found in AdobeMenuActionName class.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(inputPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,0,255);
             Enum []actionName=new Enum[2]{AdobeMenuActionName.Document_AttachFile,AdobeMenuActionName.Document_ExtractPages};
            editor.createLocalLink(rect, 1, 2,c,actionName);
            editor.Save(outputPath+"out.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            editor.BindPdf(inputPath + "example1.pdf")
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            Dim actionName(1) As Enum
            actionName[0]=AdobeMenuActionName.Document_AttachFile
            actionName[1]=AdobeMenuActionName.Document_ExtractPages
            editor.createLocalLink(rect, 1, 2,c,actionName)
            editor.Save(outputPath+"out.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreatePdfDocumentLink(System.Drawing.Rectangle,System.String,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a Link to open a page of another pdf document.
            </summary>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="document">The specified pdf document to be opened.</param>
      <param name="originalPage">The original page in which the  link is created.</param>
      <param name="destinationPage">The destination page of document to be opened .</param>
      <param name="clr">The color of Rectangle.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            editor.CreatePdfDocumentLink(rect,KitTestPath +"example1_document.pdf",2,3,c);
            editor.Save(KitTestOut+"example1_pageofdocument.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            System.Drawing.Color c=Color.FromArgb(255,0,255)
            editor.CreatePdfDocumentLink(rect,KitTestPath +"example1_document.pdf",2,3,c)
            editor.Save(KitTestOut+"example1_pageofdocument.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreatePdfDocumentLink(System.Drawing.Rectangle,System.String,System.Int32,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a Link to open a page of another pdf document with a serial actions corresponding to execute a menu item in Acrobat viewer.
            </summary>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="document">The specified pdf document to be opened.</param>
      <param name="originalPage">The original page in which the  link is created.</param>
      <param name="destinationPage">The destination page of document to be opened .</param>
      <param name="clr">The color of Rectangle.</param>
      <param name="actionName">The action name with a serial actions corresponding to execute a menu item in Acrobat viewer,
            the value can be found in AdobeMenuActionName class.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,0,255);
             Enum []actionName=new Enum[2]{AdobeMenuActionName.Document_AttachFile,AdobeMenuActionName.Document_ExtractPages};
            editor.CreatePdfDocumentLink(rect,KitTestPath +"example1_document.pdf",2,3,c,actionName);
            editor.Save(KitTestOut+"example1_pageofdocument.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            System.Drawing.Color c=Color.FromArgb(255,0,255)
            Dim actionName(1) As Enum
            actionName[0]=AdobeMenuActionName.Document_AttachFile
            actionName[1]=AdobeMenuActionName.Document_ExtractPages
            editor.CreatePdfDocumentLink(rect,KitTestPath +"example1_document.pdf",2,3,c,actionName)
            editor.Save(KitTestOut+"example1_pageofdocument.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateApplicationLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a Link to Launch a Application.
            </summary>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="application">The specified application to be launched.</param>
      <param name="page">The original page in which the  link is created.</param>
      <param name="clr">The color of Rectangle.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            editor.CreateApplicationLink(rect,KitTestPath +"example1.txt",2,c);
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            editor.CreatePdfDocumentLink(rect,KitTestPath +"example1.txt",2,c)
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateApplicationLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a Link to Launch a Application with a serial actions corresponding to execute a menu item in Acrobat viewer.
            </summary>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="application">The specified application to be launched.</param>
      <param name="page">The original page in which the  link is created.</param>
      <param name="actionName">The action name corresponding to execute a menu item in Acrobat viewer, the value can be found in AdobeMenuActionName class.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,0,255);
             Enum []actionName=new Enum[2]{AdobeMenuActionName.Document_AttachFile,AdobeMenuActionName.Document_ExtractPages};
            editor.CreateApplicationLink(rect,KitTestPath +"example1.txt",2,c,actionName);
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            Dim actionName(1) As Enum
            actionName[0]=AdobeMenuActionName.Document_AttachFile
            actionName[1]=AdobeMenuActionName.Document_ExtractPages
            editor.CreatePdfDocumentLink(rect,KitTestPath +"example1.txt",2,c,actionName)
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateText(System.Drawing.Rectangle,System.String,System.String,System.Boolean,System.String,System.Int32)">
      <summary>
            Creates Text Annotations.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="title">The title of the annotation.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="open">A flag specifying whether the annotation should initially be displayed open.</param>
      <param name="icon">The name of an icon to be used in displaying the annotation,it's value include:Comment,Key,Note,Help,NewParagraph,Paragraph,Insert.</param>
      <param name="page">The  page in which the  text annotation is created.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(KitTestPath + "example1.pdf");
            editor.CreateText(rect,"welcome to aspose","you are welcome to aspose!",true,"Key",2);
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            editor.CreateText(rect,"welcome to aspose","you are welcome to aspose!",true,"Key",2)
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateFreeText(System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Creates Free Text Annotations.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="page">The  page in which the  text annotation is created.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            editor.CreateFreeText(rect,"welcome to aspose",2);
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            editor.CreateFreeText(rect,"welcome to aspose",2)
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateMarkup(System.Drawing.Rectangle,System.String,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Creates Markup Annotations,it can draw mark  in the pdf document,such as Highlight, Underline, Squiggly and StrikeOut.
            </summary>
      <param name="rect">The  rectangle defining the location of the markup annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="type">The type of annotation that this dictionary describes; must be Highlight(0), Underline(1), Squiggly(2), or StrikeOut(3).</param>
      <param name="page">The  page in which the  text annotation is created.</param>
      <param name="clr">The color of markup.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,255,0,50);
            editor.CreateMarkup(rect,"welcome to aspose",0,1,c);
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            Dim quadPoints as float
            System.Drawing.Color c=Color.FromArgb(255,255,0,50)
            editor.CreateMarkup(rect,"welcome to aspose",0,1,c)
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreatePopup(System.Drawing.Rectangle,System.String,System.Boolean,System.Int32)">
      <summary>
            Creates Popup Annotations.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="open">A flag specifying whether the pop-up annotation should initially be displayed open.</param>
      <param name="page">The  page in which the  Popup annotation is created.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            editor.CreatePopup(rect,"welcome to aspose",true,1);
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            editor.CreatePopup(rect,"welcome to aspose",true,1)
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateFileAttachment(System.Drawing.Rectangle,System.String,System.String,System.Int32,System.String)">
      <summary>
            Creates a file attachment annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="filePath">The path of files need to attach.</param>
      <param name="page">The  page in which the  FileAttachment annotation is created.</param>
      <param name="name">The name of an icon to be used in displaying the annotation,include:Graph,PushPin,Paperclip,Tag</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            editor.CreateFileAttachment(rect,"welcome to aspose!",KitTestPath + "example1_1.pdf",1,"Graph");
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            editor.CreateFileAttachment(rect,"welcome to aspose!",KitTestPath + "example1_1.pdf",1,"Graph")
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateLine(System.Drawing.Rectangle,System.String,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Drawing.Color,System.String,System.Int32[],System.String[])">
      <summary>
            Creates Line Annotations,it can draw all kinds of line.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="x1">The starting  horizontal coordinates of the line.</param>
      <param name="y1">The starting  vertical coordinates of the line.</param>
      <param name="x2">The ending horizontal coordinates of the line.</param>
      <param name="y2">The ending verticalcoordinates of the line.</param>
      <param name="page">The  page in which the  Line annotation is created.</param>
      <param name="border">The border width in points. If this value is 0, no border is drawn. Default value: 1.</param>
      <param name="clr">The color of line.</param>
      <param name="borderStyle">The border style specifying the width and dash pattern to be used in drawing the line, 
            it's value includes:S(Solid),D(Dashed),B(Beveled),I(Inset),U(Underline).</param>
      <param name="dashArray">A dash array defining a pattern of dashes and gaps to be used in drawing a dashed border, if it is used, borderSyle must be accordingly set to D,
            the value of dash and gap is no-negative integer.</param>
      <param name="LEArray">An array of two values respectively specifying the beginning and ending style of the drawing line. The values could be 
            Square,Circle,Diamond,OpenArrow,ClosedArrow,None,Butt,ROpenArrow,RClosedArrow,Slash.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            int []dashArray={};
            String []LEArray={};
            editor.CreateLine(rect,"welcome to aspose!",150,500,200,500,1,5,c,"D",dashArray,LEArray);
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            Dim dashArray as int
            Dim LEArray as String
            dashArray=Array();
            LEArray=Array();
            editor.CreateLine(rect,"welcome to aspose!",150,500,200,500,1,5,c,"D",dashArray,LEArray);
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateSound(System.Drawing.Rectangle,System.String,System.String,System.Int32,System.String)">
      <summary>
            Creates Sound Annotations.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="filePath">The file path of sound file.</param>
      <param name="name">The name of an icon to be used in displaying the annotation,include:Speaker and Mic.</param>
      <param name="page">The  page in which the  Sound annotation is created.</param>
      <param name="rate">The sampling rate, in samples per second.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            editor.CreateSound(rect,KitTestPath+"1.wav","Speaker",1);
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            editor.CreateSound(rect,KitTestPath+"1.wav","Speaker",1,"8000")
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateMovie(System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Creates Movie Annotations.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="filePath">The path of movie file to be played.</param>
      <param name="page">The  page in which the  Line annotation is created.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            editor.CreateMovie(rect,KitTestPath+"clock.avi",1);
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            editor.CreateMovie(rect,KitTestPath+"clock.avi",1)
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateSquareCircle(System.Drawing.Rectangle,System.String,System.Drawing.Color,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Creates SquareCircle Annotations.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="clr">The colors of square or cirlcle.</param>
      <param name="square">Represents square if value is true,represents circle if value is false.</param>
      <param name="page">The  page in which the  SquareCircle annotation is created.</param>
      <param name="borderWidth">The border width of Square or Circle.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color clr=Color.FromArgb(255,255,0,10);
            editor.CreateSquareCircle(rect,"welcome to aspose",clr,false,1,18);
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            System.Drawing.Color clr=Color.FromArgb(255,255,0,10)
            editor.CreateSquareCircle(rect,"welcome to aspose",clr,false,1,18)
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.DrawCurve(Aspose.Pdf.Kit.LineInfo,System.Int32,System.Drawing.Rectangle,System.String)">
      <summary>
            Creates Curve Annotations.
            </summary>
      <param name="lineInfo">The LineInfo class.</param>
      <param name="page">The  page in which the  Curve annotation is created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            LineInfo lineInfo=new LineInfo();
            lineInfo.LineColor=Color.FromArgb(255,255,0,10);
            lineInfo.LineWidth=5;
            lineInfo.BorderStyle=1;
            lineInfo.VerticeCoordinate=new float[10]{177.351F,393.77F, 170.351F, 383.888F ,160.469F ,373.005F ,150.586F, 368.123F, 140.704F, 350.358F};
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            LineInfo lineInfo=new LineInfo()
            lineInfo.LineColor=Color.FromArgb(255,255,0,10)
            Dim verticeCoordinate(10) as Single
            verticeCoordinate=Array(177.351!,393.77!, 170.351!, 383.888! ,160.469! ,373.005! ,150.586!, 368.123!, 140.704!, 350.358!)
            lineInfo.VerticeCoordinate=verticeCoordinate
            Dim lineDashPattern(2) as Integer
            lineDashPattern=Array(2,1)
            lineInfo.LineDashPattern=lineDashPattern
            lineInfo.LineWidth=5
            lineInfo.BorderStyle=1
            editor.DrawCurve(lineInfo,1,rect,"")
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreatePolygon(Aspose.Pdf.Kit.LineInfo,System.Int32,System.Drawing.Rectangle,System.String)">
      <summary>
            Creates Polygon Annotations.
            </summary>
      <param name="lineInfo">The LineInfo class.</param>
      <param name="page">The  page in which the  Polygon annotation is created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page</param>
      <param name="annotContents">The contents of the annotation.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            LineInfo lineInfo=new LineInfo();
            lineInfo.LineColor=Color.FromArgb(255,255,0,10);
            lineInfo.VerticeCoordinate=new float[10]{80,80,90,100,120,100,130,80,120,70};
            lineInfo.LineDashPattern=new int[2]{2,1};
            lineInfo.LineWidth=5;
            lineInfo.BorderStyle=1;		
            editor.CreatePolygon(lineInfo,1,rect,"");
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            LineInfo lineInfo=new LineInfo()
            lineInfo.LineColor=Color.FromArgb(255,255,0,10)
            Dim verticeCoordinate(10) as Single
            verticeCoordinate=Array(80,80,90,100,120,100,130,80,120,70)
            lineInfo.VerticeCoordinate=verticeCoordinate
            Dim lineDashPattern(2) as Integer
            lineDashPattern=Array(2,1)
            lineInfo.LineDashPattern=lineDashPattern
            lineInfo.LineWidth=5
            lineInfo.BorderStyle=1
            editor.CreatePolygon(lineInfo,1,rect,"")
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreatePolyLine(Aspose.Pdf.Kit.LineInfo,System.Int32,System.Drawing.Rectangle,System.String)">
      <summary>
            Creates PolyLine Annotations.
            </summary>
      <param name="lineInfo">The LineInfo class.</param>
      <param name="page">The  page in which the  Polygon annotation is created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page</param>
      <param name="annotContents">The contents of the annotation.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            LineInfo lineInfo=new LineInfo();
            lineInfo.LineColor=Color.FromArgb(255,255,0,10);
            lineInfo.VerticeCoordinate=new float[10]{80,80,90,100,120,100,130,80,120,70};
            lineInfo.LineDashPattern=new int[2]{2,1};
            lineInfo.LineWidth=5;
            lineInfo.BorderStyle=1;		
            editor.CreatePolyLine(lineInfo,1,rect,"");
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            LineInfo lineInfo=new LineInfo()
            lineInfo.LineColor=Color.FromArgb(255,255,0,10)
            Dim verticeCoordinate(10) as Single
            verticeCoordinate=Array(80,80,90,100,120,100,130,80,120,70)
            lineInfo.VerticeCoordinate=verticeCoordinate
            Dim lineDashPattern(2) as Integer
            lineDashPattern=Array(2,1)
            lineInfo.LineDashPattern=lineDashPattern
            lineInfo.LineWidth=5
            lineInfo.BorderStyle=1
            editor.CreatePolyLine(lineInfo,1,rect,"")
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateCaret(System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle,System.String,System.String,System.Drawing.Color)">
      <summary>
            Creates a caret annotation which is a visual symbol indicating the prsence of text edits.
            </summary>
      <param name="page">The  page in which the  caret annotation is created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="caretRect">The actual boundaries of the underlying caret.</param>
      <param name="symbol">A name specifying a symbol to be associated with the caret.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <param name="color">The color of annotation.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect1=new System.Drawing.Rectangle(50,50,100,100);
            System.Drawing.Rectangle rect2=new System.Drawing.Rectangle(60,60, 70, 70);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color clr=Color.FromArgb(255,255,0,10);
            editor.CreateCaret(1,rect1,rect2,"None","wish you happy!",clr);
            editor.Save(TestPath+"PdfContentEditor.CreateCaret.out.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect1 As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim rect2 As System.Drawing.Rectangle=New System.Drawing.Rectangle(60,60, 70, 70)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            System.Drawing.Color clr=Color.FromArgb(255,255,0,10)
            editor.CreateCaret(1,rect1,rect2,"None","hello!",clr)
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateRubberStamp(System.Int32,System.Drawing.Rectangle,System.String,System.String,System.Drawing.Color)">
      <summary>
            Creates a  rubber stamp annotation.
            </summary>
      <param name="page">The  page in which the  caret annotation is created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="icon">An icon is to be used in displaying the annotation,Default value: Draft.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <param name="color">The color of annotation.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect1=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color clr=Color.FromArgb(255,255,0,10);
            editor.CreateRubberStamp(1,rect1,"NotForPublicRelease","ok!",clr);
            editor.Save(TestPath+"PdfContentEditor.CreateRubberStamp.out.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect1 As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            System.Drawing.Color clr=Color.FromArgb(255,255,0,10)
            editor.editor.CreateRubberStamp(1,rect1,"NotForPublicRelease","ok!",clr)
            editor.Save(KitTestOut+"PdfContentEditor.CreateRubberStamp.out.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ExtractBookMarks">
      <summary>
            Extracts all items of bookmark.
            if your License is the Evaluation version,at most 5 items is return.
            </summary>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            editor.BindPdf(KitTestPath + "example1.pdf");
            BookMarks bookMarks=new BookMarks();
            bookMarks=editor.ExtractBookMarks();
            for(int i=0;i&lt;bookMarks.Count;i++)
            {
            				
            	Console.Write(bookMarks[i].Title+" "+bookMarks[i].Level+" "+bookMarks[i].Action+" "+bookMarks[i].Destination);
            	Console.Write("\n");
            				
            }		
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            bookMarks=editor.ExtractBookMarks();
            for(int i=0;i&lt;bookMarks.Count;i++)
            {
            				
            	Console.Write(bookMarks[i].Title+" "+bookMarks[i].Level+" "+bookMarks[i].Action+" "+bookMarks[i].Destination);
            	Console.Write("\n");
            				
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ModifyBookMarks(System.String,System.String)">
      <summary>
            Modifys bookmark title according to the specified bookmark title .
            </summary>
      <param name="sTitle">Source bookmark title.</param>
      <param name="dTitle">Modified bookmark title.</param>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            editor.BindPdf(KitTestPath + "example1.pdf");
            editor.ModifyBookMarks(sTitle,dTitle);
            editor.Save(KitTestOut+"example1_Bookmarks.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            editor.ModifyBookMarks(sTitle,dTitle); 
            editor.Save(KitTestOut+"example1_Bookmarks.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ExtractBookMarks(System.String)">
      <summary>
            Extracts the specified bookmark information . 
            if your License is the Evaluation version,at most 5 items is return.
            </summary>
      <param name="title">Extracted item title.</param>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            editor.BindPdf(KitTestPath + "example1.pdf");
            BookMarks bookMarks=new BookMarks();
            bookMarks=editor.ExtractBookMarks("111");
            for(int i=0;i&lt;bookMarks.Count;i++)
            {
            				
             Console.Write(bookMarks[i].Title+" "+bookMarks[i].Level+" "+bookMarks[i].Action+" "+bookMarks[i].Destination);
             Console.Write("\n");
            }				
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            BookMarks bookMarks=new BookMarks();
            bookMarks=editor.ExtractBookMarks("111");
            for(int i=0;i&lt;bookMarks.Count;i++)
            {
            				
             Console.Write(bookMarks[i].Title+" "+bookMarks[i].Level+" "+bookMarks[i].Action+" "+bookMarks[i].Destination);
             Console.Write("\n");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ExtractBookMarks(Aspose.Pdf.Kit.BookMark)">
      <summary>
            Extracts the children of the specified bookmark.
            </summary>
      <param name="bookMark">The specified bookamrk.</param>
      <returns>BookMark.</returns>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            editor.BindPdf(KitTestPath + "example1.pdf");
            BookMark bookMark=new BookMark();
            bookMark.Title="test1";
            BookMarks bookMarks = new BookMarks();
            bookMarks = editor.ExtractBookMarks(bookMark);
            for(int i=0;i&lt;bookMarks.Count;i++)
            {
            				
             Console.Write(bookMarks[i].Title+" "+bookMarks[i].Level+" "+bookMarks[i].Action+" "+bookMarks[i].Destination);
             Console.Write("\n");
            }				
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            BookMark bookMark=new BookMark();
            bookMark.Title="test1";
            BookMarks bookMarks = new BookMarks();
            bookMarks = editor.ExtractBookMarks(bookMark);
            for(int i=0;i&lt;bookMarks.Count;i++)
            {
            				
             Console.Write(bookMarks[i].Title+" "+bookMarks[i].Level+" "+bookMarks[i].Action+" "+bookMarks[i].Destination);
             Console.Write("\n");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ExtractLink">
      <summary>
            Extracts the information of all links in the pdf document.
            </summary>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            editor.BindPdf(KitTestPath + "example1.pdf");
            ArrayList linkArray=editor.ExtractLink();
            LinkInfo []links=(LinkInfo[])linkArray.ToArray(typeof(LinkInfo));
            for(int k=0;k&lt;linkArray.Count;k++)
            {					
            Console.Write("source page:"+links[k].SourcePageNum+"\n");
            Console.Write("des page:"+links[k].DesPageNum+"\n");
            Console.Write("des view type:"+links[k].DestinationViewType+"\n");
            Console.Write("action type:"+links[k].ActionType+"\n");
            Console.Write("rectangle:"+links[k].LinkRect.Left+"--"+links[k].LinkRect.Bottom+"--"+links[k].LinkRect.Width+"--"+links[k].LinkRect.Height+"\n");
            Console.Write("color:"+links[k].LinkColor.R+"--"+links[k].LinkColor.G+"--"+links[k].LinkColor.B+"\n");
            Console.Write("highlighting mode:"+links[k].HighlightingMode+"\n");
            Console.Write("file name :"+links[k].DesFileName+"\n");
            Console.Write("URI :"+links[k].LinkURI+"\n");
            Console.Write("visibility :"+links[k].Visibility.ToString()+"\n");		
            }
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            LinkInfo []links=(LinkInfo[])linkArray.ToArray(typeof(LinkInfo));
            for(int k=0;k&lt;linkArray.Count;k++)
            {					
            Console.Write("source page:"+links[k].SourcePageNum+"\n");
            Console.Write("des page:"+links[k].DesPageNum+"\n");
            Console.Write("des view type:"+links[k].DestinationViewType+"\n");
            Console.Write("action type:"+links[k].ActionType+"\n");
            Console.Write("rectangle:"+links[k].LinkRect.Left+"--"+links[k].LinkRect.Bottom+"--"+links[k].LinkRect.Width+"--"+links[k].LinkRect.Height+"\n");
            Console.Write("color:"+links[k].LinkColor.R+"--"+links[k].LinkColor.G+"--"+links[k].LinkColor.B+"\n");
            Console.Write("highlighting mode:"+links[k].HighlightingMode+"\n");
            Console.Write("file name :"+links[k].DesFileName+"\n");
            Console.Write("URI :"+links[k].LinkURI+"\n");
            Console.Write("visibility :"+links[k].Visibility.ToString()+"\n");		
            } 
            </code>
      </example>
      <returns>ArrayList</returns>
    </member>
    <!-- 对于成员“M:Aspose.Pdf.Kit.PdfContentEditor.ExportAnnotationsXfdf(System.IO.Stream,System.Int32,System.Int32,System.String[])”忽略有格式错误的 XML 注释 -->
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ExtractAnnotations(System.Int32,System.Int32,System.String[])">
      <summary>
             Extracts the content of the  annotations specified type from the pdf,
             it will return at most 5 annotations when using evaluating version.
             </summary>
      <param name="start">The start page from which annotations of a pdf document is exported.</param>
      <param name="end">The end page that annotations of a pdf document is exported.</param>
      <param name="annotType">The array of annotation types need be exported, 
             such as "Text","Highlight", "Squiggly", "StrikeOut", "Underline","FreeText","Line","Square","Circle","Polygon",
             "PolyLine","Caret","Stamp","Ink".</param>
      <returns>Annotations arrayList.</returns>
      <example>
        <code>
             [C#]
             PdfContentEditor editor = new PdfContentEditor();
             string TestPath = @"E:\pdfkit\";
             editor.BindPdf(TestPath + "PdfContentEditor.ExtractAnnotations.in.pdf");
             string [] annotType={"Text","Highlight", "Squiggly"};
             ArrayList annotList=editor.ExtractAnnotations(1,2,annotType);
            	for(int i=0;i&lt;annotList.Count;i++)
            	{
                       Hashtable currentNode = (Hashtable)annotList[i];
                       Aspose.Pdf.Kit.Annotation annot = new Annotation(currentNode);
                       Console.WriteLine(annot.AnnotationColor);
                       Console.WriteLine(annot.AnnotationType);
                       Console.WriteLine(annot.Contents);
                       Console.WriteLine( annot.ContentsRichtext);
                       Console.WriteLine( annot.Coordinates);
                       Console.WriteLine(annot.CreatetionDate);
                       Console.WriteLine( annot.BorderDashes);
                       Console.WriteLine( annot.Date);
                       Console.WriteLine(annot.Line_End);
                       Console.WriteLine(annot.Flags);
                       Console.WriteLine(annot.Line_Head_Shape);
                       Console.WriteLine( annot.Icon);
                       Console.WriteLine(annot.InteriorColor);
                       Console.WriteLine(annot.Justification);
                       Console.WriteLine( annot.Opacity);
                       Console.WriteLine(annot.Open);
                       Console.WriteLine(annot.Page);
                       Console.WriteLine(annot.Rectangle);
                       Console.WriteLine(annot.Line_Start);
                       Console.WriteLine(annot.BorderStyle);
                       Console.WriteLine(annot.Subject);
                       Console.WriteLine(annot.Subtype);
                       Console.WriteLine(annot.Line_Tail_Shape);
                       Console.WriteLine( annot.BorderWidth);
            }
             [Visual Basic]
             Dim editor As PdfContentEditor =  New PdfContentEditor()
             Dim TestPath As String = @"E:\pdfkit\"
             editor.BindPdf(TestPath + "PdfContentEditor.ExtractAnnotations.in.pdf")
             Dim annotType as String
             annoType=Array("Text","Highlight", "Squiggly")
             Dim annotList As ArrayList =editor.ExtractAnnotations(1,2,annotType)
            	for(int i=0;i&lt;annotList.Count;i++)
            	{
            		 Dim currentNode As Hashtable=(Hashtable)annotList[i]
                       Aspose.Pdf.Kit.Annotation annot = new Annotation(currentNode);
                       Console.WriteLine(annot.AnnotationColor);
                       Console.WriteLine(annot.AnnotationType);
                       Console.WriteLine(annot.Contents);
                       Console.WriteLine( annot.ContentsRichtext);
                       Console.WriteLine( annot.Coordinates);
                       Console.WriteLine(annot.CreatetionDate);
                       Console.WriteLine( annot.BorderDashes);
                       Console.WriteLine( annot.Date);
                       Console.WriteLine(annot.Line_End);
                       Console.WriteLine(annot.Flags);
                       Console.WriteLine(annot.Line_Head_Shape);
                       Console.WriteLine( annot.Icon);
                       Console.WriteLine(annot.InteriorColor);
                       Console.WriteLine(annot.Justification);
                       Console.WriteLine( annot.Opacity);
                       Console.WriteLine(annot.Open);
                       Console.WriteLine(annot.Page);
                       Console.WriteLine(annot.Rectangle);
                       Console.WriteLine(annot.Line_Start);
                       Console.WriteLine(annot.BorderStyle);
                       Console.WriteLine(annot.Subject);
                       Console.WriteLine(annot.Subtype);
                       Console.WriteLine(annot.Line_Tail_Shape);
                       Console.WriteLine( annot.BorderWidth);
            }
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.DeleteBookMarks">
      <summary>
            Delete the bookmark of the pdf document.
            </summary>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfContentEditor.DeleteBookMarks.in.pdf");
            editor.DeleteBookMarks();
            editor.Save(TestPath +  "delete_Bookmarks.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfContentEditor.DeleteBookMarks.in.pdf")
            editor.DeleteBookMarks();
            editor.Save(TestPath +  "delete_Bookmarks.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.DeleteBookMarks(System.String)">
      <summary>
            Delete the bookmark of the specifiec title
            </summary>
      <param name="title">The title of bookmark deleted.</param>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfContentEditor.DeleteBookMarks.in.pdf");
            editor.DeleteBookMarks("test2");
            editor.Save(TestPath +  "delete_Bookmarks.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfContentEditor.DeleteBookMarks.in.pdf")
            editor.DeleteBookMarks("test2");
            editor.Save(TestPath +  "delete_Bookmarks.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.DeleteAnnotations">
      <summary>
            Delete all annotations in the pdf document.
            </summary>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfContentEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotations();
            editor.Save(TestPath +  "delete_Annotations.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfContentEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotations();
            editor.Save(TestPath +  "delete_Annotations.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.DeleteAnnotations(System.String)">
      <summary>
            Delete the  annotations of  the specified type.
            </summary>
      <param name="annotType">The type of annotations to be deleted.</param>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfContentEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotations("Text");
            editor.Save(TestPath +  "delete_Annotations.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfContentEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotations("Text");
            editor.Save(TestPath +  "delete_Annotations.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.DeleteAnnotation(System.String)">
      <summary>
            Delete the  annotation according to The annotation name, a text string uniquely identifying it
            among all the annotations on its page.
            </summary>
      <param name="annotName">The annotation name</param>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfContentEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotation("4cfa69cd-9bff-49e0-9005-e22a77cebf38");
            editor.Save(TestPath +  "delete_Annotations.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfContentEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotation("4cfa69cd-9bff-49e0-9005-e22a77cebf38");
            editor.Save(TestPath +  "delete_Annotations.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.DeleteAttachments">
      <summary>
            Delete all the attachments in the pdf documents.
            </summary>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfContentEditor.DeleteAttachments.in.pdf");
            editor.DeleteAttachments();
            editor.Save(TestPath +  "delete_Attachments.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfContentEditor.DeleteAnnotations.in.pdf");
            editor.DeleteAnnotations("Text");
            editor.Save(TestPath +  "delete_Annotations.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateBookmarks(System.Drawing.Color,System.Boolean,System.Boolean)">
      <summary>
            Create bookmarks of all pages with specified color,bold,italic.
            </summary>
      <param name="color">The color of title.</param>
      <param name="boldFlag">The flag of bold attribution.</param>
      <param name="italicFlag">The flag of italic attribution.</param>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfContentEditor.CreateBookmarks.in.pdf");
            System.Drawing.Color c=System.Drawing.Color.FromArgb(255,0,255);
            editor.CreateBookmarks(c,true,true);
            editor.Save(TestPath +"example1_bookmarks.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "PdfContentEditor.CreateBookmarks.in.pdf")
            System.Drawing.Color c=System.Drawing.Color.FromArgb(255,0,255)
            editor.CreateBookmarks(c,true,true)
            editor.Save(TestPath +"example1_bookmarks.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateBookmarksAction(System.String,System.Drawing.Color,System.Boolean,System.Boolean,System.String,System.String,System.String)">
      <summary>
            Create a bookmark with the specified action.
            </summary>
      <param name="title">The title of the bookmark.</param>
      <param name="color">The color of the bookmark's title.</param>
      <param name="boldFlag">The flag of bold attribution.</param>
      <param name="italicFlag">The flag of italic attribution.</param>
      <param name="file">Another file or application, required when the action type are "GoToR" or "Launch".</param>
      <param name="actionType">The action type, it includes "GoToR","Launch","GoTo","URI".</param>
      <param name="destination">The local destination or remote destination or url.</param>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "PdfContentEditor.CreateBookmarks.in.pdf");
            System.Drawing.Color c=System.Drawing.Color.FromArgb(255,0,255);
            string file=@"E:\pdfkit\example1.txt";
            editor.CreateBookmarksAction("wish successful",c,true,true,file,"Launch","");
            editor.Save(TestPath +"example1_bookmarks.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            Dim file as String =@"E:\pdfkit\example1.txt"
            editor.BindPdf(TestPath + "PdfContentEditor.CreateBookmarks.in.pdf");
            Dim c as System.Drawing.Color
            c=System.Drawing.Color.FromArgb(255,0,255)
            editor.CreateBookmarksAction("wish successful",c,true,true,file,"Launch","")
            editor.Save(TestPath +"example1_bookmarks.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ExportBookmarksToXML(System.String)">
      <summary>
            Extracts the bookmarks of an existing PDF document in the form of an XML file.
            </summary>
      <param name="outXMLFile">The output XML file.</param>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "test.pdf");
            editor.ExportBookmarksToXML(TestPath +"bookmarks.xml");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "test.pdf");
            editor.ExportBookmarksToXML(TestPath +"bookmarks.xml")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ImportBookmarksWithXML(System.String)">
      <summary>
            Adds the bookmarks listed in an XML file to an existing PDF document.
            </summary>
      <param name="XMLFile">The xml file containing bookmarks list.</param>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string TestPath = @"E:\pdfkit\";
            editor.BindPdf(TestPath + "test.pdf");
            editor.AddBookmarksToXML(TestPath +"bookmarks.xml");
            editor.Save(TestPath + "testSetBookmarks_out.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.BindPdf(TestPath + "test.pdf");
            editor.AddBookmarksToXML(TestPath +"bookmarks.xml")
            editor.Save(TestPath + "testSetBookmarks_out.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ExtractBookmarksToHTML(System.String,System.String)">
      <summary>
            Extracts the bookmarks and save them in the form of an HTML file, In a web application, users can browse through the HTML files
            first and click a link to go to a specific page within a PDF file.
            </summary>
      <param name="pdfFile">The pdf file to be extracted bookmarks.</param>
      <param name="cssFile">The ccs file to display a HTML file, it can be null.</param>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            string TestPath = @"E:\pdfkit\";
            editor.ExtractBookmarksToHTML(TestPath +"bookmarks.xml");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim TestPath As String = @"E:\pdfkit\"
            editor.ExtractBookmarksToHTML(TestPath +"bookmarks.xml")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateBookmarks(Aspose.Pdf.Kit.BookMark)">
      <summary>
            Creates the bookmarks with the specified bookmark,it can add a nested bookmars if the bookmark include a nested bookmark. 
            </summary>
      <param name="bookmark">The bookmark to be added in a pdf document.</param>
      <example>
        <code>
            [C#]
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(TestPath + "test.pdf");
            BookMark bm1=new BookMark();
            bm1.PageNumber=1;
            bm1.Title="firstchild";
            BookMark bm2=new BookMark();
            bm2.PageNumber=2;
            bm2.Title="secondchild";
            BookMark bm=new BookMark();
            bm.Action="GoTo";
            bm.PageNumber=1;
            bm.Title="parent";
            BookMarks bms=new BookMarks();
            bms.Add(bm1);
            bms.Add(bm2);
            bm.ChildItem=bms;
            editor.CreateBookmarks(bm);
            editor.Save(TestPath + "testCreateBookmarksOut.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            editor.BindPdf(TestPath + "test.pdf");
            Dim bm1 As new BookMark()
            Dim bm2 As new BookMark()
            Dim bm As new BookMark()
            Dim bms As new BookMarks()
            bm1.PageNumber=1
            bm1.Title="firstchild"
            bm2.PageNumber=2;
            bm2.Title="secondchild" 
            bms.Add(bm1)
            bms.Add(bm2)
            editor.CreateBookmarks(bm)
            editor.Save(TestPath + "testCreateBookmarksOut.pdf")
            </code>
      </example>
    </member>
    <!-- 对于成员“M:Aspose.Pdf.Kit.PdfContentEditor.ExportAnnotationsXfdf(System.IO.Stream,System.Int32,System.Int32,System.Enum[])”忽略有格式错误的 XML 注释 -->
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ExtractAnnotations(System.Int32,System.Int32,System.Enum[])">
      <summary>
             Extracts the content of the  annotations specified type from the pdf,
             it will return at most 5 annotations when using evaluating version.
             </summary>
      <param name="start">The start page from which annotations of a pdf document is exported.</param>
      <param name="end">The end page that annotations of a pdf document is exported.</param>
      <param name="annotType">The array of annotation types need be exported, 
             such as "Text","Highlight", "Squiggly", "StrikeOut", "Underline","FreeText","Line","Square","Circle","Polygon",
             "PolyLine","Caret","Stamp","Ink",these values can be getted for AnnotationType class.</param>
      <returns>Annotations arrayList.</returns>
      <example>
        <code>
             [C#]
             PdfContentEditor editor = new PdfContentEditor();
             string TestPath = @"E:\pdfkit\";
             editor.BindPdf(TestPath + "PdfContentEditor.ExtractAnnotations.in.pdf");
             Enum [] annotType={AnnotationType.HightLight,AnnotationType.Stamp};
             ArrayList annotList=editor.ExtractAnnotations(1,2,annotType);
            	for(int i=0;i&lt;annotList.Count;i++)
            	{
                       Hashtable currentNode = (Hashtable)annotList[i];
                       Aspose.Pdf.Kit.Annotation annot = new Annotation(currentNode);
                       Console.WriteLine(annot.AnnotationColor);
                       Console.WriteLine(annot.AnnotationType);
                       Console.WriteLine(annot.Contents);
                       Console.WriteLine( annot.ContentsRichtext);
                       Console.WriteLine( annot.Coordinates);
                       Console.WriteLine(annot.CreatetionDate);
                       Console.WriteLine( annot.BorderDashes);
                       Console.WriteLine( annot.Date);
                       Console.WriteLine(annot.Line_End);
                       Console.WriteLine(annot.Flags);
                       Console.WriteLine(annot.Line_Head_Shape);
                       Console.WriteLine( annot.Icon);
                       Console.WriteLine(annot.InteriorColor);
                       Console.WriteLine(annot.Justification);
                       Console.WriteLine( annot.Opacity);
                       Console.WriteLine(annot.Open);
                       Console.WriteLine(annot.Page);
                       Console.WriteLine(annot.Rectangle);
                       Console.WriteLine(annot.Line_Start);
                       Console.WriteLine(annot.BorderStyle);
                       Console.WriteLine(annot.Subject);
                       Console.WriteLine(annot.Subtype);
                       Console.WriteLine(annot.Line_Tail_Shape);
                       Console.WriteLine( annot.BorderWidth);
            }
             [Visual Basic]
             Dim editor As PdfContentEditor =  New PdfContentEditor()
             Dim TestPath As String = @"E:\pdfkit\"
             editor.BindPdf(TestPath + "PdfContentEditor.ExtractAnnotations.in.pdf")
             Dim annotType as Enum
             annoType=Array(AnnotationType.HightLight,AnnotationType.Stamp)
             Dim annotList As ArrayList =editor.ExtractAnnotations(1,2,annotType)
            	for(int i=0;i&lt;annotList.Count;i++)
            	{
            		 Dim currentNode As Hashtable=(Hashtable)annotList[i]
                       Aspose.Pdf.Kit.Annotation annot = new Annotation(currentNode);
                       Console.WriteLine(annot.AnnotationColor);
                       Console.WriteLine(annot.AnnotationType);
                       Console.WriteLine(annot.Contents);
                       Console.WriteLine( annot.ContentsRichtext);
                       Console.WriteLine( annot.Coordinates);
                       Console.WriteLine(annot.CreatetionDate);
                       Console.WriteLine( annot.BorderDashes);
                       Console.WriteLine( annot.Date);
                       Console.WriteLine(annot.Line_End);
                       Console.WriteLine(annot.Flags);
                       Console.WriteLine(annot.Line_Head_Shape);
                       Console.WriteLine( annot.Icon);
                       Console.WriteLine(annot.InteriorColor);
                       Console.WriteLine(annot.Justification);
                       Console.WriteLine( annot.Opacity);
                       Console.WriteLine(annot.Open);
                       Console.WriteLine(annot.Page);
                       Console.WriteLine(annot.Rectangle);
                       Console.WriteLine(annot.Line_Start);
                       Console.WriteLine(annot.BorderStyle);
                       Console.WriteLine(annot.Subject);
                       Console.WriteLine(annot.Subtype);
                       Console.WriteLine(annot.Line_Tail_Shape);
                       Console.WriteLine( annot.BorderWidth);
            }
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateFileAttachment(System.Drawing.Rectangle,System.String,System.IO.FileStream,System.String,System.Int32,System.String)">
      <summary>
            Creates a file attachment annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="attachmentStream">The attachment file stream.</param>
      <param name="attachmentName">The full attachment'name.  </param>
      <param name="page">The  page in which the  FileAttachment annotation is created.</param>
      <param name="name">The name of an icon to be used in displaying the annotation,include:Graph,PushPin,Paperclip,Tag</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            FileStream attStream = new System.IO.FileStream(KitTestPath + "example1_1.pdf", System.IO.FileMode.Open, System.IO.FileAccess.Read);
            editor.CreateFileAttachment(rect,"welcome to aspose!",attStream,"example1_1.pdf",1,"Graph");
            editor.Save(KitTestOut+"example1_application.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            Dim attStream as FileStream = new System.IO.FileStream(KitTestPath + "example1_1.pdf", System.IO.FileMode.Open, System.IO.FileAccess.Read);
            editor.CreateFileAttachment(rect,"welcome to aspose!",attStream,"example1_1.pdf",1,"Graph")
            editor.Save(KitTestOut+"example1_application.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateRubberStamp(System.Int32,System.Drawing.Rectangle,System.String,System.Drawing.Color,System.String)">
      <summary>
            Creates a  rubber stamp annotation with the specified appearance file.
            </summary>
      <param name="page">The  page in which the  caret annotation is created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <param name="color">The color of annotation.</param>
      <param name="appearanceFile">The appearance file.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect1=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color clr=Color.FromArgb(255,255,0,10);
            editor.CreateRubberStamp(1,rect1,"ok!",clr,KitTestPath+"test.jpg");
            editor.Save(TestPath+"PdfContentEditor.CreateRubberStamp.out.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect1 As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            System.Drawing.Color clr=Color.FromArgb(255,255,0,10)
            editor.CreateRubberStamp(1,rect1,"ok!",clr,KitTestPath+"test.jpg")
            editor.Save(KitTestOut+"PdfContentEditor.CreateRubberStamp.out.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateRubberStamp(System.Int32,System.Drawing.Rectangle,System.String,System.Drawing.Color,System.IO.Stream)">
      <summary>
            Creates a  rubber stamp annotation with the specified appearance stream.
            </summary>
      <param name="page">The  page in which the  caret annotation is created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <param name="color">The color of annotation.</param>
      <param name="appearanceStream">The specified appearance stream.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect1=new System.Drawing.Rectangle(50,50,100,100);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color clr=Color.FromArgb(255,255,0,10);
            Stream appStream=new FileStream(KitTestPath+"test.jpg", System.IO.FileMode.Open, System.IO.FileAccess.Read);
            editor.CreateRubberStamp(1,rect1,"ok!",clr,appStream);
            editor.Save(TestPath+"PdfContentEditor.CreateRubberStamp.out.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect1 As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            System.Drawing.Color clr=Color.FromArgb(255,255,0,10)
            Dim appStream=new FileStream(KitTestPath+"test.jpg", System.IO.FileMode.Open, System.IO.FileAccess.Read)
            editor.editor.CreateRubberStamp(1,rect1,"ok!",clr,appStream)
            editor.Save(KitTestOut+"PdfContentEditor.CreateRubberStamp.out.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateCustomActionLink(System.Drawing.Rectangle,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a Link with a serial actions corresponding to execute a menu item in Acrobat viewer.
            </summary>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="originalPage">The original page in which the  link is created.</param>
      <param name="clr">The color of Rectangle.</param>
      <param name="actionName">The action name with a serial actions corresponding to execute a menu item in Acrobat viewer,
            the value can be found in AdobeMenuActionName class.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,0,255);
             Enum []actionName=new Enum[2]{AdobeMenuActionName.Document_AttachFile,AdobeMenuActionName.Document_ExtractPages};
            editor. CreateCustomActionLink(rect,KitTestPath +"example1_document.pdf",2,3,c,actionName);
            editor.Save(KitTestOut+"example1_pageofdocument.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            System.Drawing.Color c=Color.FromArgb(255,0,255)
            Dim actionName(1) As Enum
            actionName[0]=AdobeMenuActionName.Document_AttachFile
            actionName[1]=AdobeMenuActionName.Document_ExtractPages
            editor. CreateCustomActionLink(rect,KitTestPath +"example1_document.pdf",2,3,c,actionName)
            editor.Save(KitTestOut+"example1_pageofdocument.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.CreateJavaScriptLink(System.String,System.Drawing.Rectangle,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a link for excuting JavaScript.
            </summary>
      <param name="code">The JavaScript code.</param>
      <param name="rect">The specified rectangle for active click.</param>
      <param name="originalPage">The original page in which the  link is created.</param>
      <param name="color">The color of Rectangle.</param>
      <example>
        <code>
            [C#]      
            PdfContentEditor editor = new PdfContentEditor();
            string KitTestPath = @"F:\pdfkit\";
            string KitTestOut = @"F:\pdfkit\";
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100,20,20);
            editor.BindPdf(KitTestPath + "example1.pdf");
            System.Drawing.Color c=Color.FromArgb(255,0,255);
            editor.CreateJavaScriptLink("app.alert('welcome to aspose!');",rect, 1, c);
            editor.Save(KitTestOut+"example1_JavaScriptLink.pdf");
            [Visual Basic]
            Dim editor As PdfContentEditor =  New PdfContentEditor()
            Dim rect As System.Drawing.Rectangle=New System.Drawing.Rectangle(100,100,20,20)
            Dim KitTestPath As String ="F:\pdfkit\"
            Dim KitTestOut As String ="F:\pdfkit\"
            editor.BindPdf(KitTestPath + "example1.pdf")
            System.Drawing.Color c=Color.FromArgb(255,0,255)
            editor.CreateJavaScriptLink("app.alert('welcome to aspose!');",rect, 1, c)
            editor.Save(KitTestOut+"example1_JavaScriptLink.pdf")
            </code>
      </example>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.DocumentOpen">
      <summary>
            A document event type; Opens a document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.DocumentClose">
      <summary>
            A document event type; Closes a document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.DocumentWillSave">
      <summary>
            A document event type; Excute a action before saving.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.DocumentSaved">
      <summary>
            A document event type; Excute a action after saving.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.DocumentWillPrint">
      <summary>
            A document event type; Excute a action before printing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfContentEditor.DocumentPrinted">
      <summary>
            A document event type; Excute a action after printing.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.AddDocumentAdditianalAction(System.String,System.String)">
      <summary>
            Adds additional action for document event.
            </summary>
      <param name="eventType">The document event types include:DOCUMENT_OPEN ,DOCUMENT_OPEN ,WILL_SAVE,DID_SAVE,WILL_PRINT,DID_PRINT defined in PdfContentEditor.</param>
      <param name="code">The code of javascript.</param>
      <example>
        <code>
            [C#]      
               PdfContentEditor editor = new PdfContentEditor();
               string path = TestPath + "example1.pdf";
               string outpath = TestPath + "PdfDocument_CreateJavaScriptAction_out.pdf";
               editor.BindPdf(path);
               editor.AddDocumentAdditianalAction(PdfContentEditor.DOCUMENT_CLOSE,"app.alert('Thank you for reading this document.');\r");
               editor.Save(outpath);
            [Visual Basic]
               Dim editor As PdfContentEditor =  New PdfContentEditor()  
               Dim path As String = TestPath + "example1.pdf"
                Dim outpath As String= TestPath + "PdfDocument_CreateJavaScriptAction_out.pdf"
               editor.BindPdf(path);
               editor.AddDocumentAdditianalAction(PdfContentEditor.DOCUMENT_CLOSE,"app.alert('Thank you for reading this document.');\r")
               editor.Save(outpath)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ChangeViewerPreference(System.Int32)">
      <summary>
            Changes the view preference,, if multi view types need be modified, only invoke this method repeatly.
            </summary>
      <param name="viewerAttribution"> The view attribution defined in the ViewerPreference class.</param>
      <example>
        <code>
            [C#]      
               PdfContentEditor editor = new PdfContentEditor();
               string path = TestPath + "example1.pdf";
               string outpath = TestPath + "PdfDocument_ChangeViewerPerference_out.pdf";
               editor.BindPdf(path);
                editor.ChangeViewerPreference(ViewerPreference.CenterWindow);
              editor.ChangeViewerPreference(ViewerPreference.HideMenubar);
              editor.ChangeViewerPreference(ViewerPreference.PageModeUseNone);
               editor.Save(outpath);
            [Visual Basic]
               Dim editor As PdfContentEditor =  New PdfContentEditor()  
               Dim path As String = TestPath + "example1.pdf"
               Dim outpath As String= TestPath + "PdfDocument_ChangeViewerPerference_out.pdf"
               editor.BindPdf(path);
               editor.ChangeViewerPreference(ViewerPreference.CenterWindow)
               editor.ChangeViewerPreference(ViewerPreference.HideMenubar)
               editor.ChangeViewerPreference(ViewerPreference.PageModeUseNone)
               editor.Save(outpath)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ReplaceImage(System.Int32,System.Int32,System.String)">
      <summary>
        <BLOCKQUOTE class="dtBlock">
          <Font color="red">NOTE: This is Beta version of ReplaceImage. The interface may be changed or
            moved into other classes.</Font>
        </BLOCKQUOTE> 
            Replaces a image object in the specified page of a pdf document with the specified image file,
            the supported image file include bmp,jpg and png.
            </summary>
      <param name="pageNumber">The page number on which a image object is replaced.</param>
      <param name="index">The index-th image object to be replaced.</param>
      <param name="imageFile">The image file to be used for replacing a image object.</param>
      <example>
        <code>
            [C#]      
               PdfContentEditor editor = new PdfContentEditor();
               string path = TestPath + "example1.pdf";
               editor.BindPdf(path);
               editor.ReplaceImage(1, 1, TestPath + "image.jpg");
               editor.Save(TestPath +  TestPath +"image_replace_out.pdf");
            [Visual Basic]
               Dim editor As PdfContentEditor =  New PdfContentEditor()  
               Dim path As String = TestPath + "example1.pdf"
               editor.BindPdf(path)
               editor.ReplaceImage(1, 1, TestPath + "image.jpg")
               editor.Save(TestPath +  TestPath +"image_replace_out.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.DeleteImage(System.Int32,System.Int32[])">
      <summary>
        <BLOCKQUOTE class="dtBlock">
          <Font color="red">NOTE: This is Beta version of DeleteImage. The interface may be changed or
            moved into other classes.</Font>
        </BLOCKQUOTE> 
            Deletes the specified image objects  on the specified page number. 
            </summary>
      <param name="pageNumber">The page number on which  image objects are deleted.</param>
      <param name="index">An array repsents the index of image objects. </param>
      <example>
        <code>
            [C#]      
               PdfContentEditor editor = new PdfContentEditor();
               string path = TestPath + "example1.pdf";
               editor.BindPdf(path);
               int []index=new int[2]{1,2};
               editor.DeleteImage(1,index);
               editor.Save(TestPath + "delete_out.pdf");
            [Visual Basic]
               Dim editor As PdfContentEditor =  New PdfContentEditor()  
               Dim path As String = TestPath + "example1.pdf"
               editor.BindPdf(path)
               int [] index=Array(1,2)
               editor.DeleteImage(1,index)
               editor.Save(TestPath + "delete_out.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.DeleteImage">
      <summary>
            Deletes all the image objects.
            </summary>
      <example>
        <code>
            [C#]      
               PdfContentEditor editor = new PdfContentEditor();
               string path = TestPath + "example1.pdf";
               editor.BindPdf(path);
               editor.DeleteImage();
               editor.Save(TestPath + "delete_out.pdf");
            [Visual Basic]
               Dim editor As PdfContentEditor =  New PdfContentEditor()  
               Dim path As String = TestPath + "example1.pdf"
               editor.BindPdf(path)
               editor.DeleteImage()
               editor.Save(TestPath + "delete_out.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ModifyAnnotations(System.Int32,System.Int32,System.Enum,Aspose.Pdf.Kit.Annotation)">
      <summary>
        <BLOCKQUOTE class="dtBlock">
          <Font color="red">NOTE: This is Beta version of ModifyAnnotations. We will perfect the feature in near future
            and the interface may be changed or moved into other classes.</Font>
        </BLOCKQUOTE> 
            Modifies the annotations of the specifed type, it support to modify the date,the author,the subject,the color and the open flag.
            </summary>
      <param name="start">The start page number.</param>
      <param name="end">The end page number.</param>
      <param name="annotType">The annotation type according to which to modify annotations.</param>
      <param name="annotation">The Annoation object contains the content to be modified.</param>
      <example>
        <code>
             [C#] 
                string inFile = TestPath + @"annotation\Annot-test.pdf";
                PdfContentEditor pCE = new PdfContentEditor();
                pCE.BindPdf(inFile);
                Aspose.Pdf.Kit.Annotation annot = new Aspose.Pdf.Kit.Annotation();
                annot.Subject = "Audit";
                annot.ModifiedDate = "20081026";
                annot.Author = "Allen";
                annot.AnnotationColor = Aspose.Pdf.Kit.Annotation.ConverrColorToString(255, 0, 255);
                annot.Open = true;
                pCE.ModifyAnnotations(1, 1, AnnotationType.Text,annot);
                pCE.Save(TestPath + @"annotation\Annot-test_modified.pdf");
            [Visual Basic]
                Dim inFile As String = TestPath + @"annotation\Annot-test.pdf"
                Dim pCE As PdfContentEditor=new PdfContentEditor()
                pCE.BindPdf(inFile)
                Dim annot As Aspose.Pdf.Kit.Annotation  = new Aspose.Pdf.Kit.Annotation()
                annot.Subject = "Audit"
                annot.ModifiedDate = "20081026"
                annot.Author = "Allen";
                annot.AnnotationColor = Aspose.Pdf.Kit.Annotation.ConverrColorToString(255, 0, 255);
                annot.Open = true     
                pCE.ModifyAnnotations(1, 1, AnnotationType.Text,annot)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.ModifyAnnotationsAuthor(System.Int32,System.Int32,System.String,System.String)">
      <summary>
        <BLOCKQUOTE class="dtBlock">
          <Font color="red">NOTE: This is Beta version of ModifyAnnotationsAuthor. The interface may be changed or
            moved into other classes.</Font>
        </BLOCKQUOTE> 
            Modifies the author of annotations according to the specified author.
            </summary>
      <param name="start">The start page number.</param>
      <param name="end">The end page number.</param>
      <param name="srcAuthor">The source author.</param>
      <param name="desAuthor">The new author.</param>
      <example>
        <code>
             [C#] 
                string inFile = TestPath + @"annotation\Annot-test.pdf";
                PdfContentEditor pCE = new PdfContentEditor();
                pCE.BindPdf(inFile);
                pCE.ModifyAnnotationsAuthor(1, 2,"Felix","Allen");
                pCE.Save(TestPath + @"annotation\Annot-test_modified.pdf");
            [Visual Basic]
                Dim inFile As String = TestPath + @"annotation\Annot-test.pdf"
                Dim pCE As PdfContentEditor=new PdfContentEditor()
                pCE.BindPdf(inFile)  
                pCE.ModifyAnnotationsAuthor(1, 2,"Felix","Allen")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.AddDocumentAttachment(System.String,System.String)">
      <summary>
            Adds document attachments with no annotion.
            </summary>
      <param name="fileAttachmentPath">The  path of file attachment.</param>
      <param name="description">The description information.</param>
      <example>
        <code>
             [C#] 
                string inFile = TestPath + @"attachment\example1.pdf";
                PdfContentEditor pCE = new PdfContentEditor();
                pCE.BindPdf(inFile);
                pce.AddDocumentAttachment(TestPath + @"attachment\att.pdf", "aspose");
                pCE.Save(TestPath + @"attachment\out.pdf");
            [Visual Basic]
                Dim inFile As String = TestPath + @"attachment\example1.pdf"
                Dim pCE As PdfContentEditor=new PdfContentEditor()
                pCE.BindPdf(inFile)  
                pCE.AddDocumentAttachment(TestPath + @"attachment\att.pdf", "aspose")
                pCE.Save(TestPath + @"attachment\out.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfContentEditor.AddDocumentAttachment(System.IO.Stream,System.String,System.String)">
      <summary>
            Adds document attachments with no annotion.
            </summary>
      <param name="fileAttachmentStream">The  stream of file attachment.</param>
      <param name="fileAttachmentName">The name of file attacment,the value cann't be null.</param>
      <param name="description">The description information.</param>
      <example>
        <code>
             [C#] 
                string inFile = TestPath + @"attachment\example1.pdf";
                PdfContentEditor pCE = new PdfContentEditor();
                pCE.BindPdf(inFile);
                 pce.AddDocumentAttachment(new FileStream(TestPath + @"attachment\att.pdf", FileMode.Open), "att.pdf", "aspose");
                pCE.Save(TestPath + @"attachment\out.pdf");
            [Visual Basic]
                Dim inFile As String = TestPath + @"attachment\example1.pdf"
                Dim pCE As PdfContentEditor=new PdfContentEditor()
                pCE.BindPdf(inFile)  
                pCE.AddDocumentAttachment(new FileStream(TestPath + @"attachment\att.pdf", FileMode.Open), "att.pdf", "aspose")
                pCE.Save(TestPath + @"attachment\out.pdf")
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfContentEditor.KeepSecurity">
      <summary>
            Keeps the security if ture.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfContentEditor.AnnotationFlag">
      <summary>
            Sets or gets the various characteristics of the annotation,
            the flag value can be Annotation_Invisible,Annotation_Hidden,
             Annotation_Print,Annotation_NoZoom,Annotation_NoRotate
             Annotation_NoView,Annotation_Readonly,Annotation_Locked,
             Annotation_ToggleNoView.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfConverter">
      <summary>
        <BLOCKQUOTE class="dtBlock">
          <Font color="red">NOTE: This is Beta version of PdfConverter. 
            And we may be not able to improve its performance in short time.</Font>
        </BLOCKQUOTE> 
            Represents a class to convert a pdf file's each page to images, supporting BMP, JPEG, PNG and TIFF now.
            Supported content in pdfs: pictures, form, comment.
            Picture quality: not very clear, but it is enough to support the fax.
            Conversion rate: one page 2 seconds.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.#ctor">
      <summary> 
            The constructor of the PdfConverter object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.BindPdf(System.String)">
      <summary>
            Binds a Pdf file for converting. see also:<see cref="M:Aspose.Pdf.Kit.PdfConverter.DoConvert" /></summary>
      <param name="inputFile">The pdf file.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.BindPdf(System.IO.Stream)">
      <summary>
            Binds a Pdf Stream for convert. see also:<see cref="M:Aspose.Pdf.Kit.PdfConverter.DoConvert" /></summary>
      <param name="inputStream">The pdf Stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.DoConvert">
      <summary>
            Do some initial works for converting a pdf document to images.
            </summary>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".jpg";
            int imageCount = 1;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".jpg" 
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.SaveAsTIFF(System.String)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF file.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            converter.SaveAsTIFF(@"D:\Test\test.tiff");	
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            converter.SaveAsTIFF(@"D:\Test\test.tiff")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.SavaAsTIFF(System.String)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF file.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.SaveAsTIFF(System.String,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images with X,Y resolutions, and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="resolutionX">The page width resolution</param>
      <param name="resolutionY">The page height resolution</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.SavaAsTIFF(System.String,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images with X,Y resolutions, and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="resolutionX">The page width resolution</param>
      <param name="resolutionY">The page height resolution</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.SaveAsTIFFClassF(System.String,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="resolutionX">The page width resolution.</param>
      <param name="resolutionY">The page height resolution.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            converter.SaveAsTIFFClassF(@"D:\Test\test.tiff",204,196);	
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            converter.SaveAsTIFFClassF(@"D:\Test\test.tiff",204,196)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.SavaAsTIFFClassF(System.String,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="resolutionX">The page width resolution.</param>
      <param name="resolutionY">The page height resolution.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.SaveAsTIFFClassF(System.IO.Stream,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="resolutionX">The page width resolution.</param>
      <param name="resolutionY">The page height resolution.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.SavaAsTIFFClassF(System.IO.Stream,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="resolutionX">The page width resolution.</param>
      <param name="resolutionY">The page height resolution.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.SaveAsTIFF(System.IO.Stream)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.SavaAsTIFF(System.IO.Stream)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.SaveAsTIFF(System.IO.Stream,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images with X,Y resolutions, and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="resolutionX">The page width resolution.</param>
      <param name="resolutionY">The page height resolution.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.SavaAsTIFF(System.IO.Stream,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images with X,Y resolutions, and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="resolutionX">The page width resolution.</param>
      <param name="resolutionY">The page height resolution.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.GetNextImage(System.String)">
      <summary>
            Saves image to file with default image format - jpeg. see also:<see cref="M:Aspose.Pdf.Kit.PdfConverter.DoConvert" /></summary>
      <param name="outputFile">The file path and name to save the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.GetNextImage(System.IO.Stream)">
      <summary>
            Saves image to stream with default image format - jpeg. see also:<see cref="M:Aspose.Pdf.Kit.PdfConverter.DoConvert" /></summary>
      <param name="outputStream">The stream to save the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image to file with the givin image format. see also:<see cref="M:Aspose.Pdf.Kit.PdfConverter.DoConvert" /></summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".png";
            int imageCount = 1;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Png);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".png" 
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Png)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image to stream with the givin image format. see also:<see cref="M:Aspose.Pdf.Kit.PdfConverter.GetNextImage(System.String)" /></summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves image to file with the givin image format, resolution and quality.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="resolutionX">The page width resolution.</param>
      <param name="resolutionY">The page height resolution.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".jpg";
            int imageCount = 1;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 72, 72, 50);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".jpg" 
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 72, 72, 50)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves image to stream with the givin image format, resolution and quality.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="resolutionX">The page width resolution.</param>
      <param name="resolutionY">The page height resolution.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat,System.Single,System.Single,System.Int32)">
      <summary>
            Saves image to file with the givin image format, image size,  and quality.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixels.</param>
      <param name="imageHeight">The image height, the unit is pixels..</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".jpg";
            int imageCount = 1;
            float pixelX=800f;
            float pixelY=600f;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, pixelX, pixelY, 50);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".jpg" 
            Dim pixelX As float =800
            Dim pixelY As float=600
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, pixelX, pixelY, 50)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Single,System.Single,System.Int32)">
      <summary>
            Saves image to stream with the givin image format, size and quality.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.HasNextImage">
      <summary>
            Indicates whether the pdf file has more images or not.see also:<see cref="M:Aspose.Pdf.Kit.PdfConverter.DoConvert" /></summary>
      <returns>Can get more images or not,true is can, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfConverter.Close">
      <summary>
             close the instance of PdfConverter and release the resources.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfConverter.Resolution">
      <summary>
            Gets or sets resolution during convertting. The higher resolution, the slower convertting speed. The default value is 150.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfConverter.StartPage">
      <summary>
            Gets or sets start position which you want to convert. The minimal value is 1. see also:<see cref="M:Aspose.Pdf.Kit.PdfConverter.DoConvert" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfConverter.EndPage">
      <summary>
            Gets or sets end position which you want to convert. see also:<see cref="M:Aspose.Pdf.Kit.PdfConverter.DoConvert" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfConverter.TiffBulkFlag">
      <summary>
            Gets or sets the flag using which you can convert the pdf file into tiff  by bulk. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfConverter.Password">
      <summary>
            Gets and sets input file's OwnerPassword. see also:<see cref="M:Aspose.Pdf.Kit.PdfConverter.DoConvert" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfConverter.UserPassword">
      <summary>
            Gets and sets input file's UserPassword. see also:<see cref="M:Aspose.Pdf.Kit.PdfConverter.DoConvert" /></summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfExtractor">
      <summary>
        <BLOCKQUOTE class="dtBlock">
          <Font color="red">NOTE: This is Beta version of PdfExtractor. Some features may not be 
            supported well and we may be not able to fix them in short time.</Font>
        </BLOCKQUOTE> 
            Represents a class for extracting images and text from pdf file.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.#ctor">
      <summary>
            The constructor of the PdfExtractor object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.BindPdf(System.String)">
      <summary>
            Binds an Pdf file for extractor. see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractImage" />  , <see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractText" /></summary>
      <param name="inputFile">The pdf file.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.BindPdf(System.IO.Stream)">
      <summary>
            Binds an Pdf Stream for extractor. see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractImage" />  ,  <see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractText" /></summary>
      <param name="inputStream">The pdf Stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.ExtractImage">
      <summary>
            Extracts images from a Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(@"D:\Test\Images.pdf");
            extractor.StartPage = 1;
            extractor.EndPage = 2;
            extractor.ExtractImage();
            String prefix = @"D:\Test\Image";
            String suffix = ".jpg";
            int imageCount = 1;
            while (extractor.HasNextImage())
            {
            	extractor.GetNextImage(prefix + imageCount + suffix);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf("D:\Test\Images.pdf")
            extractor.StartPage = 1
            extractor.EndPage = 2
            extractor.ExtractImage()
            Dim prefix As String =  "D:\Test\Image" 
            Dim suffix As String =  ".jpg" 
            Dim imageCount As Integer =  1 
            While extractor.HasNextImage()
            	extractor.GetNextImage(prefix + imageCount + suffix)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetNextImage(System.String)">
      <summary>
            Saves image to file. The default image format is .jpeg. see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractImage" /></summary>
      <param name="outputFile">The file path and name to save the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetNextImage(System.IO.Stream)">
      <summary>
            Saves image to stream. The default image format is jpeg. see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractImage" /></summary>
      <param name="outputStream">The stream to save the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image to file with the givin image format. see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractImage" /></summary>
      <param name="format">The image format of the extracted image.</param>
      <param name="outputFile">The file path and name to save the image.</param>
      <example>
        <code>
            [C#]
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(@"D:\Test\Images.pdf");
            extractor.StartPage = 1;
            extractor.EndPage = 2;
            extractor.ExtractImage();
            String prefix = @"D:\Test\Image";
            String suffix = ".bmp";
            int imageCount = 1;
            while (extractor.HasNextImage())
            {
            	extractor.GetNextImage(prefix + imageCount + suffix, ImageFormat.Bmp);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf("D:\Test\Images.pdf")
            extractor.StartPage = 1
            extractor.EndPage = 2
            extractor.ExtractImage()
            Dim prefix As String =  "D:\Test\Image" 
            Dim suffix As String =  ".bmp" 
            Dim imageCount As Integer =  1 
            While extractor.HasNextImage()
            	extractor.GetNextImage(prefix + imageCount + suffix, ImageFormat.Bmp)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image to stream with the givin image format. see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.GetNextImage(System.String)" /></summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The image format of the extracted image.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.HasNextImage">
      <summary>
            Indicates that whether can get more images or not.see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractImage" /></summary>
      <returns>Can get more images or not,true is can, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.ExtractText">
      <summary>
            Extracts text from a Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            //example 1: Extracts all the text from PDF file
            PdfExtractor extractor = new PdfExtractor();
            extractor.Password = "";
            extractor.BindPdf(@"D:\Text\text.pdf");
            extractor.ExtractText();
            extractor.GetText(@"D:\Text\text.txt");
            
            //example 2: Extracts each page's text into one txt file
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
            extractor.ExtractText();
            String prefix = TestPath + @"Aspose.Pdf.Kit";
            String suffix = ".txt";
            int pageCount = 1;
            while (extractor.HasNextPageText())
            {
                extractor.GetNextPageText(prefix + pageCount + suffix);
                pageCount++;
            }
            
            [Visual Basic]
            'example 1: Extracts all the text from PDF file
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.Password = ""
            extractor.BindPdf("D:\Text\text.pdf")
            extractor.ExtractText()
            extractor.GetText("D:\Text\text.txt")
            		
            'example 2: Extracts each page's text into one txt file
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
            extractor.ExtractText()
            Dim prefix As String =  TestPath + "Aspose.Pdf.Kit" 
            Dim suffix As String =  ".txt" 
            Dim pageCount As Integer =  1 
            While extractor.HasNextPageText()
                extractor.GetNextPageText(prefix + pageCount + suffix)
                pageCount = pageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetText(System.String)">
      <summary>
            Saves text to file. see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractText" /></summary>
      <param name="outputFile">The file path and name to save the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetText(System.IO.Stream)">
      <summary>
            Saves text to stream. see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractText" /></summary>
      <param name="outputStream">The stream to save the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetWordCount">
      <summary>
            Returns the word count of the pdf document.
            </summary>
      <returns>the word count</returns>
      <example>
        <code>
            [C#]
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(@"D:\Text\text.pdf");
            extractor.ExtractText();
            int wordCount = extractor.GetWordCount();
            
            [Visual Basic]
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf("D:\Text\text.pdf")
            extractor.ExtractText()
            Dim wordCount As Integer =  extractor.GetWordCount()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.ExtractAttachment">
      <summary>
            Extracts attachments from a Pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.ExtractAttachment(System.String)">
      <summary>
            Extracts a attachment according to the specified file name from a Pdf document,
            if the attachment files name are same, it only save a file.
            </summary>
      <param name="attachmentFileName">the file name of attachment. </param>
      <example>
        <code>
            [C#]
            PdfExtractor extractor = new PdfExtractor();     
            extractor.BindPdf(path + "Attach.pdf");
            extractor.ExtractAttachment("example1.pdf");
            extractor.GetAttachment(path);
            
            [Visual Basic]
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf(path + "Attach.pdf")
            extractor.ExtractAttachment("example1.pdf")
            extractor.GetAttachment(path)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetAttachment(System.String)">
      <summary>
            Saves all the attachment file to outputPath.
            </summary>
      <param name="outputPath">The path to save the attachment.</param>
      <example>
        <code>
            [C#]
            PdfExtractor extractor = new PdfExtractor();     
            extractor.BindPdf(path + "Attach.pdf");
            extractor.ExtractAttachment();
            extractor.GetAttachment(path);
            
            [Visual Basic]
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf(path + "Attach.pdf")
            extractor.ExtractAttachment()
            extractor.GetAttachment(path)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetAttachment">
      <summary>
            Saves all the attachment file to streams.
            </summary>
      <returns>The stream array of the attachment file in the pdf document.</returns>
      <example>
        <code>
            [C#]
            PdfExtractor extractor = new PdfExtractor();     
            extractor.BindPdf(path + "Attach.pdf");
            extractor.ExtractAttachment();
            ArrayList names = extractor.GetAttachNames();
            MemoryStream[] tempStreams =  extractor.GetAttachment();
            for (int i=0; i&lt;tempStreams.Length; i++)
            {
            	string name = (string)names[i];
            	FileStream fs = new FileStream(path + name,System.IO.FileMode.Create);
            	byte[] tempBytes = new byte[4096];
            	tempStreams[i].Position = 0;
            
            	for (; ; )
            	{
            		int numOfBytes = tempStreams[i].Read(tempBytes, 0, 4096);
            		if (numOfBytes &lt; 1)
            		break;
            		fs.Write(tempBytes, 0, numOfBytes);
            	}
            	fs.Close();
            }
            
            [Visual Basic]
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf(path + "Attach.pdf")
            extractor.ExtractAttachment()
            extractor.GetAttachment(path)
            Dim names As ArrayList =  extractor.GetAttachNames() 
            Dim tempStreams() As MemoryStream =  extractor.GetAttachment() 
            for(Integer i = 0 i&lt;tempStreams.Length i++)
            {
            	Dim name As String = CType(names(i), String)
            	Dim fs As FileStream =  New FileStream(path + name,System.IO.FileMode.Create) 
            	Dim tempBytes() As Byte =  New Byte(4096) {} 
            	tempStreams(i).Position = 0
            
            	for()
            	{
            		Dim numOfBytes As Integer =  tempStreams(i).Read(tempBytes,0,4096) 
            		If numOfBytes &lt; 1 Then
            			break
            		End If
            		fs.Write(tempBytes, 0, numOfBytes)
            	}
            	fs.Close()
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetAttachNames">
      <summary>
            Gets all the attachment file's filename.
            </summary>
      <returns>attachment's file names.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetNextPageText(System.String)">
      <summary>
            Saves one page's text to file. see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractText" /></summary>
      <param name="outputFile">The file path and name to save the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetNextPageText(System.IO.Stream)">
      <summary>
            Saves one page's text to stream. see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractText" /></summary>
      <param name="outputStream">The stream to save the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.HasNextPageText">
      <summary>
            Indicates that whether can get more texts or not.see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractText" /></summary>
      <returns>Can get more texts or not,true is can, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfExtractor.GetAttachmentInfo">
      <summary>
            Gets the information of attachments.
            </summary>
      <returns> Returns an ArrayList.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfExtractor.StartPage">
      <summary>
            Gets or sets start position which you want to extract of the pdf file. see also: <see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractImage" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfExtractor.EndPage">
      <summary>
            Gets or sets end position which you want to extract of the pdf file. see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractImage" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfExtractor.Password">
      <summary>
            Gets and sets input file's password. see also:<see cref="M:Aspose.Pdf.Kit.PdfExtractor.ExtractText" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfExtractor.ExtractTextMode">
      <summary>
            Sets the mode for extract text's result. 0 is pure text mode and 1 is raw ordering mode. Default is 0.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfFileEditor">
      <summary>
            Represents manipulating of existing Pdf file,includes concatenating Pdf files, inserting pages, extracting pages, splitting pages, appending pages, making N-Up, making booklet.
            Concatenating Pdf files, inserting pages, extracting pages, splitting pages, appending pages. Making N-Up, making booklet don't support for AcroForm.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.#ctor">
      <summary>
            PdfFileEditor constructor.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Concatenate(System.String,System.String,System.String)">
      <summary>
            Merges two Pdf documents into a new Pdf document.
            </summary>
      <param name="firstInputFile">The first Pdf document.</param>
      <param name="secInputFile">The second Pdf document.</param>
      <param name="outputFile">Output Pdf document.</param>
      <returns>True for success,or false.</returns>
      <example>
        <code>
            [C#]
            PdfFileEditor pdfEditor = new PdfFileEditor();
            pdfEditor.Concatenate("inFile1.pdf","inFile2.pdf","outFile.pdf");
            
            [Visual Basic]
            Dim pdfEditor As  PdfFileEditor = New PdfFileEditor()
            pdfEditor.Concatenate("inFile1.pdf","inFile2.pdf","outFile.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Concatenate(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
      <summary>
            Merges two Pdf documents into a new Pdf document.
            </summary>
      <param name="firstInputStream">The first Pdf Stream.</param>
      <param name="secInputStream">The second Pdf Stream.</param>
      <param name="outputStream">Output Pdf Stream.</param>
      <returns> True for success,or false.</returns>
      <example> The sapmple shows concatenating two Pdf files and adding watermark on the new Pdf file.
            <code>
            [C#]
            string inFile1 = "example1.pdf";
            string inFile2 = "example2.pdf";
            string outFile = "out.pdf";
            string imageFile = "imgLogoPDF.gif";
            FileStream inStream1 = new FileStream(inFile1,FileMode.Open);
            FileStream inStream2 = new FileStream(inFile2,FileMode.Open);
            FileStream outputStream = new FileStream(outFile,FileMode.Create);
            MemoryStream innerStream = new MemoryStream();
            
            //Concatnate input Pdf file1 and file2, output is saved in innerStream.
            PdfFileEditor editor = new PdfFileEditor(); 
            editor.Concatenate(inStream1,inStream2,innerStream);
            
            //Add watermark on new Pdf file.
            PdfFileStamp stamp = new PdfFileStamp(innerStream,outputStream); 
            stamp.AddWatermark(imageFile,10,10);
            outputStream.Close();
            innerStream.Close();
            
            [Visual Basic]
            Dim inFile1 As String =  "example1.pdf" 
            Dim inFile2 As String =  "example2.pdf" 
            Dim outFile As String =  "out.pdf" 
            Dim imageFile As String =  "imgLogoPDF.gif"
            Dim inStream1 As FileStream =  New FileStream(inFile1,FileMode.Open) 
            Dim inStream2 As FileStream =  New FileStream(inFile2,FileMode.Open) 
            Dim outputStream As FileStream =  New FileStream(outFile,FileMode.Create)
            Dim innerStream As MemoryStream =  New MemoryStream()
            
            'Concatnate input Pdf file1 and file2, output is saved in innerStream.
            Dim editor As PdfFileEditor =  New PdfFileEditor() 
            editor.Concatenate(inStream1,inStream2,innerStream)
            
            'Add watermark on new Pdf file.
            Dim stamp As PdfFileStamp =  New PdfFileStamp(innerStream,outputStream) 
            stamp.AddWatermark(imageFile,10,10)
            outputStream.Close()
            innerStream.Close()
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Concatenate(System.String[],System.String)">
      <summary>
            Merges multi Pdf files into a new file.
            </summary>
      <param name="inputFiles">Input Pdf files.</param>
      <param name="outputFile">Output Pdf file.</param>
      <returns>True for success,or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Concatenate(System.IO.Stream[],System.IO.Stream)">
      <summary>
            Merges multi-stream of Pdf into a new Pdf stream.
            </summary>
      <param name="inputStreams">Input Pdf streams.</param>
      <param name="outputStream">Output Pdf stream.</param>
      <returns>True for success,or false.</returns>
      <example>The sapmple shows concatenating multi-pdf stream.
            <code>
            [C#]
            FileStream inStream1 = new FileStream(".\\example1.pdf",FileMode.Open);
            FileStream inStream2 = new FileStream(".\\example2.pdf",FileMode.Open);
            FileStream inStream3 = new FileStream(".\\example3.pdf",FileMode.Open);
            FileStream inStream4 = new FileStream(".\\example4.pdf",FileMode.Open);
            FileStream outStream = new FileStream(".\\multiStream.pdf",FileMode.Create);
            Stream[] inStreams = new Stream[]{inStream1,inStream2,inStream3,inStream4};
            PdfFileEditor pdfEditor = new PdfFileEditor();
            pdfEditor.Concatenate(inStreams,outStream);
            outStream.Close();
            
            [Visual Basic]
            Dim inStream1 As FileStream =  New FileStream(".\\example1.pdf",FileMode.Open) 
            Dim inStream2 As FileStream =  New FileStream(".\\example2.pdf",FileMode.Open) 
            Dim inStream3 As FileStream =  New FileStream(".\\example3.pdf",FileMode.Open) 
            Dim inStream4 As FileStream =  New FileStream(".\\example4.pdf",FileMode.Open) 
            Dim outStream As FileStream =  New FileStream(".\\multiStream.pdf",FileMode.Create) 
            Dim inStreams() As Stream =  New Stream() {inStream1,inStream2,inStream3,inStream4}
            Dim pdfEditor As PdfFileEditor =  New PdfFileEditor() 
            pdfEditor.Concatenate(inStreams,outStream)
            outStream.Close()
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Concatenate(System.String,System.String,System.String,System.String)">
      <summary>
            Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages.
            e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'.
            Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage.
            </summary>
      <param name="firstInputFile">The first Pdf document.</param>
      <param name="secInputFile">The second Pdf document.</param>
      <param name="blankPageFile">The Pdf document with blank page</param>
      <param name="outputFile">Output Pdf document.</param>
      <returns>True for success,or false.</returns>
      <example>
        <code>
            [C#]
            PdfFileEditor pdfEditor = new PdfFileEditor();
            pdfEditor.Concatenate("inFile1.pdf","inFile2.pdf","blank.pdf","outFile.pdf");
            
            [Visual Basic]
            Dim pdfEditor As  PdfFileEditor = New PdfFileEditor()
            pdfEditor.Concatenate("inFile1.pdf","inFile2.pdf","blank.pdf","outFile.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Concatenate(System.IO.Stream,System.IO.Stream,System.IO.Stream,System.IO.Stream)">
      <summary>
            Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages.
            e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'.
            Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage.
            </summary>
      <param name="firstInputStream">The first Pdf Stream.</param>
      <param name="secInputStream">The second Pdf Stream.</param>
      <param name="blankPageStream">The Pdf Stream with blank page</param>
      <param name="outputStream">Output Pdf Stream.</param>
      <returns> True for success,or false.</returns>
      <example>
        <code>
            [C#] 
            FileStream inStream1 = new FileStream("inFile1.pdf",FileMode.Open);
            FileStream inStream2 = new FileStream("inFile2.pdf",FileMode.Open);
            FileStream blankStream = new FileStream("blank.pdf",FileMode.Open);
            FileStream outputStream = new FileStream(outFile,FileMode.Create);
            
            PdfFileEditor pdfEditor = new PdfFileEditor();
            pdfEditor.Concatenate(inStream1,inStream2,blankStream,outputStream);
            outputStream.Close();
            
            [Visual Basic]
            Dim inStream1 As FileStream =  New FileStream("inFile1.pdf",FileMode.Open);
            Dim inStream2 As FileStream =  New FileStream("inFile2.pdf",FileMode.Open);
            Dim blankStream As FileStream =  New FileStream("blank.pdf",FileMode.Open) 
            Dim outStream As FileStream =  New FileStream("outFile.pdf",FileMode.Create) 
            		
            Dim pdfEditor As PdfFileEditor =  New PdfFileEditor() 
            pdfEditor.Concatenate(inStream1,inStream2,blankStream,outStream)
            outStream.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Append(System.String,System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Appends pages,which are chosen from portFile within the range from startPage to endPage, in portFile at the end of firstInputFile.
            </summary>
      <param name="firstInputFile">Input Pdf file.</param>
      <param name="portFile">Pages from Pdf file.</param>
      <param name="startPage">Page starts in portFile.</param>
      <param name="endPage">Page ends in portFile.</param>
      <param name="outputFile">Output Pdf document.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            PdfFileEditor pdfEditor = new PdfFileEditor();
            int start = 1;
            int end = 3;
            pdfEditor.Append("inFile.pdf","portFile.pdf",start,end,"outFile.pdf");
            
            [Visual Basic]
            Dim pdfEditor As  PdfFileEditor = New PdfFileEditor()
            Dim start As Integer = 1
            Dim end As Integer = 3
            pdfEditor.Append("inFile.pdf","portFile.pdf",start,end,"outFile.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Append(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
             Appends pages,which are chosen from portStream within the range from startPage to endPage, in portStream at the end of firstInputStream.
            </summary>
      <param name="firstInputStream">Input file Stream.</param>
      <param name="portStream">Pages from Pdf file Stream.</param>
      <param name="startPage">Page starts in portFile Stream.</param>
      <param name="endPage">Page ends in portFile Stream.</param>
      <param name="outputStream">Output Pdf file Stream.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Extract(System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Extracts pages from input file,saves as a new Pdf file.
            </summary>
      <param name="firstInputFile">Input Pdf file path.</param>
      <param name="startPage">Start page number.</param>
      <param name="endPage">End page number.</param>
      <param name="outputFile">Output Pdf file path.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            PdfFileEditor pdfEditor = new PdfFileEditor();
            int start = 0;
            int end = 3;
            pdfEditor.OwnerPassword = "ownerpass";
            pdfEditor.Extract("inFile.pdf",start,end,"outFile.pdf"); 
            
            [Visual Basic]
            Dim pdfEditor As PdfFileEditor = New PdfFileEditor()
            Dim start As Integer = 0
            Dim endPage As Integer = 3
            pdfEditor.OwnerPassword = "ownerpass"
            pdfEditor.Extract("inFile.pdf",start,endPage,"outFile.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Extract(System.String,System.Int32[],System.String)">
      <summary>
            Extracts pages specified by number array, saves as a new Pdf file. 
             </summary>
      <param name="firstInputFile">Input file path.</param>
      <param name="pageNumber">Index of page out of the input file.</param>
      <param name="outputFile">Output file path.</param>
      <returns>True for successs, or false.</returns>
      <example>
        <code>
             [C#]
             int[] pages = new int[]{1,2,4,10};
             PdfFileEditor pdfEditor = new PdfFileEditor();
             pdfEditor.Extract("inFile.pdf",pages,"outFile.pdf");
             
             [Visual Basic]
             Dim pages() As Integer = New Integer() {1, 2, 4, 10}
             Dim pdfEditor As PdfFileEditor = New PdfFileEditor
             pdfEditor.Extract("inFile.pdf", pages, "outFile.pdf")
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Extract(System.IO.Stream,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Extracts pages from input file,saves as a new Pdf file.
            </summary>
      <param name="firstInputStream">Input file Stream.</param>
      <param name="startPage">Start page number.</param>
      <param name="endPage">End page number.</param>
      <param name="outputStream">Output Pdf file Stream.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Extract(System.IO.Stream,System.Int32[],System.IO.Stream)">
      <summary>
            Extracts pages specified by number array, saves as a new Pdf file. 
            </summary>
      <param name="firstInputStream">Input file Stream.</param>
      <param name="pageNumber">Index of page out of the input file.</param>
      <param name="outputStream">Output file stream.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.SplitFromFirst(System.String,System.Int32,System.String)">
      <summary>
            Splits Pdf file from specified location,and saves the front part as a new file.
            </summary>
      <param name="firstInputFile">Source Pdf file.</param>
      <param name="location">The splitting point.</param>
      <param name="outputFile">Output Pdf file.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            PdfFileEditor pdfEditor = new PdfFileEditor();
            pdfEditor.SplitFromFirst("inFile.pdf",1,"outFile.pdf");
            
            [Visual Basic]
            Dim pdfEditor As PdfFileEditor = New PdfFileEditor
            pdfEditor.SplitFromFirst("inFile.pdf", 1, "outFile.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.SplitFromFirst(System.IO.Stream,System.Int32,System.IO.Stream)">
      <summary>
            Splits from specified location,and saves the front part in output Stream.
            </summary>
      <param name="firstInputStream">Source Pdf file Stream.</param>
      <param name="location">The splitting point.</param>
      <param name="outputStream">Output file Stream.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.SplitToEnd(System.String,System.Int32,System.String)">
      <summary>
            Splits from location, and saves the rear part as a new file.
            </summary>
      <param name="firstInputFile">Source Pdf file.</param>
      <param name="location">The splitting position.</param>
      <param name="outputFile">Output Pdf file path.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.SplitToEnd(System.IO.Stream,System.Int32,System.IO.Stream)">
      <summary>
            Splits from specified location, and saves the rear part as a new file Stream.
            </summary>
      <param name="firstInputStream">Source Pdf file Stream.</param>
      <param name="location">The splitting position.</param>
      <param name="outputStream">Output Pdf file Stream.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.SplitToPages(System.String)">
      <summary>
            Splits the Pdf file into single-page documents.
            </summary>
      <param name="firstInputFile">Input Pdf file name.</param>
      <returns>Output Pdf streams,each stream buffers a single-page Pdf document.</returns>
      <example>
        <code>
            [C#]
            string inFile1 = "example1.pdf";		
            PdfFileEditor pdfEditor = new PdfFileEditor();			
            int fileNum = 1;
            MemoryStream[] outBuffer = pdfEditor.SplitToPages(inFile1);
            foreach(MemoryStream aStream in outBuffer)
            {
            	FileStream outStream = new FileStream("oneByone" + fileNum.ToString() + ".pdf",FileMode.Create);
            	aStream.WriteTo(outStream);
            	outStream.Close();
            	fileNum++;
            }
            
            [Visual Basic]
            Dim inFile1 As String =  "example1.pdf" 
            Dim pdfEditor As PdfFileEditor =  New PdfFileEditor() 
            Dim fileNum As Integer =  1 
            Dim outBuffer() As MemoryStream =  pdfEditor.SplitToPages(inFile1) 
            Dim aStream As MemoryStream
            For Each aStream In outBuffer
            	Dim outStream As FileStream =  New FileStream("oneByone" + fileNum.ToString() + ".pdf",FileMode.Create) 
            	aStream.WriteTo(outStream)
            	outStream.Close()
            	fileNum = fileNum + 1
            Next
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.SplitToPages(System.IO.Stream)">
      <summary>
            Splits the Pdf file into single-page documents.
            </summary>
      <param name="firstInputStream">Input Pdf stream.</param>
      <returns>Output Pdf streams,each stream buffers a single-page Pdf document.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.SplitToBulks(System.String,System.Int32[][])">
      <summary>
            Splits the Pdf file into several documents.The documents can be single-page or multi-pages.
            </summary>
      <param name="InputStream">Input Pdf stream.</param>
      <param name="numberofpage">The start page and the end page of each document.</param>
      <returns>Output Pdf streams,each stream buffers a Pdf document.</returns>
      <example>
        <code>
            [C#]
            string inFile1 = "example1.pdf";		
            PdfFileEditor pdfEditor = new PdfFileEditor();			
            int fileNum = 1;
            int[][] numberofpage= new int[][] { new int[] { 10, 20 }, new int[] { 15, 25 }, new int[] { 30, 40 }, new int[] { 35, 45 }, new int[] { 50, 60 }, new int[] { 55, 65 }, new int[] { 70, 80 }};
            MemoryStream[] outBuffer = pdfEditor.SplitToBulks(inFile1,numberofpage);
            foreach(MemoryStream aStream in outBuffer)
            {
            	FileStream outStream = new FileStream("oneByone" + fileNum.ToString() + ".pdf",FileMode.Create);
            	aStream.WriteTo(outStream);
            	outStream.Close();
            	fileNum++;
            }
            
            [Visual Basic]
            Dim inFile1 As String =  "example1.pdf" 
            Dim pdfEditor As PdfFileEditor =  New PdfFileEditor() 
            Dim fileNum As Integer =  1 
             Dim numberofpage(6,2) As Integer
             numberofpage(0,0)=10
             numberofpage(0,1)=20
             numberofpage(1,0)=15
             numberofpage(1,1)=25
             numberofpage(2,0)=30
             numberofpage(2,1)=40
             numberofpage(3,0)=35
             numberofpage(3,1)=45
             numberofpage(4,0)=50
             numberofpage(4,1)=60
            Dim outBuffer() As MemoryStream =  pdfEditor.SplitToBulks(inFile1,numberofpage) 
            Dim aStream As MemoryStream
            For Each aStream In outBuffer
            	Dim outStream As FileStream =  New FileStream("oneByone" + fileNum.ToString() + ".pdf",FileMode.Create) 
            	aStream.WriteTo(outStream)
            	outStream.Close()
            	fileNum = fileNum + 1
            Next
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.SplitToBulks(System.IO.Stream,System.Int32[][])">
      <summary>
            Splits the Pdf file into several documents.The documents can be single-page or multi-pages.
            </summary>
      <param name="InputStream">Input Pdf stream.</param>
      <param name="numberofpage">The start page and the end page of each document.</param>
      <returns>Output Pdf streams,each stream buffers a Pdf document.</returns>
      <example>
        <code>
            [C#]
            string inFile1 = "example1.pdf";
            FileStream inStream = new FileStream(inFile1,FileMode.Open, FileAccess.Read);
            PdfFileEditor pdfEditor = new PdfFileEditor();			
            int fileNum = 1;
            int[][] numberofpage= new int[][] { new int[] { 10, 20 }, new int[] { 15, 25 }, new int[] { 30, 40 }, new int[] { 35, 45 }, new int[] { 50, 60 }, new int[] { 55, 65 }, new int[] { 70, 80 }};
            MemoryStream[] outBuffer = pdfEditor.SplitToBulks(inStream,numberofpage);
            foreach(MemoryStream aStream in outBuffer)
            {
            	FileStream outStream = new FileStream("oneByone" + fileNum.ToString() + ".pdf",FileMode.Create);
            	aStream.WriteTo(outStream);
            	outStream.Close();
            	fileNum++;
            }
            
            [Visual Basic]
            Dim inFile1 As String =  "example1.pdf" 
             Dim inStream As FileStream =  new FileStream(inFile1,FileMode.Open, FileAccess.Read);
            Dim pdfEditor As PdfFileEditor =  New PdfFileEditor() 
            Dim fileNum As Integer =  1 
             Dim numberofpage(6,2) As Integer
             numberofpage(0,0)=10
             numberofpage(0,1)=20
             numberofpage(1,0)=15
             numberofpage(1,1)=25
             numberofpage(2,0)=30
             numberofpage(2,1)=40
             numberofpage(3,0)=35
             numberofpage(3,1)=45
             numberofpage(4,0)=50
             numberofpage(4,1)=60
            Dim outBuffer() As MemoryStream =  pdfEditor.SplitToBulks(inStream,numberofpage) 
            Dim aStream As MemoryStream
            For Each aStream In outBuffer
            	Dim outStream As FileStream =  New FileStream("oneByone" + fileNum.ToString() + ".pdf",FileMode.Create) 
            	aStream.WriteTo(outStream)
            	outStream.Close()
            	fileNum = fileNum + 1
            Next
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Insert(System.String,System.Int32,System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Inserts pages from an other file into the Pdf file at a position. 
            </summary>
      <param name="firstInputFile">Input Pdf file.</param>
      <param name="insertLocation">Position in input file.</param>
      <param name="portFile">The porting Pdf file.</param>
      <param name="startPage">Start position in portFile.</param>
      <param name="endPage">End position in portFile.</param>
      <param name="outputFile">Output Pdf file.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            PdfFileEditor pdfEditor = new PdfFileEditor();
            int start = 2;
            int end = 5;
            pdfEditor.Insert("inFile.pdf",4,"portFile.pdf",start,end,"outFile.pdf");
            
            [Visual Basic]
            Dim pdfEditor As PdfFileEditor = New PdfFileEditor
            Dim location AS Integer = 4
            Dim startPage As Integer = 2
            Dim endPage As Integer = 5
            pdfEditor.Insert("inFile.pdf",location,"portFile.pdf",startPage,endPage,"outFile.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Insert(System.IO.Stream,System.Int32,System.IO.Stream,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Inserts pages from an other file into the input Pdf file.
            </summary>
      <param name="firstInputStream">Input Stream of  Pdf file. </param>
      <param name="insertLocation">Insert position in input file.</param>
      <param name="portStream">Stream of Pdf file for pages.</param>
      <param name="startPage">From which page to start.</param>
      <param name="endPage">To which page to end.</param>
      <param name="outputStream">Output Stream.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Insert(System.String,System.Int32,System.String,System.Int32[],System.String)">
      <summary>
            Inserts pages from an other file into the input Pdf file.
            </summary>
      <param name="firstInputFile">Input Pdf file.</param>
      <param name="insertLocation">Insert position in input file.</param>
      <param name="portFile">Pages from the Pdf file.</param>
      <param name="pageNumber">The page number of the ported in portFile.</param>
      <param name="outputFile">Output Pdf file.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            PdfFileEditor pdfEditor = new PdfFileEditor();
            int location = 1;
            int[] pages = new int[]{1,2,3,8};
            pdfEditor.Insert("inFile.pdf",location,"portFile.pdf",pages,"outFile.pdf");
            
            [Visual Basic]
            Dim pdfEditor As PdfFileEditor = New PdfFileEditor
            Dim pages() As Integer = New Integer() {1, 2, 4, 10}
            pdfEditor.Insert("inFile.pdf", 3, "portFile.pdf", pages, "outFile.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Insert(System.IO.Stream,System.Int32,System.IO.Stream,System.Int32[],System.IO.Stream)">
      <summary>
            Inserts pages from an other file into the input Pdf file.
            </summary>
      <param name="firstInputStream">Input Stream of  Pdf file. </param>
      <param name="insertLocation">Insert position in input file.</param>
      <param name="portStream">Stream of Pdf file for pages.</param>
      <param name="pageNumber">The page number of the ported in portFile.</param>
      <param name="outputStream">Output Stream.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.MakeNUp(System.String,System.String,System.Int32,System.Int32)">
      <summary> Makes N-Up document from the firstInputFile to outputFile.
            </summary>
      <param name="firstInputFile">Input pdf file path and name.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <param name="x">The page number in landscape orientation.
            </param>
      <param name="y">The page number in portrait orientation.
            </param>
      <returns> boolean - True for success, or false.
            @throws IOException
            @throws PdfKitException
            
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.MakeNUp(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
      <summary> Makes N-Up document from the firstInputStream to outputStream.
            </summary>
      <param name="firstInputStream">Input pdf stream.
            </param>
      <param name="outputStream">Output pdf stream.
            </param>
      <param name="x">The page number int landscape orientation.
            </param>
      <param name="y">The page number int portrait orientation.
            </param>
      <returns> boolean - True for success, or false.
            @throws IOException
            @throws PdfKitException
            
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.MakeNUp(System.String,System.String,System.Int32,System.Int32,Aspose.Pdf.Kit.PageSize)">
      <summary> Makes N-Up document from the firstInputFile to outputFile.
            </summary>
      <param name="firstInputFile">Input pdf file path and name.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <param name="x">The page number in landscape orientation.
            </param>
      <param name="y">The page number in portrait orientation.
            </param>
      <param name="pageSize">The page size of the output pdf file.
            </param>
      <returns> boolean - True for success, or false.
            @throws IOException
            @throws PdfKitException
            
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.MakeNUp(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32,Aspose.Pdf.Kit.PageSize)">
      <summary> Makes N-Up document from the firstInputStream to outputStream.
            </summary>
      <param name="firstInputStream">Input pdf stream.
            </param>
      <param name="outputStream">Output pdf stream.
            </param>
      <param name="x">The page number in landscape orientation.
            </param>
      <param name="y">The page number in portrait orientation.
            </param>
      <param name="pageSize">The page size of the output pdf file.
            </param>
      <returns> boolean - True for success, or false.
            @throws IOException
            @throws PdfKitException
            
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.MakeNUp(System.String,System.String,System.String)">
      <summary> Makes N-Up document from the two input PDF files to outputFile. 
            Each page of outputFile will contain two pages, one page is from the first input file 
            and another is from the second input file. The two pages are piled up horizontally. 
            Use this method before 2007/12/15. Aspose has replaced it to MakeNUp(String[], String, bool) 
            Please use new class after that date.
            </summary>
      <param name="firstInputFile">first input file.
            </param>
      <param name="secondInputFile">second input file.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <returns> boolean - True for success, or false.
            @throws IOException
            @throws PdfKitException
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.MakeNUp(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
      <summary> Makes N-Up document from the two input PDF streams to outputStream.
            Use this method before 2007/12/15. Aspose has replaced it to MakeNUp(Stream[], Stream, bool) 
            Please use new class after that date.
            </summary>
      <param name="firstInputStream">first input stream.
            </param>
      <param name="secondInputStream">second input stream.
            </param>
      <param name="outputStream">Output pdf stream.
            </param>
      <returns> boolean - True for success, or false.
            @throws IOException
            @throws PdfKitException
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.MakeNUp(System.String[],System.String,System.Boolean)">
      <summary> Makes N-Up document from the multi input PDF files to outputFile. 
            Each page of outputFile will contain multi pages, which are combination with pages 
            in the input files of the same page number. The multi pages piled up horizontally 
            if isSidewise is true and piled up vertically if isSidewise is false. 
            </summary>
      <param name="inputFiles">Input Pdf files.</param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <param name="isSidewise">Piled up way, true for horizontally and flase for vertically.</param>
      <returns> boolean - True for success, or false.
            @throws IOException
            @throws PdfKitException
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.MakeNUp(System.IO.Stream[],System.IO.Stream,System.Boolean)">
      <summary> Makes N-Up document from the multi input PDF streams to outputStream.
            Each page of outputStream will contain multi pages, which are combination with pages 
            in the input streams of the same page number. The multi-pages piled up horizontally 
            if isSidewise is true and piled up vertically if isSidewise is false.
            </summary>
      <param name="inputStreams">Input Pdf streams.</param>
      <param name="outputStream">Output pdf stream.
            <param name="isSidewise">Piled up way, true for horizontally and flase for vertically</param></param>
      <returns> boolean - True for success, or false.
            @throws IOException
            @throws PdfKitException
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.MakeBooklet(System.String,System.String)">
      <summary> Makes booklet from the firstInputFile to outputFile.
            </summary>
      <param name="firstInputFile">Input pdf file path and name.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <returns> boolean - True for success, or false.
            @throws IOException
            @throws PdfKitException
            
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.MakeBooklet(System.IO.Stream,System.IO.Stream)">
      <summary> Makes booklet from the firstInputStream to outputStream.
            </summary>
      <param name="firstInputStream">Input pdf stream.
            </param>
      <param name="outputStream">output pdf stream.
            </param>
      <returns> boolean - True for success, or false.
            @throws IOException
            @throws PdfKitException
            
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.MakeBooklet(System.String,System.String,Aspose.Pdf.Kit.PageSize)">
      <summary> Makes booklet from the firstInputFile to outputFile.
            </summary>
      <param name="firstInputFile">Input pdf file path and name.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <param name="pageSize">The page size of the output pdf file.
            </param>
      <returns> boolean - True for success, or false.
            @throws IOException
            @throws PdfKitException
            
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.MakeBooklet(System.IO.Stream,System.IO.Stream,Aspose.Pdf.Kit.PageSize)">
      <summary> Makes booklet from the firstInputStream to outputStream.
            </summary>
      <param name="firstInputStream">Input pdf stream.
            </param>
      <param name="outputStream">output pdf stream.
            </param>
      <param name="pageSize">The page size of the output pdf file.
            </param>
      <returns> boolean - True for success, or false.
            @throws IOException
            @throws PdfKitException
            
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Delete(System.String,System.Int32[],System.String)">
      <summary>
            Deletes pages specified by number array from input file, saves as a new Pdf file. 
             </summary>
      <param name="inputFile">Input file path.</param>
      <param name="pageNumber">Index of page out of the input file.</param>
      <param name="outputFile">Output file path.</param>
      <returns>True for successs, or false.</returns>
      <example>
        <code>
             [C#]
             int[] pages = new int[]{1,2,4,10};
             PdfFileEditor pdfEditor = new PdfFileEditor();
             pdfEditor.Delete("inFile.pdf",pages,"outFile.pdf");
             
             [Visual Basic]
             Dim pages() As Integer = New Integer() {1, 2, 4, 10}
             Dim pdfEditor As PdfFileEditor = New PdfFileEditor
             pdfEditor.Delete("inFile.pdf", pages, "outFile.pdf")
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.Delete(System.IO.Stream,System.Int32[],System.IO.Stream)">
      <summary>
            Deletes pages specified by number array from input file, saves as a new Pdf file. 
            </summary>
      <param name="inputStream">Input file Stream.</param>
      <param name="pageNumber">Index of page out of the input file.</param>
      <param name="outputStream">Output file stream.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.ConcatenateForms(System.String,System.String,System.String)">
      <summary>
            Merges two Pdf documents containing forms into a new Pdf document.
            </summary>
      <param name="firstInputFile">The first Pdf document.</param>
      <param name="secInputFile">The second Pdf document.</param>
      <param name="outputFile">Output Pdf document.</param>
      <returns>True for success,or false.</returns>
      <example>
        <code>
            [C#]
            PdfFileEditor pdfEditor = new PdfFileEditor();
            pdfEditor.ConcatenateForms("inFile1.pdf","inFile2.pdf","outFile.pdf");
            
            [Visual Basic]
            Dim pdfEditor As  PdfFileEditor = New PdfFileEditor()
            pdfEditor.ConcatenateForms("inFile1.pdf","inFile2.pdf","outFile.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.ConcatenateForms(System.String[],System.String)">
      <summary>
            Merges multi Pdf documents containing forms into a new file.
            </summary>
      <param name="inputFiles">Input Pdf files.</param>
      <param name="outputFile">Output Pdf file.</param>
      <returns>True for success,or false.</returns>
    </member>
    <!-- 对于成员“M:Aspose.Pdf.Kit.PdfFileEditor.ConcatenateForms(System.IO.Stream,System.IO.Stream,System.IO.Stream)”忽略有格式错误的 XML 注释 -->
    <member name="M:Aspose.Pdf.Kit.PdfFileEditor.ConcatenateForms(System.IO.Stream[],System.IO.Stream)">
      <summary>
            Merges multi-stream of Pdf into a new Pdf stream.
            </summary>
      <param name="inputStreams">Input Pdf streams.</param>
      <param name="outputStream">Output Pdf stream.</param>
      <returns>True for success,or false.</returns>
      <example>The sapmple shows concatenating multi-pdf stream.
            <code>
            [C#]
            FileStream inStream1 = new FileStream(".\\example1.pdf",FileMode.Open);
            FileStream inStream2 = new FileStream(".\\example2.pdf",FileMode.Open);
            FileStream inStream3 = new FileStream(".\\example3.pdf",FileMode.Open);
            FileStream inStream4 = new FileStream(".\\example4.pdf",FileMode.Open);
            FileStream outStream = new FileStream(".\\multiStream.pdf",FileMode.Create);
            Stream[] inStreams = new Stream[]{inStream1,inStream2,inStream3,inStream4};
            PdfFileEditor pdfEditor = new PdfFileEditor();
            pdfEditor.ConcatenateForms(inStreams,outStream);
            outStream.Close();
            
            [Visual Basic]
            Dim inStream1 As FileStream =  New FileStream(".\\example1.pdf",FileMode.Open) 
            Dim inStream2 As FileStream =  New FileStream(".\\example2.pdf",FileMode.Open) 
            Dim inStream3 As FileStream =  New FileStream(".\\example3.pdf",FileMode.Open) 
            Dim inStream4 As FileStream =  New FileStream(".\\example4.pdf",FileMode.Open) 
            Dim outStream As FileStream =  New FileStream(".\\multiStream.pdf",FileMode.Create) 
            Dim inStreams() As Stream =  New Stream() {inStream1,inStream2,inStream3,inStream4}
            Dim pdfEditor As PdfFileEditor =  New PdfFileEditor() 
            pdfEditor.ConcatenateForms(inStreams,outStream)
            outStream.Close()
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileEditor.OwnerPassword">
      <summary>
            Sets owner's password if the source input Pdf file is encrypted.
            This property only works for Extract method in the current version.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfFileInfo">
      <summary>
            Represents a class for accessing meta information of Pdf file. 
            </summary>
      <example>
        <code>
            [C#]
            	string inFile = ".\\AsposePdfKitExample\\example1.pdf";
            	string outFile1 = ".\\AsposePdfKitExample\\Kit0204_1.pdf";
            	
            	//Set Pdf file meta information.
            	System.Collections.Hashtable additionalInfo = new System.Collections.Hashtable();
            	additionalInfo.Add("Comment","terrorism challenges the peace of world.");
            
            	//Create a PdfFileInfo instance.
            	PdfFileInfo fileInfo = new PdfFileInfo(inFile);
            	fileInfo.Author = "William";
            	fileInfo.Title = "Hello World!";
            	fileInfo.Keywords = "peace and development";
            	fileInfo.Creator = "Aspose";
            	fileInfo.Header = additionalInfo;
            	fileInfo.SaveNewInfo(outFile1);
            
            	//Show Pdf file meta information.
            	PdfFileInfo fileInfo1 = new PdfFileInfo(outFile1);				
            	Console.WriteLine();
            	Console.WriteLine("TITLE: "+fileInfo1.Title);
            	Console.WriteLine("SUBJECT: "+fileInfo1.Subject);
            	Console.WriteLine("KEYWORDS: "+fileInfo1.Keywords);
            	Console.WriteLine("AUTHOR: " + fileInfo1.Author);
            	Console.WriteLine("PRODUCER: "+fileInfo1.Producer);
            	Console.WriteLine("CREATIONDATE: "+ fileInfo1.CreationDate);
            	Console.WriteLine("CREATOR: "+fileInfo1.Creator);
            	Console.WriteLine("MODDATE: "+fileInfo1.ModDate);
            	foreach(object o in fileInfo1.Header.Keys)
            	{
            		 Console.WriteLine((System.String)o +" :"+ (System.String)fileInfo1.Header[o]);
            	}
            
            	//Change Pdf file meta information.
            	//Create a PdfFileInfo instance.
            	PdfFileInfo newFileInfo = new PdfFileInfo(outFile1);
            	//Chance file information and rewrite new Pdf file.
            	string outFile2 = ".\\AsposePdfKitExample\\Kit0204_2.pdf";
            	newFileInfo.ClearInfo();
            	newFileInfo.Author = "Jackie";
            	newFileInfo.Keywords = "terrorism and peace";
            	newFileInfo.SaveNewInfo(outFile2);
            
            	//Show Pdf file meta information.
            	PdfFileInfo fileInfo2 = new PdfFileInfo(outFile2);
            	Console.WriteLine();
            	Console.WriteLine("TITLE: "+fileInfo2.Title);
            	Console.WriteLine("SUBJECT: "+fileInfo2.Subject);
            	Console.WriteLine("KEYWORDS: "+fileInfo2.Keywords);
            	Console.WriteLine("AUTHOR: " + fileInfo2.Author);
            	Console.WriteLine("PRODUCER: "+fileInfo2.Producer);
            	Console.WriteLine("CREATIONDATE: "+ fileInfo2.CreationDate);
            	Console.WriteLine("CREATOR: "+fileInfo2.Creator);
            	Console.WriteLine("MODDATE: "+fileInfo2.ModDate);
            	foreach(object o in fileInfo2.Header.Keys)
            	{
            		 Console.WriteLine((System.String)o + ": "+(System.String)fileInfo2.Header[o]);
            	}
            	
            [Visual Basic]
            Sub Main()
            	Dim inFile As String =  ".\\AsposePdfKitExample\\example1.pdf" 
            	Dim outFile1 As String =  ".\\AsposePdfKitExample\\Kit0204_1.pdf"  
            	'Set Pdf file meta information.'
            	Dim additionalInfo As System.Collections.Hashtable =  New System.Collections.Hashtable() 
            	additionalInfo.Add("Comment","terrorism challenges the peace of world.") 
            	'Create a PdfFileInfo instance.'
            	Dim fileInfo As PdfFileInfo =  New PdfFileInfo(inFile) 
            	fileInfo.Author = "William"
            	fileInfo.Title = "Hello World!"
            	fileInfo.Keywords = "peace and development"
            	fileInfo.Creator = "Aspose"
            	fileInfo.Header = additionalInfo
            	fileInfo.SaveNewInfo(outFile1) 
            	'Show Pdf file meta information.'
            	Dim fileInfo1 As PdfFileInfo =  New PdfFileInfo(outFile1) 
            	Console.WriteLine()
            	Console.WriteLine("TITLE: "+fileInfo1.Title)
            	Console.WriteLine("SUBJECT: "+fileInfo1.Subject)
            	Console.WriteLine("KEYWORDS: "+fileInfo1.Keywords)
            	Console.WriteLine("AUTHOR: " + fileInfo1.Author)
            	Console.WriteLine("PRODUCER: "+fileInfo1.Producer)
            	Console.WriteLine("CREATIONDATE: "+ fileInfo1.CreationDate)
            	Console.WriteLine("CREATOR: "+fileInfo1.Creator)
            	Console.WriteLine("MODDATE: "+fileInfo1.ModDate)
            	Dim o As Object
            	For Each o In fileInfo1.Header.Keys
            		Console.WriteLine(CType(o +" :"+CType(fileInfo1.Header(o), System.String, System.String)))
            	Next 
            	'Change Pdf file meta information.'
            	'Create a PdfFileInfo instance.'
            	Dim NewFileInfo As PdfFileInfo =  New PdfFileInfo(outFile1) 
            	'Chance file information and rewrite new Pdf file.'
            	Dim outFile2 As String =  ".\\AsposePdfKitExample\\Kit0204_2.pdf" 
            	NewFileInfo.ClearInfo()
            	NewFileInfo.Author = "Jackie"
            	NewFileInfo.Keywords = "terrorism and peace"
            	NewFileInfo.SaveNewInfo(outFile2) 
            	'Show Pdf file meta information.'
            	Dim fileInfo2 As PdfFileInfo =  New PdfFileInfo(outFile2) 
            	Console.WriteLine()
            	Console.WriteLine("TITLE: "+fileInfo2.Title)
            	Console.WriteLine("SUBJECT: "+fileInfo2.Subject)
            	Console.WriteLine("KEYWORDS: "+fileInfo2.Keywords)
            	Console.WriteLine("AUTHOR: " + fileInfo2.Author)
            	Console.WriteLine("PRODUCER: "+fileInfo2.Producer)
            	Console.WriteLine("CREATIONDATE: "+ fileInfo2.CreationDate)
            	Console.WriteLine("CREATOR: "+fileInfo2.Creator)
            	Console.WriteLine("MODDATE: "+fileInfo2.ModDate)
            	Dim o As Object
            	For Each o In fileInfo2.Header.Keys
            		Console.WriteLine(CType(o + ": "+CType(fileInfo2.Header(o), System.String, System.String)))
            	Next
            End Sub
            </code>
      </example>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfFileInfo.KitVersion">
      <summary>
            the current version of Aspose.Pdf.Kit
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.#ctor(System.String)">
      <summary>
            Creates a PdfFileInfo instance, and reads input Pdf file.
            </summary>
      <param name="inputFile">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.#ctor">
      <summary>
            Creates a PdfFileInfo instance.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.#ctor(System.IO.Stream)">
      <summary>
            Creates a PdfFileInfo instance, and reads input Pdf Stream.
            </summary>
      <param name="inputStream">Input Pdf Stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.SaveNewInfo(System.String)">
      <summary>
            Changes the properties specified explicitly by setting file information, other properties remain. Supports for AcroForm. Refer to<see cref="T:Aspose.Pdf.Kit.PdfFileInfo" />.
            </summary>
      <param name="outputFile">Output file.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.SaveNewInfo(System.IO.Stream)">
      <summary>
            Changes the properties specified explicitly by setting file information, other properties remain. Refer to<see cref="T:Aspose.Pdf.Kit.PdfFileInfo" />.
            </summary>
      <param name="outputStream">Output Stream.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.ClearInfo">
      <summary>
            Clears all information of Pdf file.
            </summary>
      <example>
        <code>
            [C#]
            	string outFile2 = ".\\AsposePdfKitExample\\Kit0204_2.pdf";
            	newFileInfo.ClearInfo();
            	newFileInfo.Author = "Jackie";
            	newFileInfo.Keywords = "terrorism and peace";
            	newFileInfo.SaveNewInfo(outFile2);
            [Visual Basic] 
            	Dim outFile2 As String =  ".\\AsposePdfKitExample\\Kit0204_2.pdf" 
            	NewFileInfo.ClearInfo()
            	NewFileInfo.Author = "Jackie"
            	NewFileInfo.Keywords = "terrorism and peace"
            	NewFileInfo.SaveNewInfo(outFile2)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.GetPageHeight(System.Int32)">
      <summary>
            Gets the height size of the specified page. 
            </summary>
      <param name="pageNum">Indicate which page.</param>
      <returns>The height of the page.</returns>
      <example>
        <code>
            [C#]
            PdfFileInfo fileInfo = new PdfFileInfo(@inputFile);				 
            float height = fileInfo.GetPageHeight(1);
            float width = fileInfo.GetPageWidth(1);
            
            [Visual Basic]
            Dim fileInfo As PdfFileInfo =  New PdfFileInfo(@inputFile) 
            Dim height As single =  fileInfo.GetPageHeight(1) 
            Dim width As single =  fileInfo.GetPageWidth(1)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.GetPageWidth(System.Int32)">
      <summary>
            Gets the width size of the specified page.refer to <see cref="M:Aspose.Pdf.Kit.PdfFileInfo.GetPageHeight(System.Int32)" /></summary>
      <param name="pageNum">Indicate which page.</param>
      <returns>The width of the page.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.GetPageRotation(System.Int32)">
      <summary>
            Gets the rotation of the specified page.
            </summary>
      <param name="pageNum">Indicate which page.</param>
      <returns>The rotation of the page.The value may be 0,90,180,270.</returns>
      <example>
        <code>
            [C#]
            PdfFileInfo fileInfo = new PdfFileInfo(@inputFile);	
            int rotation = fileInfo.GetPageRotation(1);
            
            [Visual Basic]
            Dim fileInfo As PdfFileInfo =  New PdfFileInfo(@inputFile) 
            Dim rotation As Integer =  fileInfo.GetPageRotation(1)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.GetMetaInfo(System.String)">
      <summary>
            Gets customized information of Pdf file with property name. If there is no property match the name, it will return a blank string.
            </summary>
      <param name="name">meta property's name.</param>
      <returns>meta property's name.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.SetMetaInfo(System.String,System.String)">
      <summary>
            Sets customized information of Pdf file with property name and property value.
            </summary>
      <param name="name">meta property's name.</param>
      <param name="value">meta property's name.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.#ctor(System.String,System.String)">
      <summary>
            Creates a PdfFileInfo instance and reads input Pdf file with password.
            </summary>
      <param name="inputFile">Input Pdf File.</param>
      <param name="password">The Pdf file's password</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.#ctor(System.IO.Stream,System.String)">
      <summary>
            Creates a PdfFileInfo instance and reads input Pdf Stream with password.
            </summary>
      <param name="inputStream">Input Pdf Stream.</param>
      <param name="password">The Pdf Stream's password</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.GetDocumentPrivilege">
      <summary>
            Gets the PDF document's privilege setting.
            </summary>
      <returns>The PDF document's privilege setting.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileInfo.GetPdfVersion">
      <summary>
            Gets the PDF file's version info.
            </summary>
      <returns>The version string.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.InputFile">
      <summary>
            Get and Sets the input file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.InputStream">
      <summary>
            Get and Sets the input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.NumberofPages">
      <summary>
            Gets the number of file pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.BePdfFile">
      <summary>
            Checkes whether the source input is a valid Pdf file. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.BeEncrypted">
      <summary>
            Checkes whether the Pdf file is encrypted,if the file is encrypted, the file information can't be gotten except BeEncrypted.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.Author">
      <summary>
            Gets or sets the Author information of Pdf file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.Title">
      <summary>
            Gets or sets the Title information of Pdf file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.Subject">
      <summary>
            Gets or sets the Subject information of Pdf file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.Creator">
      <summary>
            Gets or sets the Creator information of Pdf file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.Keywords">
      <summary>
            Gets or sets the Keywords information of Pdf file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.Header">
      <summary>
            Gets or sets the customized information of Pdf file
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.CreationDate">
      <summary>
            Gets the CreationDate information of Pdf file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.Producer">
      <summary>
            Gets the Producer information of Pdf file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileInfo.ModDate">
      <summary>
            Gets the modified date information of Pdf file.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfFileMend">
      <summary>
            Represents a class for adding texts and images on the pages of existing Pdf file.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileMend.#ctor(System.String,System.String)">
      <summary>
            Initializes an object of PdfFileMend.
            </summary>
      <param name="inputFileName">Input Pdf file (TestPath)name.</param>
      <param name="outputFileName">Output Pdf file (TestPath)name.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileMend.#ctor">
      <summary>
            Initializes an object of PdfFileMend.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileMend.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Initializes an object of PdfFileMend.
            </summary>
      <param name="inputStream">Input Pdf stream.</param>
      <param name="outputStream">Output Pdf stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileMend.AddText(Aspose.Pdf.Kit.FormattedText,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adheres text to the page of Pdf file at given coordinates.The rectangle region for adding is specified by the coordinates of the lower left point and the upper right point.
            </summary>
      <param name="text">Text with format to be added.</param>
      <param name="pageNum">Indicates which page will the text be added to.</param>
      <param name="lowerLeftX">The horizontal position of lower left point on the retangle area lined out for adding text.</param>
      <param name="lowerLeftY">The vertical position of lower left point on the retangle area lined out for adding text.</param>
      <param name="upperRightX">The horizontal position of upper right point on the retangle area lined out for adding text.</param>
      <param name="upperRightY">The vertical position of upper right point on the retangle area lined out for adding text.</param>
      <returns>True for success,or false.</returns>
      <example>
        <code>
            [C#]
            string inputFile = "./AsposePdfKitExample/example1.pdf";
            string outputFile = "./AsposePdfKitExample/KitTest.pdf";
             
            PdfFileInfo fileInfo = new PdfFileInfo(@inputFile);
            float height = fileInfo.GetPageHeight(1);
            float width = fileInfo.GetPageWidth(1);
            int rotation = fileInfo.GetPageRotation(1); //get the page rotation
            
            PdfFileMend mendor = new PdfFileMend(@inputFile,@outputFile);
            switch(rotation)
            {
            	case 0:
            	mendor.AddText(new FormattedText("PdfFileMend testing! 0 rotation.",System.Drawing.Color.FromArgb(0,200,0),FontStyle.TimesRoman,EncodingType.Winansi,false,12),1,10,height-25,width,height-10);
            	break;
            	case 90:
            	mendor.AddText(new FormattedText("PdfFileMend testing! 90 rotation.",System.Drawing.Color.FromArgb(0,200,0),FontStyle.TimesRoman,EncodingType.Winansi,false,12),1,width-25,height-10,width-45,height-150);
            	break;
            	case 180:
            	mendor.AddText(new FormattedText("PdfFileMend testing! 180 rotation.",System.Drawing.Color.FromArgb(0,200,0),FontStyle.TimesRoman,EncodingType.Winansi,false,12),1,10,10,width,25);
            	break;
            	case 270:
            	mendor.AddText(new FormattedText("PdfFileMend testing! 270 rotation.",System.Drawing.Color.FromArgb(0,200,0),FontStyle.TimesRoman,EncodingType.Winansi,false,12),1,10,10,25,height-10);
            	break;
            	default:
            	break;
            }
            mendor.Close();
            
            [Visaul Basic]
            Dim inputFile As String =  "./AsposePdfKitExample/example1.pdf" 
            Dim outputFile As String =  "./AsposePdfKitExample/KitTest.pdf" 
            
            Dim fileInfo As PdfFileInfo =  New PdfFileInfo(@inputFile) 
            Dim height As single =  fileInfo.GetPageHeight(1) 
            Dim width As single =  fileInfo.GetPageWidth(1) 
            Dim rotation As Integer =  fileInfo.GetPageRotation(1)  'get the page rotation
            
            Dim mendor As PdfFileMend =  New PdfFileMend(@inputFile,@outputFile) 
            Select Case rotation  
            	Case 0
            	mendor.AddText(New FormattedText("PdfFileMend testing! 0 rotation.",System.Drawing.Color.FromArgb(0,200,0),FontStyle.TimesRoman,EncodingType.Winansi,false,12),1,10,height-25,width,height-10)
            	break
            	Case 90
            	mendor.AddText(New FormattedText("PdfFileMend testing! 90 rotation.",System.Drawing.Color.FromArgb(0,200,0),FontStyle.TimesRoman,EncodingType.Winansi,false,12),1,width-25,height-10,width-45,height-150)
            	break
            	Case 180
            	mendor.AddText(New FormattedText("PdfFileMend testing! 180 rotation.",System.Drawing.Color.FromArgb(0,200,0),FontStyle.TimesRoman,EncodingType.Winansi,false,12),1,10,10,width,25)
            	break
            	Case 270
            	mendor.AddText(New FormattedText("PdfFileMend testing! 270 rotation.",System.Drawing.Color.FromArgb(0,200,0),FontStyle.TimesRoman,EncodingType.Winansi,false,12),1,10,10,25,height-10)
            	break
            	Case Else
            	break
            End Select
            mendor.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileMend.AddText(Aspose.Pdf.Kit.FormattedText,System.Int32[],System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adheres text to the page of Pdf file at given coordinates.The rectangle region for adding is specified by the coordinates of the lower left point and the upper right point.
            </summary>
      <param name="text">Text with format to be added.</param>
      <param name="pageNums">Indicates which pages will the text be added to.</param>
      <param name="lowerLeftX">The horizontal position of lower left point on the retangle area lined out for adding text.</param>
      <param name="lowerLeftY">The vertical position of lower left point on the retangle area lined out for adding text.</param>
      <param name="upperRightX">The horizontal position of upper right point on the retangle area lined out for adding text.</param>
      <param name="upperRightY">The vertical position of upper right point on the retangle area lined out for adding text.</param>
      <returns>True for success,or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileMend.AddImage(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adheres image to the page of Pdf file at given coordinates,Jpg,Gif,Png,Bmp are supported. The rectangle region for adding is specified by the coordinates of the lower left point and the upper right point.
            </summary>
      <param name="imageName">Input image (TestPath)name.</param>
      <param name="pageNum">Indicates which page will the image be added to.</param>
      <param name="lowerLeftX">The horizontal position of lower left point on the retangle area lined out for adding image.</param>
      <param name="lowerLeftY">The vertical position of lower left point on the retangle area lined out for adding image.</param>
      <param name="upperRightX">The horizontal position of upper right point on the retangle area lined out for adding image.</param>
      <param name="upperRightY">The vertical position of upper right point on the retangle area lined out for adding image.</param>
      <returns>True for success,or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileMend.AddImage(System.String,System.Int32[],System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adheres image to the page of Pdf file at given coordinates,Jpg,Gif,Png,Bmp are supported. The rectangle region for adding is specified by the coordinates of the lower left point and the upper right point.
            </summary>
      <param name="imageName">Input image (TestPath)name.</param>
      <param name="pageNums">Indicates which pages will the image be added to.</param>
      <param name="lowerLeftX">The horizontal position of lower left point on the retangle area lined out for adding image.</param>
      <param name="lowerLeftY">The vertical position of lower left point on the retangle area lined out for adding image.</param>
      <param name="upperRightX">The horizontal position of upper right point on the retangle area lined out for adding image.</param>
      <param name="upperRightY">The vertical position of upper right point on the retangle area lined out for adding image.</param>
      <returns>True for success,or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileMend.AddImage(System.IO.Stream,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adheres image to the page of Pdf file at given coordinates,Jpg,Gif,Png,Bmp are supported.The rectangle region for adding is specified by the coordinates of the lower left point and the upper right point.
            </summary>
      <param name="imageStream">Input image stream.</param>
      <param name="pageNum">Indicates which page will the image be added to.</param>
      <param name="lowerLeftX">The horizontal position of lower left point on the retangle area lined out for adding image.</param>
      <param name="lowerLeftY">The vertical position of lower left point on the retangle area lined out for adding image.</param>
      <param name="upperRightX">The horizontal position of upper right point on the retangle area lined out for adding image.</param>
      <param name="upperRightY">The vertical position of upper right point on the retangle area lined out for adding image.</param>
      <returns>True for success,or false.</returns>
      <example>
        <code>
            [C#]
            string inputFile = "./AsposePdfKitExample/example1.pdf";
            string imageName = "./AsposePdfKitExample/butterfly.jpg";
            string outputFile = "./AsposePdfKitExample/KitTest.pdf";
            
            FileStream inPdfStream = new FileStream(@inputFile,FileMode.Open);
            FileStream inImgStream = new FileStream(@imageName,FileMode.Open);
            FileStream outputStream = new FileStream(@outputFile,FileMode.Create);
            
            PdfFileInfo fileInfo = new PdfFileInfo(inPdfStream);
            inPdfStream.Seek(0,SeekOrigin.Begin);
            float height = fileInfo.GetPageHeight(1);
            float width = fileInfo.GetPageWidth(1);
            
            PdfFileMend mendor = new PdfFileMend(inPdfStream,outputStream);
            mendor.AddImage(inImgStream,1,50,50,100,100);
            mendor.Close();
            outputStream.Close();
            
            [Visual Basic]
            Dim inputFile As String =  "./AsposePdfKitExample/example1.pdf"
            Dim imageName As String =  "./AsposePdfKitExample/butterfly.jpg"
            Dim outputFile As String =  "./AsposePdfKitExample/KitTest.pdf"
            Dim inPdfStream As FileStream =  New FileStream(@inputFile,FileMode.Open)
            Dim inImgStream As FileStream =  New FileStream(@imageName,FileMode.Open)
            Dim outputStream As FileStream =  New FileStream(@outputFile,FileMode.Create)
            
            Dim fileInfo As PdfFileInfo =  New PdfFileInfo(inPdfStream)
            inPdfStream.Seek(0,SeekOrigin.Begin)
            Dim height As single =  fileInfo.GetPageHeight(1)
            Dim width As single =  fileInfo.GetPageWidth(1)
            
            Dim mendor As PdfFileMend =  New PdfFileMend(inPdfStream,outputStream)
            mendor.AddImage(inImgStream,1,50,50,100,100)
            mendor.Close()
            outputStream.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileMend.AddImage(System.IO.Stream,System.Int32[],System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adheres image to the page of Pdf file at given coordinates,Jpg,Gif,Png,Bmp are supported. The rectangle region for adding is specified by the coordinates of the lower left point and the upper right point.
            </summary>
      <param name="imageStream">Input image stream.</param>
      <param name="pageNums">Indicates which pages will the image be added to.</param>
      <param name="lowerLeftX">The horizontal position of lower left point on the retangle area lined out for adding image.</param>
      <param name="lowerLeftY">The vertical position of lower left point on the retangle area lined out for adding image.</param>
      <param name="upperRightX">The horizontal position of upper right point on the retangle area lined out for adding image.</param>
      <param name="upperRightY">The vertical position of upper right point on the retangle area lined out for adding image.</param>
      <returns>True for success,or false.</returns>
      <example>
        <code>
            [C#]
            string inputFile = "./AsposePdfKitExample/example1.pdf";
            string imageName = "./AsposePdfKitExample/butterfly.jpg";
            string outputFile = "./AsposePdfKitExample/KitTest.pdf";
            int[] pages = new int[]{1,2,3,4,5};
            
            FileStream inPdfStream = new FileStream(@inputFile,FileMode.Open);
            FileStream inImgStream = new FileStream(@imageName,FileMode.Open);
            FileStream outputStream = new FileStream(@outputFile,FileMode.Create);
            	
            PdfFileInfo fileInfo = new PdfFileInfo(inPdfStream);
            inPdfStream.Seek(0,SeekOrigin.Begin);
            float height = fileInfo.GetPageHeight(1);
            float width = fileInfo.GetPageWidth(1);
            
            PdfFileMend mendor = new PdfFileMend(inPdfStream,outputStream);
            mendor.AddImage(inImgStream,pages,50,50,100,100);
            mendor.Close();
            outputStream.Close();
            
            [Visual Basic]
            Dim inputFile As String =  "./AsposePdfKitExample/example1.pdf"
            Dim imageName As String =  "./AsposePdfKitExample/butterfly.jpg"
            Dim outputFile As String =  "./AsposePdfKitExample/KitTest.pdf"
            Dim pages() As Integer =  New Integer() {1,2,3,4,5}
            Dim inPdfStream As FileStream =  New FileStream(@inputFile,FileMode.Open)
            Dim inImgStream As FileStream =  New FileStream(@imageName,FileMode.Open)
            Dim outputStream As FileStream =  New FileStream(@outputFile,FileMode.Create)
            
            Dim fileInfo As PdfFileInfo =  New PdfFileInfo(inPdfStream)
            inPdfStream.Seek(0,SeekOrigin.Begin)
            Dim height As single =  fileInfo.GetPageHeight(1)
            Dim width As single =  fileInfo.GetPageWidth(1)
            
            Dim mendor As PdfFileMend =  New PdfFileMend(inPdfStream,outputStream)
            mendor.AddImage(inImgStream,pages,50,50,100,100)
            mendor.Close()
            outputStream.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileMend.AddImage(Aspose.Pdf.DocElements.Image,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adheres image to the page of Pdf file at given coordinates,Jpg,Gif,Png,Bmp are supported. The rectangle region for adding is specified by the coordinates of the lower left point and the upper right point.
            </summary>
      <param name="image">Input image object.</param>
      <param name="pageNum">Indicates which page will the image be added to.</param>
      <param name="lowerLeftX">The horizontal position of lower left point on the retangle area lined out for adding image.</param>
      <param name="lowerLeftY">The vertical position of lower left point on the retangle area lined out for adding image.</param>
      <param name="upperRightX">The horizontal position of upper right point on the retangle area lined out for adding image.</param>
      <param name="upperRightY">The vertical position of upper right point on the retangle area lined out for adding image.</param>
      <returns>True for success,or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileMend.Close">
      <summary>
            Closes the PdfFileMend object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileMend.InputFile">
      <summary>
            Sets the input file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileMend.InputStream">
      <summary>
            Sets the input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileMend.OutputFile">
      <summary>
            Sets the output file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileMend.OutputStream">
      <summary>
            Sets the output stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileMend.IsWordWrap">
      <summary>
            Sets a bool value that indicates word wrap in AddText methods.
            If the value is true, the text in FormattedText will word wrap.
            By defalt, the value is false.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfFileSecurity">
      <summary>
            Represents encrypting or decrypting a Pdf file with owner or user password, changing the security setting and password. Supports for AcroForm.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.#ctor(System.String,System.String)">
      <summary>
             Initializes the object of PdfFileSecurity with input and output file.
            </summary>
      <param name="firstInputFile">Source input Pdf file.</param>
      <param name="outputFile">Output Pdf file.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Initialize the object of PdfFileSecurity with input and output stream.
            </summary>
      <param name="firstInputStream"> Input Pdf Stream.</param>
      <param name="outputStream">Output Pdf Stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.#ctor">
      <summary>
            Initialize the object of PdfFileSecurity.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.EncryptFile(System.String,System.String,Aspose.Pdf.Kit.DocumentPrivilege,System.Boolean)">
      <summary>
            Encrypts Pdf file with userpassword and ownerpassword and sets the document's privileges to access.
            The user password and the owner password can be null or empty. The owner password will be replaced 
            with a random string if the input owner password is null or empty.
            </summary>
      <param name="userPassword">User password.</param>
      <param name="ownerPassword">Owner password.</param>
      <param name="privilege">Set privilege.</param>
      <param name="b128Bits">True for 128 bits encryption, false is 40 bits encryption.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.	
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.EncryptFile("userpass","ownerpass",DocumentPrivilege.Print,true);	
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"   'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.EncryptFile("userpass","ownerpass",DocumentPrivilege.Print,true)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.EncryptFile(System.String,System.String,Aspose.Pdf.Kit.PdfPrivilege,System.Boolean)">
      <summary>
            Encrypts Pdf file with userpassword and ownerpassword and sets the document's privileges to access.
            The user password and the owner password can be null or empty. The owner password will be replaced 
            with a random string if the input owner password is null or empty.
            Use this method before 2007/11/25. Aspose has upgraded to a new method EncryptFile(string ,string ,DocumentPrivilege ,bool).
            Please use new method after that date.
            </summary>
      <param name="userPassword">User password.</param>
      <param name="ownerPassword">Owner password.</param>
      <param name="privilege">Set privilege.</param>
      <param name="b128Bits">True for 128 bits encryption, false is 40 bits encryption.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.	
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.EncryptFile("userpass","ownerpass",PdfPrivilege.Print,true);	
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"   'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.EncryptFile("userpass","ownerpass",PdfPrivilege.Print,true)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.DecryptFile(System.String)">
      <summary>
            Decrypts an encrypted Pdf document by owner password. 
            If the document hasn't owner password, it is allow to use user password.
            </summary>
      <param name="ownerPassword">Owner password.</param>
      <returns>True for success,or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0404.pdf"; //The TestPath may be re-assigned.	
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.DecryptFile("ownerpass");
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0404.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.DecryptFile("ownerpass")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.SetPrivilege(Aspose.Pdf.Kit.DocumentPrivilege)">
      <summary>
            Sets Pdf file security without being encrypted.
            The owner password will be added by a random string.
            </summary>
      <param name="privilege">Set privilege.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0405.pdf"; //The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.SetPrivilege(DocumentPrivilege.Print);
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..1\\AsposePdfKitExample\\Kit0405.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.SetPrivilege(DocumentPrivilege.Print)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.SetPrivilege(Aspose.Pdf.Kit.PdfPrivilege)">
      <summary>
            Sets Pdf file security without being encrypted.
            The owner password will be added by a random string.
            Use this method before 2007/11/25. Aspose has upgraded to a new method SetPrivilege(DocumentPrivilege).
            Please use new method after that date.
            </summary>
      <param name="privilege">Set privilege.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0405.pdf"; //The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.SetPrivilege(PdfPrivilege.Print);
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..1\\AsposePdfKitExample\\Kit0405.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.SetPrivilege(PdfPrivilege.Print)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.SetPrivilege(System.String,System.String,Aspose.Pdf.Kit.DocumentPrivilege)">
      <summary>
            Sets Pdf file security with original password.
            </summary>
      <param name="userPassword">Original user password.</param>
      <param name="ownerPassword">Original owner password.</param>
      <param name="privilege">Set privilege.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0405.pdf"; //The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.SetPrivilege(userPassword, ownerPassword, DocumentPrivilege.Print);
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..1\\AsposePdfKitExample\\Kit0405.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.SetPrivilege(userPassword, ownerPassword, DocumentPrivilege.Print)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.SetPrivilege(System.String,System.String,Aspose.Pdf.Kit.PdfPrivilege)">
      <summary>
            Sets Pdf file security with original password.
            Use this method before 2007/11/25. Aspose has upgraded to a new method SetPrivilege(string, string, DocumentPrivilege).
            Please use new method after that date.
            </summary>
      <param name="userPassword">Original user password.</param>
      <param name="ownerPassword">Original owner password.</param>
      <param name="privilege">Set privilege.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0405.pdf"; //The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.SetPrivilege(userPassword, ownerPassword, PdfPrivilege.Print);
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..1\\AsposePdfKitExample\\Kit0405.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.SetPrivilege(userPassword, ownerPassword, PdfPrivilege.Print)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.ChangePassword(System.String,System.String,System.String)">
      <summary>
             Changes the user password and owner password by owner password, keeps the original security settings.
             The new user password and the new owner password can be null or empty. The owner password will be replaced 
             with a random string if the new owner password is null or empty.
             </summary>
      <param name="ownerPassword">Original Owner password.</param>
      <param name="newUserPassword">New User password.</param>
      <param name="newOwnerPassword">New Owner password.</param>
      <returns>True for success,or false.</returns>
      <example>
        <code>
            [C#]
             string inFile = "..\\AsposePdfKitExample\\Kit0406.pdf"; //The TestPath may be re-assigned.
             string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf";	//The TestPath may be re-assigned.
             PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
             fileSecurity.ChangePassword("owner","newuser","newowner");
            
            [Visual Basic]
             Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
             Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0406.pdf"  'The TestPath may be re-assigned.'
             Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
             fileSecurity.ChangePassword("owner","newuser","newowner")	
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.ChangePassword(System.String,System.String,System.String,Aspose.Pdf.Kit.DocumentPrivilege,System.Boolean)">
      <summary>
            Changes the user password and password by owner password, allows to reset Pdf documnent security.
            The new user password and the new owner password can be null or empty. The owner password will be replaced 
            with a random string if the new owner password is null or empty.
            </summary>
      <param name="ownerPassword">Original owner password.</param>
      <param name="newUserPassword">New User password.</param>
      <param name="newOwnerPassword">New Owner password.</param>
      <param name="privilege">Reset security.</param>
      <param name="b128Bits">True for 128 bits encryption, false is 40 bits encryption.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf";	//The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);	
            fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,true);
            
            [Visual Basic] 
            Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0407.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,True)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSecurity.ChangePassword(System.String,System.String,System.String,Aspose.Pdf.Kit.PdfPrivilege,System.Boolean)">
      <summary>
            Changes the user password and password by owner password, allows to reset Pdf documnent security.
            The new user password and the new owner password can be null or empty. The owner password will be replaced 
            with a random string if the new owner password is null or empty.
            Use this method before 2007/11/25. Aspose has upgraded to a new method ChangePassword(string, string, string, DocumentPrivilege, bool).
            Please use new method after that date.
            </summary>
      <param name="ownerPassword">Original owner password.</param>
      <param name="newUserPassword">New User password.</param>
      <param name="newOwnerPassword">New Owner password.</param>
      <param name="privilege">Reset security.</param>
      <param name="b128Bits">True for 128 bits encryption, false is 40 bits encryption.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf";	//The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);	
            fileSecurity.ChangePassword("owner","newuser","newowner", PdfPrivilege.Print,true);
            
            [Visual Basic] 
            Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0407.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.ChangePassword("owner","newuser","newowner", PdfPrivilege.Print,True)
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileSecurity.InputFile">
      <summary>
            Sets the input file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileSecurity.InputStream">
      <summary>
            Sets the input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileSecurity.OutputFile">
      <summary>
            Sets the output file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileSecurity.OutputStream">
      <summary>
            Sets the output stream.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfFileSignature">
      <summary>
            Represents a class to sign a pdf file with a certificate.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfFileSignature.NotCertified">
      <summary>
            These values indicate the author’s specification of which changes to the document will invalidate the signature.
             NotCertified represents not validating signature,
             CertifiedNoChangeAllowed represents that no changes to the document are permitted, any change to the document invalidates the signature.
             CertifiedFromFilling represents that permitted changes are filling in forms, instantiating page templates,and signing; other changes invalidate the signature.
             CertifiedFromFillingAndAnnotations that permitted changes are the same as for CERTIFIED_FORM_FILLING, 
             as well as annotation creation,deletion, and modification; other changes invalidate the signature.
             The default value is 2
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfFileSignature.CertifiedNoChangeAllowed">
      <summary>
            These values indicate the author’s specification of which changes to the document will invalidate the signature.
             NotCertified represents not validating signature,
             CertifiedNoChangeAllowed represents that no changes to the document are permitted, any change to the document invalidates the signature.
             CertifiedFromFilling represents that permitted changes are filling in forms, instantiating page templates,and signing; other changes invalidate the signature.
             CertifiedFromFillingAndAnnotations that permitted changes are the same as for CERTIFIED_FORM_FILLING, 
             as well as annotation creation,deletion, and modification; other changes invalidate the signature.
             The default value is 2
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfFileSignature.CertifiedFromFilling">
      <summary>
            These values indicate the author’s specification of which changes to the document will invalidate the signature.
             NotCertified represents not validating signature,
             CertifiedNoChangeAllowed represents that no changes to the document are permitted, any change to the document invalidates the signature.
             CertifiedFromFilling represents that permitted changes are filling in forms, instantiating page templates,and signing; other changes invalidate the signature.
             CertifiedFromFillingAndAnnotations that permitted changes are the same as for CERTIFIED_FORM_FILLING, 
             as well as annotation creation,deletion, and modification; other changes invalidate the signature.
             The default value is 2
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfFileSignature.CertifiedFromFillingAndAnnotations">
      <summary>
            These values indicate the author’s specification of which changes to the document will invalidate the signature.
             NotCertified represents not validating signature,
             CertifiedNoChangeAllowed represents that no changes to the document are permitted, any change to the document invalidates the signature.
             CertifiedFromFilling represents that permitted changes are filling in forms, instantiating page templates,and signing; other changes invalidate the signature.
             CertifiedFromFillingAndAnnotations that permitted changes are the same as for CERTIFIED_FORM_FILLING, 
             as well as annotation creation,deletion, and modification; other changes invalidate the signature.
             The default value is 2
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.#ctor">
      <summary>
            The constructor of PdfFileSignature class. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.#ctor(System.String,System.String)">
      <summary>
            The constructor of PdfFileSignature class.
            </summary>
      <param name="inputFile">The input file for signature.</param>
      <param name="outputFile">The output file.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.#ctor(System.String,System.String,Aspose.Pdf.Kit.Certificate)">
      <summary>
            The constructor of PdfFileSignature class.
            </summary>
      <param name="input">The input file for signature.</param>
      <param name="output">The output file.</param>
      <param name="cert">The certificate for signature.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.#ctor(Aspose.Pdf.Kit.Certificate)">
      <summary>
            The constructor of PdfFileSignature class.
            </summary>
      <param name="cert">The certificate for signature.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.BindPdf(System.String)">
      <summary> 
            Binds a Pdf file for editing.
            </summary>
      <param name="inputFile">The pdf file to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.BindPdf(System.IO.Stream)">
      <summary> 
            Binds a Pdf stream for editing.
            </summary>
      <param name="inputFile">The pdf stream to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.Save(System.String)">
      <summary>
            Saves the result PDF to file.
            </summary>
      <param name="outputFile">output pdf file</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.Save(System.IO.Stream)">
      <summary>
            Saves the result PDF to stream.
            </summary>
      <param name="outputStream">output pdf stream</param>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfFileSignature.SelfSign">
      <summary>
             The  filter type of "Adobe.PPKLite".
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfFileSignature.VerifySign">
      <summary>
            The  filter type of "VeriSign.PPKVS".
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfFileSignature.WindowsCertificate">
      <summary>
            The  filter type of "Adobe.PPKMS".
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.Sign(System.Int32,System.String,System.String,System.String,System.Boolean,System.Drawing.Rectangle)">
      <summary>
             Make a signature on the pdf document.
            </summary>
      <param name="SigReason">The reason of signature.</param>
      <param name="SigContact">The contact of signature.</param>
      <param name="SigLocation">The location of signature.</param>
      <param name="visible">The visiblity of signature.</param>
      <param name="annotRect">The rect of signature.</param>
      <param name="page">The page on which signature is made.</param>
      <example>
        <code>
            [C#]
            string inFile=TestPath + "example1.pdf";
            string outFile=TestPath + "signature.pdf";
            Certificate cert=new Certificate(TestPath+"allen.pfx","psw");
            PdfFileSignature pdfSign=new PdfFileSignature(cert);
            pdfSign.BindPdf(inFile);
            System.Drawing.Rectangle rect=new System.Drawing.Rectangle(100,100, 200, 100);
            pdfSign.SignModel = PdfFileSignature.WINDOWCERTIFICATE;
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
            pdfSign.CertificationLevel = PdfFileSignature.NOT_CERTIFIED;
            pdfSign.Sign(2,"Allen","success","ChangSha",true,rect);
            pdfSign.Save(outFile);
            
            [Visual Basic]
            Dim cert as Certificate=new Certificate(TestPath+"allen.pfx","psw")
            Dim pdfSign=new PdfFileSignature(cert)
            pdfSign.BindPdf(inFile)
            Dim rect as System.Drawing.Rectangle =new System.Drawing.Rectangle(100,100, 200, 100)
            pdfSign.Sign(2,"Allen","success","ChangSha",true,rect)
            pdfSign.SignModel = PdfFileSignature.WINDOWCERTIFICATE
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg"
            pdfSign.CertificationLevel = PdfFileSignature.NOT_CERTIFIED
            pdfSign.Save(outFile)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.GetSignNames">
      <summary>
             Gets the names of all signature.
             </summary>
      <returns>Return a arrayList.</returns>
      <example>
        <code>
             [C#]
             string inFile=TestPath + "example1.pdf";
             PdfFileSignature pdfSign=new PdfFileSignature();
             pdfSign.BindPdf(inFile); 
             ArrayList names=pdfSign.GetSignNames();
            for(int i=0;i&lt;names.Count;i++)
            {
              Console.WriteLine("signature name:"+(string)names[i]);
              Console.WriteLine("coverswholedocument:"+pdfSign.IsCoversWholeDocument((string)names[i]));
              Console.WriteLine("revision:"+pdfSign.GetRevision((string)names[i]));	
              Console.WriteLine("verifysigned:"+pdfSign.VerifySigned((string)names[i]));
              Console.WriteLine("reason:"+pdfSign.GetReason((string)names[i]));
              Console.WriteLine("location:"+pdfSign.GetLocation((string)names[i]));
              Console.WriteLine("datatime:"+pdfSign.GetDateTime((string)names[i]));		
             }
             Console.WriteLine("totalvision:"+pdfSign.GetToltalRevision());
             [Visual Basic]
             Dim pdfSign as PdfFileSignature =new  PdfFileSignature
             pdfSign.BindPdf(inFile)
             Dim names as ArrayList
             names=pdfSign.GetSignNames()
            For i=0 To names.Count
            
              Console.WriteLine("signature name:"+(string)names[i])
              Console.WriteLine("coverswholedocument:"+pdfSign.IsCoversWholeDocument((string)names[i]))
              Console.WriteLine("revision:"+pdfSign.GetRevision((string)names[i]))	
              Console.WriteLine("verifysigned:"+pdfSign.VerifySigned((string)names[i]))
              Console.WriteLine("reason:"+pdfSign.GetReason((string)names[i]))
              Console.WriteLine("location:"+pdfSign.GetLocation((string)names[i]))
              Console.WriteLine("datatime:"+pdfSign.GetDateTime((string)names[i]))	
             Next i
             Console.WriteLine("totalvision:"+pdfSign.GetToltalRevision())
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.IsContainSignature">
      <summary>
            Checks if the pdf  has a digital signature or not.
            </summary>
      <returns>Return a  result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.IsCoversWholeDocument(System.String)">
      <summary>
            Checks if the signature covers the whole document.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return a  result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.GetRevision(System.String)">
      <summary>
            Gets the revision of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return the number of signature revision.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.GetToltalRevision">
      <summary>
            Gets the toltal revision.
            </summary>
      <returns>Return the total number of signature revision.</returns>
    </member>
    <!-- 对于成员“M:Aspose.Pdf.Kit.PdfFileSignature.RemoveSignature(System.String)”忽略有格式错误的 XML 注释 -->
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.VerifySigned(System.String)">
      <summary>
            Checks the validity of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return a result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.GetSignerName(System.String)">
      <summary>
            Gets the name of person or organization who signing the pdf document.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns the result of the signer's name.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.GetDateTime(System.String)">
      <summary>
            Gets the signature's datetime.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return the result of DateTime type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.GetReason(System.String)">
      <summary>
            Gets the reason of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns a result of sting type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.GetLocation(System.String)">
      <summary>
            Gets the location of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns a result of sting type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.GetContactInfo(System.String)">
      <summary>
            Gets the contact information of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns a result of sting type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.GetResultOfVerifyCertificates">
      <summary>
            Getts the result string when the return of verifing certifcates is true
            </summary>
      <returns>Returns a string to represent the result. </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.GetSignatureAlgorithm(System.String)">
      <summary>
            Getts the signature algorithm.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns a string.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.getX509Certificate(System.String)">
      <summary>
            Gets the X509Certificate from the signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns a X509Certificate.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.VerifySignature(System.String,System.String)">
      <summary>
            Verifies the signature according to the specified  Public Key file formatted by xml.the xml public key file
            can be generated by RSACryptoServiceProvider in .Net,or it can be generated by other tools only if its' format is 
            the same as generated by .Net.
            </summary>
      <param name="signName">The name of signature.</param>
      <param name="xmlPublicKeyFile">The xml public key file.</param>
      <returns>Returns true if verifying successfully,or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.VerifySignature(System.String,System.Security.Cryptography.RSACryptoServiceProvider)">
      <summary>
            Verifies the signature according to the RSACryptoServiceProvider object.
            </summary>
      <param name="signName">The name of signature.</param>
      <param name="rsaCryptoServiceProvider">The RSACryptoServiceProvider object.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileSignature.GetCertPublicKey(System.String)">
      <summary>
            Gets a RSACryptoServiceProvider object for certificate file(.cer).
            </summary>
      <param name="certFile">the certFile.</param>
      <returns>Returns a RSACryptoServiceProvider.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileSignature.SignModel">
      <summary>
            Sets or gets the model of sign,it's value can be  "SelfSign","VerifySign","WindowsCertificate",
            the default value is self sign.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileSignature.CertificationLevel">
      <summary>
            Sets or gets the certification level, the certification level can be: 
            NotCertified , CertifiedNoChangeAllowed ,CertifiedFromFilling , CertifiedFromFillingAndAnnotations.
            any change to the document that goes against the certification level will make it lose the certified status. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileSignature.SignatureAppearance">
      <summary>
            Sets a graphic appearance for the signature.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfFileStamp">
      <summary> 
            Represents a class for adding watermark or background on the page. 
            The watermark or background object is representted by the class Stamp, it can be text, image and other Pdf file's page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.#ctor(System.String,System.String)">
      <summary>
            Creates a PdfFileStamp object.
            </summary>
      <param name="inputFile">Source input Pdf file.</param>
      <param name="outputFile">Output Pdf file.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Creates a PdfFileStamp object.
            </summary>
      <param name="inputStream">Source input Pdf Stream.</param>
      <param name="outputStream">Output Pdf Stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Creates a PdfFileStamp object supporting to keep the security of pdf documents.
            </summary>
      <param name="inputFile">Source input Pdf file.</param>
      <param name="outputFile">Output Pdf file.</param>
      <param name="keepSecurity">The flag of keeping security.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.#ctor(System.IO.Stream,System.IO.Stream,System.Boolean)">
      <summary>
            Creates a PdfFileStamp object supporting to keep the security of pdf documents..
            </summary>
      <param name="inputStream">Source input Pdf Stream.</param>
      <param name="outputStream">Output Pdf Stream.</param>
      <param name="keepSecurity">The flag of keeping security.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.#ctor">
      <summary>
            Creates a PdfFileStamp object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.Close">
      <summary>
            Closes the PdfFileStamp object,writes the watermark,logo and stamp content to the Pdf document. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddStamp(Aspose.Pdf.Kit.Stamp)">
      <summary>
            Adds stamp at the specified pages of pdf file.The stamp can be added as watermark,logo and background according to the  IsBackground property of stamp.
            </summary>
      <param name="stamp">Stamp content.</param>
      <example>
        <code>
            [C#]
            string backgroundFile = "butterfly.jpg";
            string watermarkFile = "imgLogoPDF.gif";
            string inFile ="example1.pdf";
            string outFile ="StampAll.pdf";
            PdfFileInfo fileInfo =  new PdfFileInfo(inFile);
            
            Stamp watermarkStamp = new Stamp();
            watermarkStamp.BindImage(watermarkFile);
            watermarkStamp.Rotation = 15;
            watermarkStamp.SetOrigin(fileInfo.GetPageWidth(1)/3,fileInfo.GetPageHeight(1)/3);
            watermarkStamp.Opacity = 0.1f;
            		
            Stamp backgroundStamp  = new Stamp();
            backgroundStamp.BindImage(backgroundFile);
            backgroundStamp.IsBackground = true;//Adds the stamp as background
            backgroundStamp.Opacity = 0.5f;
            
            Stamp logoStamp = new Stamp();
            logoStamp.BindLogo(new FormattedText("Hello World!",System.Drawing.Color.FromArgb(180,0,0),FontStyle.TimesItalic,EncodingType.Winansi,false,50));
            logoStamp.Rotation = 45;
            logoStamp.Opacity = 1f;
            
            Stamp pdfFileStamp = new Stamp();
            pdfFileStamp.bindPdf(inputPath + "Online.pdf", 1);
            
            PdfFileStamp stamper = new PdfFileStamp(inFile,outFile);
            stamper.AddStamp(logoStamp);
            stamper.AddStamp(backgroundStamp);
            stamper.AddStamp(watermarkStamp);
            stamper.AddStamp(pdfFileStamp);
            stamper.Close();
            
            [Visual Basic]
            Dim backgroundFile As String = "butterfly.jpg" 
            Dim watermarkFile As String =  "imgLogoPDF.gif" 
            Dim inFile As String =  "example1.pdf" 
            Dim outFile As String = "StampAll.pdf" 
            Dim fileInfo As PdfFileInfo =  New PdfFileInfo(inFile) 
            
            Dim watermarkStamp As Stamp =  New Stamp() 																																	   watermarkStamp.BindImage(watermarkFile)
            watermarkStamp.Rotation = 15
            watermarkStamp.SetOrigin(fileInfo.GetPageWidth(1)/3,fileInfo.GetPageHeight(1)/3)
            watermarkStamp.Opacity = 0.1f
            
            Dim backgroundStamp As Stamp =  New Stamp() 
            backgroundStamp.BindImage(backgroundFile)
            backgroundStamp.IsBackground = True   'Adds the stamp as background
            backgroundStamp.Opacity = 0.5f
            
            Dim logoStamp As Stamp =  New Stamp() 
            logoStamp.BindLogo(New FormattedText("Hello World!",System.Drawing.Color.FromArgb(180,0,0),FontStyle.TimesItalic,EncodingType.Winansi,False,50))
            logoStamp.Rotation = 45
            logoStamp.Opacity = 1f
            
            Dim pdfFileStamp As Stamp =  New Stamp() 
            pdfFileStamp.bindPdf(inputPath + "Online.pdf", 1)
            
            Dim stamper As PdfFileStamp =  New PdfFileStamp(inFile,outFile) 
            stamper.AddStamp(logoStamp)
            stamper.AddStamp(backgroundStamp)
            stamper.AddStamp(watermarkStamp)
            stamper.AddStamp(pdfFileStamp)
            stamper.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddPageNumber(System.String)">
      <summary>
            Adds page number in each pages of the pdf file and save it.
            </summary>
      <param name="formatString">the format of page number string, must contain one and only one "#", such as "Page #". The "#" string will be replaced with page number.</param>
      <example>
        <code>
            [C#]
            System.String inFile = "text.pdf";                            
            System.String outFile = "textwithpagenumber.pdf";
            PdfFileStamp fileStamp = null;                                
            
            fileStamp = new PdfFileStamp(inFile, outFile);				
            fileStamp.AddPageNumber("Page # .");        
            fileStamp.Close();                          
            
            [Visual Basic]
            Dim inFile As String =  "text.pdf"                
            Dim outFile As String =  "textwithpagenumber.pdf" 
            Dim fileStamp As PdfFileStamp =  Nothing                 
                                                                     
            fileStamp = New PdfFileStamp(inFile, outFile)            
            'add page number                                         
            fileStamp.addPageNumber("Page #.")                      
            fileStamp.close()                                        
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddPageNumber(Aspose.Pdf.Kit.FormattedText)">
      <summary>
            Adds page number in each pages of the pdf file and save it.
            </summary>
      <param name="formattedText">a FormattedText object which contain the format of page number string, must contain one and only one "#", such as "Page #". The "#" string will be replaced with page number.</param>
      <example>
        <code>
            [C#]
            System.String inFile = "text.pdf";                            
            System.String outFile = "textwithpagenumber.pdf";
            PdfFileStamp fileStamp = null;                                
            
            fileStamp = new PdfFileStamp(inFile, outFile);	
            FormattedText ft = new FormattedText("Page #.",System.Drawing.Color.FromArgb((0,200,0),
            FontStyle.TimesRoman,EncodingType.Winansi,false,12);			
            fileStamp.AddPageNumber(ft);        
            fileStamp.Close();                          
            
            [Visual Basic]
            Dim inFile As String =  "text.pdf"                
            Dim outFile As String =  "textwithpagenumber.pdf" 
            Dim fileStamp As PdfFileStamp =  Nothing                 
                                                                     
            fileStamp = New PdfFileStamp(inFile, outFile)            
            'add page number        
            Dim ft As FormattedText =  New FormattedText("Page #.",System.Drawing.Color.FromArgb((0,200,0),
            FontStyle.TimesRoman,EncodingType.Winansi,False,12)                                 
            fileStamp.addPageNumber(ft)                      
            fileStamp.close()                                        
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddPageNumber(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds page number in each pages of the pdf file,besides,page number's position can be setted,simultaneity,the exact position can be confirmed
            according to one or two values among leftMargin,rightMargin,topMargin,bottomMargin,if a parameter is zero, the parameter can be ignored.
            </summary>
      <param name="formatString">The format of page number string, must contain one and only one "#", such as "Page #". The "#" string will be replaced with page number.</param>
      <param name="position">the page number's position. 0-bottom middle, 1-bottom right, 2-upper right, 3-sides right,
            4-upper middle,5-bottom left,6-sides left,7-upper left.Default is 0, means page number position is bottom middle.</param>
      <param name="leftMargin">The distance between the left edge of the page and the left end of the page number string. </param>
      <param name="rightMargin">The distance between the right edge of the page and the right end of the page number string.</param>
      <param name="topMargin">The distance between the top edge of the page and the top of the page number string.</param>
      <param name="bottomMargin">The distance between the bottom edge of the page and the bottom of the page number string.</param>
      <example>
        <code>
            [C#]
            System.String inFile = "text.pdf";                            
            System.String outFile = "textwithpagenumber.pdf";
            PdfFileStamp fileStamp = null;                                
            fileStamp = new PdfFileStamp(inFile, outFile);	
              fileStamp.AddPageNumber("Page # .",5,15,0,0,20);         
            fileStamp.Close();                          
            
            [Visual Basic]
            Dim inFile As String =  "text.pdf"                
            Dim outFile As String =  "textwithpagenumber.pdf" 
            Dim fileStamp As PdfFileStamp =  Nothing                 
                                                                     
            fileStamp = New PdfFileStamp(inFile, outFile)            
            'add page number        
             fileStamp.AddPageNumber("Page # .",5,15,0,0,20)                     
            fileStamp.close()                                        
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddPageNumber(Aspose.Pdf.Kit.FormattedText,System.Single,System.Single)">
      <summary>
            Add page number in the page with the specified  x and y.
            </summary>
      <param name="formattedText">a FormattedText object which contain the format of page number string, must contain one and only one "#", such as "Page #". The "#" string will be replaced with page number.</param>
      <param name="x">The x coordinate of the position where the page number is added.</param>
      <param name="y">The y coordinate of the position where the page number is added.</param>
      <example>
        <code>
            [C#]
            System.String inFile = "text.pdf";                            
            System.String outFile = "textwithpagenumber.pdf";
            PdfFileStamp fileStamp = null;                                
            fileStamp = new PdfFileStamp(inFile, outFile);	
              fileStamp.AddPageNumber("Page # .",100,200);         
            fileStamp.Close();                          
            
            [Visual Basic]
            Dim inFile As String =  "text.pdf"                
            Dim outFile As String =  "textwithpagenumber.pdf" 
            Dim fileStamp As PdfFileStamp =  Nothing                 
                                                                     
            fileStamp = New PdfFileStamp(inFile, outFile)            
            'add page number        
             fileStamp.AddPageNumber("Page # .",100,200)                     
            fileStamp.close()                                        
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddPageNumber(Aspose.Pdf.Kit.FormattedText,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds page number in each pages of the pdf file,besides,page number's position can be setted,simultaneity,the exact position can be confirmed
            according to one or two values among leftMargin,rightMargin,topMargin,bottomMargin,if a parameter is zero, the parameter can be ignored.
            </summary>
      <param name="formatString">The format of page number string, must contain one and only one "#", such as "Page #". The "#" string will be replaced with page number.</param>
      <param name="position">the page number's position. 0-bottom middle, 1-bottom right, 2-upper right, 3-sides right,
            4-upper middle,5-bottom left,6-sides left,7-upper left.Default is 0, means page number position is bottom middle.</param>
      <param name="leftMargin">The distance between the left edge of the page and the left end of the page number string. </param>
      <param name="rightMargin">The distance between the right edge of the page and the right end of the page number string.</param>
      <param name="topMargin">The distance between the top edge of the page and the top of the page number string.</param>
      <param name="bottomMargin">The distance between the bottom edge of the page and the bottom of the page number string.</param>
      <example>
        <code>
            [C#]
            System.String inFile = "text.pdf";                            
            System.String outFile = "textwithpagenumber.pdf";
            PdfFileStamp fileStamp = null;                                	
            fileStamp = new PdfFileStamp(inFile, outFile);	
            FormattedText ft = new FormattedText("Page #.",System.Drawing.Color.FromArgb((0,200,0),
            FontStyle.TimesRoman,EncodingType.Winansi,false,12);			
            fileStamp.AddPageNumber(ft,5,15,0,0,20);        
            fileStamp.Close();                          
            [Visual Basic]
            Dim inFile As String =  "text.pdf"                
            Dim outFile As String =  "textwithpagenumber.pdf" 
            Dim fileStamp As PdfFileStamp =  Nothing                                                                          
            fileStamp = New PdfFileStamp(inFile, outFile)            
            'add page number        
            Dim ft As FormattedText =  New FormattedText("Page #.",System.Drawing.Color.FromArgb((0,200,0),
            FontStyle.TimesRoman,EncodingType.Winansi,False,12)                                 
            fileStamp.addPageNumber(ft,5,15,0,0,20)                      
            fileStamp.close()                                        
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddHeader(Aspose.Pdf.Kit.FormattedText,System.Single)">
      <summary>
            Adds the header in each pages of the pdf file,the format header text is placed in the middle-top of pages.
            the unit for margin is point.(1 inch = 72 point, 1 cm = 28.3 point)
            </summary>
      <param name="formattedText">The format of header string.</param>
      <param name="topMargin">The distance between the top edge of the page and the top of the header string,if the value is zero,it can be ignored and 
            the default value is used.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddHeader(Aspose.Pdf.Kit.FormattedText,System.Single,System.Single,System.Single)">
      <summary>
            Adds the header in each pages of the pdf file,the exact positon of header can be confirmed by settin topMargin,leftMargin or rightMargin.
            </summary>
      <param name="formattedText">The format of header string.</param>
      <param name="topMargin">The distance between the top edge of the page and the top of the header string,if the value is zero,it can be ignored.</param>
      <param name="leftMargin">The distance between the left edge of the page and the left end  of the header string,if the value is zero,it can be ignored.</param>
      <param name="rightMargin">The distance between the right edge of the page and the right end of the header string,if the value is zero,it can be ignored.</param>
      <example>
        <code>
            [C#]
            System.String inFile = "header.pdf";                            
            System.String outFile = "header_out.pdf";
            PdfFileStamp fileStamp = null;                                
            fileStamp = new PdfFileStamp(inFile, outFile);	
            FormattedText ft = new FormattedText("Welcome to Aspose!",System.Drawing.Color.FromArgb((0,200,0),
            FontStyle.TimesRoman,EncodingType.Winansi,false,12);			
            fileStamp.AddHeader(ft,5,15,0,0,20);        
            fileStamp.Close();                          
            [Visual Basic]
            Dim inFile As String =  "header.pdf"                
            Dim outFile As String =  "header_out.pdf" 
            Dim fileStamp As PdfFileStamp =  Nothing                 	                                                         
            fileStamp = New PdfFileStamp(inFile, outFile)                    
            Dim ft As FormattedText =  New FormattedText("Welcome to Aspose!",System.Drawing.Color.FromArgb((0,200,0),
            FontStyle.TimesRoman,EncodingType.Winansi,False,12)                                 
            fileStamp.AddHeader(ft,5,15,0,0,20)                      
            fileStamp.close()                                        
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddHeader(System.String,System.Single)">
      <summary>
            Adds the header in each pages of the pdf file,the header image is placed in the middle-top of pages.
             </summary>
      <param name="imageFile">The imge file.</param>
      <param name="topMargin">The distance between the top edge of the page and the top of the header image,if the value is zero,it can be ignored.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddHeader(System.String,System.Single,System.Single,System.Single)">
      <summary>
             Adds the header in each pages of the pdf file,the exact positon of header can be confirmed by settin topMargin,leftMargin or rightMargin.
             </summary>
      <param name="imageFile">The imge file.</param>
      <param name="topMargin">The distance between the top edge of the page and the top of the header image,if the value is zero,it can be ignored.</param>
      <param name="leftMargin">The distance between the left edge of the page and the left edge  of the header image,if the value is zero,it can be ignored.</param>
      <param name="rightMargin">The distance between the right edge of the page and the right edge of the header image,if the value is zero,it can be ignored.</param>
      <example>
        <code>
             [C#]
             System.String inFile = "header.pdf";                            
            	System.String outFile = "header_out.pdf";
             String imageFile="image.jpg";
            	PdfFileStamp fileStamp = null;                                
            	fileStamp = new PdfFileStamp(inFile, outFile);		
             fileStamp.AddHeader(imageFile,15,35,0);        
            	fileStamp.Close();                          
            	[Visual Basic]
             Dim inFile As String =  "header.pdf"                
             Dim outFile As String =  "header_out.pdf"
             Dim imageFile AS String ="image.jpg"
             Dim fileStamp As PdfFileStamp =  Nothing                 	                                                         
            	fileStamp = New PdfFileStamp(inFile, outFile)                    
            fileStamp.AddHeader(imageFile,15,35,0)        
             fileStamp.close()                                        
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddHeader(System.IO.Stream,System.Single)">
      <summary>
            Adds the header in each pages of the pdf file with the specified image stream,the header image is placed in the middle-top of pages.
            </summary>
      <param name="imageStream">The image stream.</param>
      <param name="topMargin">The distance between the top edge of the page and the top of the header image,if the value is zero,it can be ignored.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddHeader(System.IO.Stream,System.Single,System.Single,System.Single)">
      <summary>
            Adds the header in each pages of the pdf file with the specified image stream,the exact positon of header can be confirmed by settin topMargin,leftMargin or rightMargin.
            </summary>
      <param name="imageStream">The image stream.</param>
      <param name="topMargin">The distance between the top edge of the page and the top of the header image,if the value is zero,it can be ignored.</param>
      <param name="leftMargin">The distance between the left edge of the page and the left edge  of the header image,if the value is zero,it can be ignored.</param>
      <param name="rightMargin">The distance between the right edge of the page and the right edge of the header image,if the value is zero,it can be ignored.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddFooter(Aspose.Pdf.Kit.FormattedText,System.Single)">
      <summary>
            Adds the footer in each pages of the pdf file. By default, the footer is placed in the middle-bottom of pages.
            the unit of Margin parameter is point.(1 inch = 72 point, 1 cm = 28.3 point)
            </summary>
      <param name="formattedText">The format of header string.</param>
      <param name="bottomMargin">The distance between the bottom edge of the page and the bottom of the footer image,if the value is zero,it can be ignored.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddFooter(Aspose.Pdf.Kit.FormattedText,System.Single,System.Single,System.Single)">
      <summary>
            Adds the footer in each pages of the pdf file,the exact positon of footer can be confirmed by settin bottomMargin,leftMargin or rightMargin.
            </summary>
      <param name="formattedText">The format of header string.</param>
      <param name="bottomMargin">The distance between the bottom edge of the page and the bottom of the footer string,if the value is zero,it can be ignored.</param>
      <param name="leftMargin">The distance between the left edge of the page and the left end  of the footer string,if the value is zero,it can be ignored.</param>
      <param name="rightMargin">The distance between the right edge of the page and the right end of the footer string,if the value is zero,it can be ignored.</param>
      <example>
        <code>
            [C#]
            System.String inFile = "footer.pdf";                            
            System.String outFile = "footer_out.pdf";
            PdfFileStamp fileStamp = null;                                
            fileStamp = new PdfFileStamp(inFile, outFile);	
            FormattedText ft = new FormattedText("Welcome to Aspose!",System.Drawing.Color.FromArgb((0,200,0),
            FontStyle.TimesRoman,EncodingType.Winansi,false,12);			
            fileStamp.AddFooter(ft,5,15,0,0,20);        
            fileStamp.Close();                          
            [Visual Basic]
            Dim inFile As String =  "footer.pdf"                
            Dim outFile As String =  "footer_out.pdf" 
            Dim fileStamp As PdfFileStamp =  Nothing                 	                                                         
            fileStamp = New PdfFileStamp(inFile, outFile)                    
            Dim ft As FormattedText =  New FormattedText("Welcome to Aspose!",System.Drawing.Color.FromArgb((0,200,0),
            FontStyle.TimesRoman,EncodingType.Winansi,False,12)                                 
            fileStamp.AddFooter(ft,5,15,0,0,20)                      
            fileStamp.close()                                        
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddFooter(System.String,System.Single)">
      <summary>
            Adds the footer in each pages of the pdf file. By default, the footer image is placed in the middle-bottom of pages.
             </summary>
      <param name="imageFile">The imge file.</param>
      <param name="bottomMargin">The distance between the bottom edge of the page and the bottom of the footer image,if the value is zero,it can be ignored.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddFooter(System.String,System.Single,System.Single,System.Single)">
      <summary>
            Adds the footer in each pages of the pdf file,the exact positon of footer can be confirmed by settin bottomMargin,leftMargin or rightMargin.
            </summary>
      <param name="imageFile">The imge file.</param>
      <param name="bottomMargin">The distance between the bottom edge of the page and the bottom of the footer image,if the value is zero,it can be ignored.</param>
      <param name="leftMargin">The distance between the left edge of the page and the left edge  of the footer image,if the value is zero,it can be ignored.</param>
      <param name="rightMargin">The distance between the right edge of the page and the right edge of the footer image,if the value is zero,it can be ignored.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddFooter(System.IO.Stream,System.Single)">
      <summary>
            Adds the footer in each pages of the pdf file with the specified image stream. By default, the footer image is placed in the middle-bottom of pages.
            </summary>
      <param name="imageStream">The image stream.</param>
      <param name="bottomMargin">The distance between the bottom edge of the page and the bottom of the footer image,if the value is zero,it can be ignored.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddFooter(System.IO.Stream,System.Single,System.Single,System.Single)">
      <summary>
             Adds the footer in each pages of the pdf file with the specified image stream,the exact positon of footer can be confirmed by settin bottomMargin,leftMargin or rightMargin.
            </summary>
      <param name="imageStream">The image stream.</param>
      <param name="bottomMargin">The distance between the bottom edge of the page and the bottom of the footer image,if the value is zero,it can be ignored.</param>
      <param name="leftMargin">The distance between the left edge of the page and the left edge  of the footer image,if the value is zero,it can be ignored.</param>
      <param name="rightMargin">The distance between the right edge of the page and the right edge of the footer image,if the value is zero,it can be ignored.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddPageNumber(System.String,System.Int32)">
      <summary>
            Adds page number in the specified position of each page of a pdf file.
            </summary>
      <param name="formatString">The format of page number string, must contain one and only one "#", such as "Page #". The "#" string will be replaced with page number.</param>
      <param name="position">the page number's position. 0-bottom middle, 1-bottom right, 2-upper right, 3-sides right, 4-upper middle.Default is 0, means page number position is bottom middle.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfFileStamp.AddPageNumber(Aspose.Pdf.Kit.FormattedText,System.Int32)">
      <summary>
            Adds page number in each pages of the pdf file and save it in the appointed position.
            </summary>
      <param name="formattedText">a FormattedText object which contain the format of page number string, must contain one and only one "#", such as "Page #". The "#" string will be replaced with page number.</param>
      <param name="position">the page number's position. 0-bottom middle, 1-bottom right, 2-upper right, 3-sides right, 4-upper middle.Default is 0, means page number position is bottom middle.</param>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileStamp.KeepSecurity">
      <summary>
            Keeps the security if ture.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileStamp.InputFile">
      <summary>
            Sets the input file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileStamp.InputStream">
      <summary>
            Sets the input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileStamp.OutputFile">
      <summary>
            Sets the output file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileStamp.OutputStream">
      <summary>
            Sets the output stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileStamp.PageNumberRotation">
      <summary>
            Stes or gets the rotation of page number.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileStamp.PageHeight">
      <summary>
            Gets the page's height of pdf file which you want to be stamped.
            </summary>
      <returns>page height.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileStamp.PageWidth">
      <summary>
            Gets the page's width of pdf file which you want to be stamped. 
            </summary>
      <returns>Page width.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfFileStamp.StartingNumber">
      <summary>
            Gets or Sets the startingNumber number for page numbering. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfPageEditor">
      <summary> 
            Represents a class to edit the PDF file's page, including rorating page, zooming page, moving position and changing page size. 
            The edit to a page with AcroForm is not supported now.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfPageEditor.#ctor">
      <summary> 
            The constructor of the PdfPageEditor object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfPageEditor.BindPdf(System.String)">
      <summary> 
            Binds an input pdf file.
            </summary>
      <param name="inputFile">The pdf file to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfPageEditor.BindPdf(System.IO.Stream)">
      <summary> 
            Binds a Pdf stream for editing.
            </summary>
      <param name="inputFile">The pdf stream to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfPageEditor.Save(System.String)">
      <summary>
            Saves the result PDF to file.
            </summary>
      <param name="outputFile">output pdf file</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfPageEditor.Save(System.IO.Stream)">
      <summary>
            Saves the result PDF to stream.
            </summary>
      <param name="outputStream">output pdf stream</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfPageEditor.MovePosition(System.Single,System.Single)">
      <summary>
            Moves the origin from (0, 0) to the point that appointted. 
            The origin is left-bottom and the unit is point(1 inch = 72 points). 
            </summary>
      <param name="moveX">X-coordinate.</param>
      <param name="moveY">Y-coordinate.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfPageEditor.GetPages">
      <summary>
            get the total number of pages
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfPageEditor.GetPageSize(System.Int32)">
      <summary>
            get the page size of the appointed page.
            </summary>
      <param name="page">the page number</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfPageEditor.GetPageRotation(System.Int32)">
      <summary>
            get the rotation of the appointed page.
            </summary>
      <param name="page">the page number</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfPageEditor.GetPageBoxSize(System.Int32,System.String)">
      <summary>
            Gets the box size of a pdf document page, the box type includes "trim", "art", "bleed", "crop", "media".
            </summary>
      <param name="page">The page number.</param>
      <param name="pageBoxName">The box type:"trim", "art", "bleed", "crop", "media".</param>
      <returns>Returns a rectangle.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfPageEditor.TransitionDuration">
      <summary>
            The duration of the transition effect.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfPageEditor.TransitionType">
      <summary>
            The transition style to use when moving to this page from another during a presentation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfPageEditor.DisplayDuration">
      <summary>
            Display duration for pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfPageEditor.Pages">
      <summary>
            Sets the page numbers to be edited. By default,each page would be edited.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfPageEditor.Rotation">
      <summary>
            Sets the rotation of the pages, the ratation must be 0, 90, 180 or 270.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfPageEditor.PageRotations">
      <summary>
            A hashtable contains the page number and rotation degree,
            the key represents the page number,the value of key represents the rotation degree.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfPageEditor.Zoom">
      <summary>
            Sets the zoom coefficient.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfPageEditor.PageSize">
      <summary>
            Sets the output file's page size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfPageEditor.Alignment">
      <summary>
            Sets the horizontal alignment of the original PDF content and the result page, default is AlignmentType.Left.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfPageEditor.VerticalAlignment">
      <summary>
            Sets the vertical alignment of the original PDF content and the result page, default is VerticalAlignmentType.Bottom.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfPrivilege">
      <summary>
            Enumerates the privileges for accessing Pdf file. Refer to<see cref="T:Aspose.Pdf.Kit.PdfFileSecurity" />.
            Use this class before 2007/11/25. Aspose has replaced it to a new class DocumentPrivilege. Refer to<see cref="T:Aspose.Pdf.Kit.DocumentPrivilege" />. 
            Please use new class after that date.   
            </summary>
      <example>
        <code>
            [C#]	
            PdfFileSecurity fileSecurity = new PdfFileSecurity("in.pdf","out.pdf");		
            fileSecurity.SetPrivilege(DocumentPrivilege.Assembly|DocumentPrivilege.Copy);
            
            [Visual Basic]
            Dim fileSecurity As PdfFileSecurity = New PdfFileSecurity("in.pdf","out.pdf")
            fileSecurity.SetPrivilege(DocumentPrivilege.Assembly Or DocumentPrivilege.Copy)
            </code>
      </example>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfPrivilege.Copy">
      <summary>
            Allows copying file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfPrivilege.Print">
      <summary>
            Allows printing file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfPrivilege.ModifyContents">
      <summary>
            Allows modifying file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfPrivilege.ModifyAnnotations">
      <summary>
            Allows modifying annotations of file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfPrivilege.FillIn">
      <summary>
            Allows filling forms in file. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfPrivilege.ScreenReaders">
      <summary>
            Only permits to reader on screen.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfPrivilege.Assembly">
      <summary>
            Allows assemblying file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfPrivilege.DegradedPrinting">
      <summary>
            Allows degraded printing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.PdfPrivilege.AllowAll">
      <summary>
            All allowed.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfViewer">
      <summary>
        <BLOCKQUOTE class="dtBlock">
          <Font color="red">NOTE: This is Beta version of PdfViewer. Some features may not be 
            supported well and we may be not able to fix them in short time.</Font>
        </BLOCKQUOTE> 
            Represents a class to view or print a pdf.
            Print quality: it is not as high as the Adobe Reader since it really prints pictures converted from a pdf. It is necessary to make sure whether it can meet your quality requirement.
            Conversion rate: one page 2 seconds.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.#ctor">
      <summary> 
            The constructor of the PdfViewer object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.OpenPdfFile(System.String)">
      <summary>
             Opens a Pdf file, but does not actually decode the pages of the Pdf file.
             </summary>
      <param name="filePath">The path of Pdf file.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.OpenPdfFile(System.IO.Stream)">
      <summary>
             Opens a Pdf file stream. But does not actually decode the pages of the Pdf file. 
             </summary>
      <param name="inputStream">The pdf stream to be opened.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")));
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")))
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.PrintLargePdf(System.String)">
      <summary>
             Opens and prints a large Pdf file. If your Pdf file has hundreds of pages or more or its size is 
             more than 3 MB, this method is recommended to get better performance.  
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="filePath">The path of Pdf file.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;     //print the file with adjusted size
            viewer.AutoRotate = true;     //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintLargePdf(@"d:\test.pdf");
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true      'print the file with adjusted size
            viewer.AutoRotate = true      'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintLargePdf(@"d:\test.pdf")
            viewer.ClosePdfFile();
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.PrintLargePdf(System.IO.Stream)">
      <summary>
             Opens and prints a large Pdf stream. If your Pdf file has hundreds of pages or more or its size is 
             more than 3 MB, this method is recommended to get better performance.  
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="inputStream">The pdf stream to be opened  and printed..</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;        //print the file with adjusted size
            viewer.AutoRotate = true;        //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")));
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true         'print the file with adjusted size
            viewer.AutoRotate = true         'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")))
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.PrintLargePdf(System.String,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Opens and prints a large Pdf file with specified printer settings. If your Pdf file has hundreds 
             of pages or more or its size is more than 3 MB, this method is recommended to get better performance. 
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="filePath">The path of Pdf file.</param>
      <param name="printerSettings">The printer settings.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;       //print the file with adjusted size
            viewer.AutoRotate = true;       //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            viewer.PrintLargePdf(@"d:\test.pdf",ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true        'print the file with adjusted size
            viewer.AutoRotate = true        'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            viewer.PrintLargePdf(@"d:\test.pdf",ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.PrintLargePdf(System.IO.Stream,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Opens and prints a large Pdf stream with specified printer settings. If your Pdf file has hundreds 
             of pages or more or its size is more than 3 MB, this method is recommended to get better performance.  
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="inputStream">The pdf stream to be opened  and printed..</param>
      <param name="printerSettings">The printer settings.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;       //print the file with adjusted size
            viewer.AutoRotate = true;       //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true        'print the file with adjusted size
            viewer.AutoRotate = true        'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.PrintLargePdf(System.String,System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Opens and prints a large Pdf file with specified page settings and printer settings. If your Pdf 
             file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to 
             get better performance.
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="filePath">The path of Pdf file.</param>
      <param name="pageSettings">The page settings.</param>
      <param name="printerSettings">The printer settings.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;       //print the file with adjusted size
            viewer.AutoRotate = true;       //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            PageSettings pgs = new PageSettings();
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169);
            pgs.Margins = new Margins(0, 0, 0, 0);
            viewer.PrintLargePdf(@"d:\test.pdf",pgs,ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true       'print the file with adjusted size
            viewer.AutoRotate = true       'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            Dim pgs As PageSettings=new PageSettings()
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169)
            pgs.Margins = new Margins(0, 0, 0, 0)
            viewer.PrintLargePdf(@"d:\test.pdf",pgs,ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.PrintLargePdf(System.IO.Stream,System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Opens and prints a large Pdf stream with specified page settings and printer settings. If your Pdf 
             file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to 
             get better performance. 
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="inputStream">The pdf stream to be opened and printed.</param>
      <param name="pageSettings">The page settings.</param>
      <param name="printerSettings">The printer settings.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;       //print the file with adjusted size
            viewer.AutoRotate = true;       //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            PageSettings pgs = new PageSettings();
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169);
            pgs.Margins = new Margins(0, 0, 0, 0);
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),pgs,ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true       'print the file with adjusted size
            viewer.AutoRotate = true       'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            Dim pgs As PageSettings=new PageSettings()
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169)
            pgs.Margins = new Margins(0, 0, 0, 0)
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),pgs,ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.ClosePdfFile">
      <summary>
            Closes the current Pdf file.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.DecodePage(System.Int32)">
      <summary>
            Decodes a page of one Pdf file.
            </summary>
      <param name="pageNumber">The page number of one Pdf file which must be between 1 and PageCount.</param>
      <returns>return the Pdf page image.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.PrintDocumentWithSetup">
      <summary>
             Prints the Pdf document with a setup dialog. Choose a printer using the dialog.
             </summary>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.AutoResize = true;         //print the file with adjusted size
            viewer.AutoRotate = true;         //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintDocumentWithSetup();
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")   
            viewer.AutoResize = true          'print the file with adjusted size
            viewer.AutoRotate = true          'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintDocumentWithSetup()
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.PrintDocumentWithSettings(System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Prints the Pdf document with settings. If the document size is not complatible to page size, pdf.kit will extend it to fit page size.
             </summary>
      <param name="pageSettings">The page setting of the printing document.</param>
      <param name="printerSettings">The printer setting of the printing document.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.AutoResize = true;         //print the file with adjusted size
            viewer.AutoRotate = true;         //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            PageSettings pgs = new PageSettings();
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169);
            pgs.Margins = new Margins(0, 0, 0, 0);
            viewer.PrintDocumentWithSettings(pgs, ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")
            viewer.AutoResize = true;           'print the file with adjusted size
            viewer.AutoRotate = true;           'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            Dim pgs As PageSettings=new PageSettings()
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169)
            pgs.Margins = new Margins(0, 0, 0, 0)
            viewer.PrintDocumentWithSettings(pgs, ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.PrintDocumentWithSettings(System.Drawing.Printing.PrinterSettings)">
      <summary>
             Prints the Pdf document with printer settings. The output page size will fit the the document first page size.
             </summary>
      <param name="printerSettings">The printer setting of the printing document.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.AutoResize = true;         //print the file with adjusted size
            viewer.AutoRotate = true;         //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            viewer.PrintDocumentWithSettings(ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")
            viewer.AutoResize = true;        'print the file with adjusted size
            viewer.AutoRotate = true;        'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            viewer.PrintDocumentWithSettings(ps);
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.PrintDocument">
      <summary>
             Prints the Pdf document using default printer.
             </summary>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.AutoResize = true;         //print the file with adjusted size
            viewer.AutoRotate = true;         //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintDocument(ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")
            viewer.AutoResize = true;         'print the file with adjusted size
            viewer.AutoRotate = true;         'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintDocument(ps);
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfViewer.DecodeAllPages">
      <summary>
            Get pages of current pdf file.
            </summary>
      <returns>return the array of Pdf page images.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfViewer.PageCount">
      <summary>
            Gets page count of the current Pdf file.
            </summary>
      <returns>return page count.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfViewer.Password">
      <summary>
            Gets and sets input file's password. see also:<see cref="!:decodePage" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfViewer.PrintPageDialog">
      <summary>
            Gets and sets a bool value that indicates whether produce the page number dialog when printing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfViewer.AutoResize">
      <summary>
            Gets and sets a bool value that indicates whether the file be printed with optimized size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfViewer.AutoRotate">
      <summary>
            Gets and sets a bool value that indicates whether the file be printed with auto rotation
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfViewer.Resolution">
      <summary>
            Gets or sets resolution during viewing and printing. The higher resolution, the slower speed. The default value is 150.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.PdfXmpMetadata">
      <summary>
             
             Represents a class to set or get the XmpMetadata of a pdf document.
             </summary>
      <example>
        <code>
             [C#]
             
             //create an object of PdfXmpMetadata class
             Aspose.Pdf.Kit.PdfXmpMetadata xmpMetaData = new Aspose.Pdf.Kit.PdfXmpMetadata();
             
             //create input and output file streams
             FileStream input = new FileStream(common.Path("Aspose.Pdf.Kit.pdf"), FileMode.Open);
             FileStream output = new FileStream(common.Path("Aspose.Pdf.Kit_xmp_output.pdf"), FileMode.Create);
            
             //set input file stream
             xmpMetaData.InputStream = input;
            
            	//set output file stream
            	xmpMetaData.OutputStream = output;
            
            	//create an object of XmpSchema class to add new schema info
            	Aspose.Pdf.Kit.XmpSchema xmpSchema = new Aspose.Pdf.Kit.XmpSchema();
            
            	//set xml namespace
            	xmpSchema.XmlNameSpace = "xmlns:pdf=http://ns.adobe.com/pdf/1.3/";
            
            	//add create date
            	xmpSchema.AddCreateDate(System.DateTime.Now.ToString());
            
            	//add meta data date
            	xmpSchema.AddMetaDataDate(System.DateTime.Now.ToString());
            
            	//add creator tool
            	xmpSchema.AddCreatorTool("Creator tool name");
            
            	//add modify date
            	xmpSchema.AddModifyDate(System.DateTime.Now.ToString());
            
            	//add user defined property in the schema
            	xmpSchema.AddUserProperty("UserPropertyName", "UserPropertyValue");
            
            	//add xmp schema in xmp meta data of the pdf file
            	xmpMetaData.AddXmpRdf(xmpSchema);
            
            	//save xmp meta data in the pdf file
            	xmpMetaData.Save();
            
            	//close input and output file streams
            	input.Close();
            	output.Close();
            
            	[Visual Basic]
            	
            	'create an object of PdfXmpMetadata class
            	Dim xmpMetaData As New Aspose.Pdf.Kit.PdfXmpMetadata()
            
            	'create input and output file streams
            	Dim input As New FileStream(Common.Path("Aspose.Pdf.Kit.pdf"), FileMode.Open)
            	Dim output As New FileStream(Common.Path("Aspose.Pdf.Kit_xmp_output.pdf"), FileMode.Create)
            
            	'set input file stream
            	xmpMetaData.InputStream = input
            
            	'set output file stream
            	xmpMetaData.OutputStream = output
            
            	'create an object of XmpSchema class to add new schema info
            	Dim xmpSchema As New Aspose.Pdf.Kit.XmpSchema()
            
            	'set xml namespace
            	xmpSchema.XmlNameSpace = "xmlns:pdf=http://ns.adobe.com/pdf/1.3/"
            
            	'add create date
            	xmpSchema.AddCreateDate(System.DateTime.Now.ToString())
            
            	'add meta data date
            	xmpSchema.AddMetaDataDate(System.DateTime.Now.ToString())
            
            	'add creator tool
            	xmpSchema.AddCreatorTool("Creator tool name")
            
            	'add modify date
            	xmpSchema.AddModifyDate(System.DateTime.Now.ToString())
            
            	'add user defined property in the schema
            	xmpSchema.AddUserProperty("UserPropertyName", "UserPropertyValue")
            
            	'add xmp schema in xmp meta data of the pdf file
            	xmpMetaData.AddXmpRdf(xmpSchema)
            
            	'save xmp meta data in the pdf file
            	xmpMetaData.Save()
            
            	'close input and output file streams
            	input.Close()
            	output.Close()
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfXmpMetadata.#ctor">
      <summary>
            Represents a constructor of the PdfXmpMetadata object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfXmpMetadata.Save">
      <summary>
            Saves the value of the filled fields and close the opened Pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfXmpMetadata.AddXmpRdf(Aspose.Pdf.Kit.XmpSchema)">
      <summary>
            Add a user-defined XmpSchema to the Xmp Metadata.
            </summary>
      <param name="xmpSchema">The user-defined <see cref="T:Aspose.Pdf.Kit.XmpSchema" />.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfXmpMetadata.GetXmpMetadata">
      <summary>
            Get the XmpMetadata of the input pdf in a xml format.
            </summary>
      <returns>The bytes of the XmpMetadata.</returns>
    </member>
    <member name="M:Aspose.Pdf.Kit.PdfXmpMetadata.GetXmpMetadata(System.String)">
      <summary>
            Get a part of the XmpMetadata of the input pdf according to a meta name.
            </summary>
      <param name="metaName">The metadata's name.</param>
      <returns>The bytes of the XmpMetadata.</returns>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfXmpMetadata.InputStream">
      <summary>
            Get or set the input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.PdfXmpMetadata.OutputStream">
      <summary>
            Get or set the output stream.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.Stamp">
      <summary>
            Represents a class to stamp content, the content is an image or a text.
            With <see cref="T:Aspose.Pdf.Kit.PdfFileStamp" />,the content can be layed at the bottom as background,or at the top as watermark and logo of pages.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.Stamp.#ctor">
      <summary>
            Creates a Stamp object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.Stamp.BindPdf(System.String,System.Int32)">
      <summary>
            Binds one page of PDF file as stamp content.
            </summary>
      <param name="pdfFile">input PDf file</param>
      <param name="pageNumber">the page number of PDF file which used as stamp content</param>
      <example>
        <code>
            [C#]
            string inFile ="example1.pdf";
            string outFile ="StampAll.pdf";
            Stamp pdfFileStamp = new Stamp();
            pdfFileStamp.BindPdf(inputPath + "Online.pdf", 1);
            PdfFileStamp stamper = new PdfFileStamp(inFile,outFile);
            stamper.AddStamp(pdfFileStamp);
            stamper.Close();
            
            [Visual Basic]
            Dim inFile As String =  "example1.pdf" 
            Dim outFile As String = "StampAll.pdf" 
            Dim pdfFileStamp As Stamp =  New Stamp() 
            pdfFileStamp.BindPdf(inputPath + "Online.pdf", 1)
            Dim stamper As PdfFileStamp =  New PdfFileStamp(inFile,outFile) 
            stamper.AddStamp(pdfFileStamp)
            stamper.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.Stamp.BindPdf(System.IO.Stream,System.Int32)">
      <summary>
            Binds one page of PDF stream as stamp content. see also:<see cref="M:Aspose.Pdf.Kit.Stamp.BindPdf(System.String,System.Int32)" /></summary>
      <param name="pdfStream">input PDf stream</param>
      <param name="pageNumber">the page number of PDF file which used as stamp content</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Stamp.BindImage(System.IO.Stream)">
      <summary>
            Binds an image as stamp content.
            </summary>
      <param name="image">Input image stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Stamp.BindImage(System.String)">
      <summary>
            Binds an imame as stamp content.
            </summary>
      <param name="imageFile">Input image file.</param>
      <example>
        <code>
            [C#]
            string imageFile = "butterfly.jpg";
            string inFile = "example1.pdf";
            string outFile = "StampWatermrk.pdf";
            PdfFileInfo fileInfo = new PdfFileInfo(inFile);
            Stamp aStamp = new Stamp();
            aStamp.BindImage(imageFile);
            aStamp.Pages = new int[]{1,2,4};
            aStamp.Rotation = 30;
            aStamp.SetOrigin(fileInfo.GetPageWidth(1)/2,fileInfo.GetPageHeight(1)/2);//specifies the position of stamp
            aStamp.SetImageSize(80,80);
            PdfFileStamp stamper = new PdfFileStamp(inFile,outFile);
            stamper.AddStamp(aStamp);
            stamper.Close();
            
            [Visual Basic]
            Dim imageFile As String =  "butterfly.jpg" 
            Dim inFile As String =  "example1.pdf" 
            Dim outFile As String =  "StampWatermrk.pdf" 
            Dim fileInfo As PdfFileInfo =  New PdfFileInfo(inFile) 
            Dim aStamp As Stamp =  New Stamp() 
            aStamp.BindImage(imageFile)
            aStamp.Pages = New Integer(){1,2,4}
            aStamp.Rotation = 30
            aStamp.SetOrigin(fileInfo.GetPageWidth(1)/2,fileInfo.GetPageHeight(1)/2)  'specifies the position of stamp
            aStamp.SetImageSize(80,80)
            Dim stamper As PdfFileStamp =  New PdfFileStamp(inFile,outFile) 
            stamper.AddStamp(aStamp)
            stamper.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.Stamp.BindLogo(Aspose.Pdf.Kit.FormattedText)">
      <summary>
            Binds a text as stamp content.
            </summary>
      <param name="fText">A formatted text for logo.</param>
      <example>
        <code>
            [C#]
            string inFile = "example1.pdf";
            string outFile = "StampLogo.pdf";
            Stamp aStamp = new Stamp();
            aStamp.BindLogo(new FormattedText("Hello Aspose.Pdf.Kit!"));
            aStamp.Pages =new int[]{2,3};
            aStamp.Rotation = 90;
            aStamp.SetOrigin(50,50);
            PdfFileStamp stamper = new PdfFileStamp(inFile,outFile);
            stamper.AddStamp(aStamp);
            stamper.Close();
            
            [Visaul Basic]
            Dim inFile As String =  "example1.pdf" 
            Dim outFile As String =  "StampLogo.pdf" 
            Dim aStamp As Stamp =  New Stamp() 
            aStamp.BindLogo(New FormattedText("Hello Aspose.Pdf.Kit!"))
            aStamp.Pages =New Integer(){2,3}
            aStamp.Rotation = 90
            aStamp.SetOrigin(50,50)
            Dim stamper As PdfFileStamp =  New PdfFileStamp(inFile,outFile) 
            stamper.AddStamp(aStamp)
            stamper.Close()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Kit.Stamp.SetOrigin(System.Single,System.Single)">
      <summary>
            Sets the lower-left coordinates of a rectangle which contains stamp content layed on the pages.
            </summary>
      <param name="originX">x-position right to left-bottom corner, the unit is Point(1 inch = 72 points, 1 cm = 28.3 points)</param>
      <param name="originY">y-position up to Left-Bottom corner</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.Stamp.SetImageSize(System.Single,System.Single)">
      <summary>
            Resizes the image which is bound as stamp content.
            the unit is point.(1 inch = 72 point, 1 cm = 28.3 point)
            </summary>
      <param name="width">New width of image.</param>
      <param name="height">New height of image.</param>
    </member>
    <member name="P:Aspose.Pdf.Kit.Stamp.Opacity">
      <summary>
            Gets or sets a float value to indicate the stamp object opacity.The value is from 0.0f and 1.0f,by default, the value is 1.0f.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Stamp.PageNumber">
      <summary>
            Gets or sets the page number on which stamp is added.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Stamp.Pages">
      <summary>
            Sets or gets the page number to indicate on which pages the stamp content is added. By default,stamps each page .
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Stamp.Rotation">
      <summary>
            Sets or gets the rotation from 0 to 360 of stamp content.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Kit.Stamp.IsBackground">
      <summary>
            Sets or gets a bool value that indicates the content is stamped as background.
            If the value is true,the stamp content is layed at the bottom, By defalt, the value is false,the stamp content
            is layed at the top.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.VerticalAlignmentType">
      <summary>
            Represents the vertiacl alignment types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.VerticalAlignmentType.Top">
      <summary>
            Top alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.VerticalAlignmentType.Center">
      <summary>
            Center alignment type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.VerticalAlignmentType.Bottom">
      <summary>
            Bottom alignment type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.ViewerPreference">
      <summary> 
            Represents the display modes of Pdf files.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.PageModeUseOC">
      <summary>
            Optional content group panel is visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.DisplayDocTitle">
      <summary>
            Displays the document title in the window's title bar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.NonFullScreenPageModeUseOC">
      <summary>
            After exiting full-screen model,Optional content group panel is visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.PageLayoutSinglePage">
      <summary>
            Displays one page at a time.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.PageLayoutOneColumn">
      <summary>
            Displays the pages in one colomn.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.PageLayoutTwoColumnLeft">
      <summary>
            Display the pages in two columns,with odd-numbered pages on the left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.PageLayoutTwoColumnRight">
      <summary>
            Displays the pages in two columns, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.PageModeUseNone">
      <summary>
            Neither document outline nor thumbnail images is visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.PageModeUseOutlines">
      <summary>
            Document outline visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.PageModeUseThumbs">
      <summary>
            Thumbnail images visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.PageModeFullScreen">
      <summary>
            FullScreenFull-screen mode, with no menu bar, window controls, or any other window is visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.PageModeUseAttachment">
      <summary>
            Attachments panel is visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.HideToolbar">
      <summary>
            Hides the viewer application's tool bars when the document is active.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.HideMenubar">
      <summary>
            Hides the viewer application's menu bars when the document is active.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.HideWindowUI">
      <summary>
            Hides user interface elements in the document’s window (such as scroll bars and navigation controls),
            leaving only the document’s contents displayed
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.FitWindow">
      <summary>
            Resizes the document's window to fit the size of the first displayed page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.CenterWindow">
      <summary>
            Position the document's window in the center of the screen.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.NonFullScreenPageModeUseNone">
      <summary>
            After exiting full-screen model,neither cocument outline nor thumbnail images is visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.NonFullScreenPageModeUseOutlines">
      <summary>
            After exiting full-screen model,document outline is visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.NonFullScreenPageModeUseThumbs">
      <summary>
            After exiting full-screen model,thumbnail images is visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.DirectionL2R">
      <summary>
            The predominant reading order for text:left to right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Kit.ViewerPreference.DirectionR2L">
      <summary>
            The predominant reading for text:right to left.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.XmpSchema">
      <summary>
            Represents a class to create a pdf's XmpSchema.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.XmpSchema.#ctor">
      <summary>
            The constructor.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Kit.XmpSchema.AddCreatorTool(System.String)">
      <summary>
            Add the creator tool of the pdf.
            </summary>
      <param name="creator">The creator tool of the pdf.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.XmpSchema.AddCreateDate(System.String)">
      <summary>
            Add the creation date of the pdf. 
            </summary>
      <param name="date">The creation date of the pdf.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.XmpSchema.AddModifyDate(System.String)">
      <summary>
            Add the date of the last modifying the pdf.
            </summary>
      <param name="date">The modifying date.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.XmpSchema.AddMetaDataDate(System.String)">
      <summary>
            Add the time of the metadata which was last changed.
            </summary>
      <param name="date">The metadata's date.</param>
    </member>
    <member name="M:Aspose.Pdf.Kit.XmpSchema.AddUserProperty(System.String,System.String)">
      <summary>
            Add a new property defined by users.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The value of the property.</param>
    </member>
    <member name="P:Aspose.Pdf.Kit.XmpSchema.XmlNameSpace">
      <summary>
            Get or set the xml namespace. The default value is "xmlns:pdf="http://ns.adobe.com/pdf/1.3/"".
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Kit.License">
      <summary>
            Provides methods to license the component.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Kit.License.#ctor">
      <summary>
            Initializes a new instance of this class.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Kit.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <p>2. The folder of the component assembly.</p>
        <p>3. The folder of the client's calling assembly.</p>
        <p>4. The folder of the entry assembly.</p>
        <p>5. An embedded resource in the client's calling assembly.</p>
        <p>
          <b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
        <p>1. Explicit path.</p>
        <p>2. An embedded resource in the client's calling assembly.</p>
      </remarks>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code><param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param></example>
    </member>
    <member name="M:Aspose.Pdf.Kit.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </code>
      </example>
    </member>
  </members>
</doc>